
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean, Int8 } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity, getStore, UpdateValues } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'







interface UserBalanceConstructorInput {
  id: String;
  wallet: String;
  symbol: String;
  balance: BigInt;
}
@Entity("UserBalance")
export class UserBalance extends AbstractEntity  {

	@Required
	@Column("String")
	id: String

	@Required
	@Column("String")
	wallet: String

	@Required
	@Column("String")
	symbol: String

	@Required
	@Column("BigInt")
	balance: BigInt
  constructor(data: UserBalanceConstructorInput) {super()}
  
  
  static update(values: UpdateValues<UserBalanceConstructorInput>): Promise<void> {
    return getStore().update(UserBalance, values)
  }
}


const source = `type UserBalance @entity {
  id: String!
  wallet: String!
  symbol: String!
  balance: BigInt!
}
`
DatabaseSchema.register({
  source,
  entities: {
    "UserBalance": UserBalance
  }
})
