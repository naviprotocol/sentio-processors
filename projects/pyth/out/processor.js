"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/types/aptos/pyth.ts
var import_aptos3 = require("@sentio/sdk/aptos");

// ../../node_modules/@typemove/move/dist/esm/utils.js
var SPLITTER = "::";
var VECTOR_STR = "vector";
function accountTypeString(account) {
  const withoutPrefix = account.toLowerCase().replace(/^(0x)/, "");
  return "0x" + withoutPrefix.replace(/^0*/, "");
}
var MOVE_ADDRESS_LENGTH = 32;
function isHex(value) {
  return /^(0x|0X)?[a-fA-F0-9]+$/.test(value);
}
function getHexByteLength(value) {
  return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;
}
function isValidMoveAddress(value) {
  return isHex(value) && getHexByteLength(value) <= MOVE_ADDRESS_LENGTH;
}
function accountAddressString(account) {
  if (!isValidMoveAddress(account)) {
    throw Error("Not valid move address");
  }
  const address = account.toLowerCase().replace(/^(0x)/, "");
  return `0x${address.padStart(MOVE_ADDRESS_LENGTH * 2, "0")}`;
}
function moduleQname(module2) {
  return accountTypeString(module2.address) + SPLITTER + module2.name;
}

// ../../node_modules/@typemove/move/dist/esm/types.js
var TypeDescriptor = class _TypeDescriptor {
  qname;
  reference;
  mutable;
  typeArgs;
  constructor(symbol, typeParams) {
    this.qname = symbol;
    this.reference = false;
    this.mutable = false;
    this.typeArgs = typeParams || [];
  }
  apply(...typeArgs) {
    const newObj = this.clone();
    newObj.typeArgs = typeArgs;
    return newObj;
  }
  clone() {
    const newObj = new _TypeDescriptor(this.qname, this.typeArgs);
    newObj.reference = this.reference;
    newObj.mutable = this.mutable;
    return newObj;
  }
  // compare qname without consider case for system type
  compareQname(t) {
    let t1 = this.qname;
    if (BUILTIN_TYPES_SET.has(this.qname.toLowerCase())) {
      t1 = this.qname.toLowerCase();
    }
    let t2 = t.qname;
    if (BUILTIN_TYPES_SET.has(t.qname.toLowerCase())) {
      t2 = t.qname;
    }
    return t1 === t2;
  }
  getSignature() {
    if (this.typeArgs.length > 0) {
      return this.qname + "<" + this.typeArgs.map((t) => t.getSignature()).join(", ") + ">";
    }
    return this.qname;
  }
  // Make U8, U16, etc => u8, u16
  getNormalizedSignature() {
    let qname = this.qname;
    switch (qname) {
      case "U8":
      case "U16":
      case "U32":
      case "U64":
      case "U128":
      case "U256":
      case "Vector":
      case "Bool":
      case "Address":
        qname = qname.toLowerCase();
    }
    if (this.typeArgs.length > 0) {
      return qname + "<" + this.typeArgs.map((t) => t.getNormalizedSignature()).join(", ") + ">";
    }
    return qname;
  }
  // Replace T0, T1 with more concrete type
  applyTypeArgs(ctx) {
    const replace = ctx.get(this.qname);
    if (replace) {
      return replace;
    }
    if (ctx.size === 0 || this.typeArgs.length === 0) {
      return this;
    }
    const typeArgs = [];
    for (const arg of this.typeArgs) {
      const replace2 = ctx.get(arg.qname);
      if (replace2) {
        typeArgs.push(replace2);
      } else {
        typeArgs.push(arg.applyTypeArgs(ctx));
      }
    }
    return new _TypeDescriptor(this.qname, typeArgs);
  }
  // all depended types including itself, not include system type
  dependedTypes() {
    if (this.qname.startsWith("&")) {
      console.error("Not expected &");
      return [];
    }
    if (this.isVector()) {
      return this.typeArgs[0].dependedTypes();
    }
    if (BUILTIN_TYPES_SET.has(this.qname.toLowerCase())) {
      return [];
    }
    switch (this.qname) {
      case "signer":
      case "0x1::string::String":
        return [];
    }
    if (this.qname.indexOf(SPLITTER) == -1) {
      if (this.qname.startsWith("T")) {
        return [];
      }
    }
    const types = /* @__PURE__ */ new Set();
    for (const param of this.typeArgs) {
      param.dependedTypes().forEach((t) => types.add(t));
    }
    types.add(this.qname);
    return Array.from(types);
  }
  isVector() {
    return this.qname.toLowerCase() === VECTOR_STR;
  }
  existAnyType() {
    if (this.qname === "any") {
      return true;
    }
    for (const param of this.typeArgs) {
      if (param.existAnyType()) {
        return true;
      }
    }
    return false;
  }
  name() {
    const parts = this.qname.split(SPLITTER);
    return parts[parts.length - 1];
  }
  module() {
    const parts = this.qname.split(SPLITTER);
    return parts[parts.length - 2];
  }
};
function parseMoveType(type) {
  const stack = [new TypeDescriptor("")];
  let buffer = [];
  if (type === void 0) {
    console.log("");
  }
  for (let i = 0; i < type.length; i++) {
    const ch = type[i];
    if (ch === " ") {
      continue;
    }
    if (ch === "<") {
      const symbol = buffer.join("");
      buffer = [];
      stack[stack.length - 1].qname = symbol;
      adjustType(stack[stack.length - 1]);
      stack.push(new TypeDescriptor(""));
      continue;
    }
    if (ch === ">" || ch === ",") {
      const typeParam = stack.pop();
      if (!typeParam) {
        throw Error("Unexpected stack size");
      }
      if (buffer.length > 0) {
        typeParam.qname = buffer.join("");
        buffer = [];
      }
      adjustType(typeParam);
      stack[stack.length - 1].typeArgs.push(typeParam);
      if (ch === ",") {
        stack.push(new TypeDescriptor(""));
      }
      continue;
    }
    buffer.push(ch);
  }
  if (buffer.length > 0) {
    stack[stack.length - 1].qname = buffer.join("");
  }
  adjustType(stack[stack.length - 1]);
  const res = stack.pop();
  if (!res || stack.length > 0) {
    throw Error("Unexpected stack size");
  }
  return res;
}
function adjustType(type) {
  if (type.qname.startsWith("&")) {
    type.reference = true;
    type.qname = type.qname.slice(1);
  }
  if (type.qname.startsWith("mut")) {
    type.mutable = true;
    type.qname = type.qname.slice(3);
  }
  const parts = type.qname.split(SPLITTER);
  if (parts.length > 1) {
    const [account, module2, name] = parts;
    type.qname = [accountTypeString(account), module2, name].join(SPLITTER);
  }
}
var ANY_TYPE = new TypeDescriptor("any");
function vectorType(t = ANY_TYPE) {
  return BUILTIN_TYPES.VECTOR_TYPE_ANY.apply(t);
}
var BUILTIN_TYPES = {
  ADDRESS_TYPE: new TypeDescriptor("address"),
  // export const Address = new TypeDescriptor<string>("Address")
  VECTOR_TYPE_ANY: new TypeDescriptor("vector"),
  VECTOR_TYPE: vectorType,
  BOOL_TYPE: new TypeDescriptor("bool"),
  U8_TYPE: new TypeDescriptor("u8"),
  // export const U8 = new TypeDescriptor<number>("U8")
  U16_TYPE: new TypeDescriptor("u16"),
  // export const U16 = new TypeDescriptor<number>("U16")
  U32_TYPE: new TypeDescriptor("u32"),
  // export const U32 = new TypeDescriptor<number>("U32")
  U64_TYPE: new TypeDescriptor("u64"),
  // export const U64 = new TypeDescriptor<number>("U64")
  U128_TYPE: new TypeDescriptor("u128"),
  // export const U128 = new TypeDescriptor<number>("U128")
  U256_TYPE: new TypeDescriptor("u256")
  // export const U256 = new TypeDescriptor<number>("U256")
};
var BUILTIN_TYPES_SET = new Set(Object.values(BUILTIN_TYPES).flatMap((t) => {
  if (typeof t === "object") {
    return [t.qname.toLowerCase()];
  }
  return [];
}));
function matchType(matcher, type) {
  if (matcher.qname === "any") {
    return true;
  }
  if (!matcher.compareQname(type)) {
    return false;
  }
  for (const [idx, matcherTarg] of matcher.typeArgs.entries()) {
    const targ = type.typeArgs[idx];
    if (!matchType(matcherTarg, targ)) {
      return false;
    }
  }
  return true;
}

// ../../node_modules/@typemove/move/dist/esm/chain-adapter.js
var ChainAdapter = class {
};

// ../../node_modules/@typemove/move/dist/esm/abstract-move-coder.js
var AbstractMoveCoder = class {
  moduleMapping = /* @__PURE__ */ new Map();
  typeMapping = /* @__PURE__ */ new Map();
  funcMapping = /* @__PURE__ */ new Map();
  // network: string
  adapter;
  constructor(adapter) {
    this.adapter = adapter;
  }
  contains(account, name) {
    return this.moduleMapping.has(moduleQname({ address: account, name }));
  }
  loadInternal(module2, address) {
    const account = accountAddressString(module2.address);
    const declareAccount = accountAddressString(address);
    this._loadInternal(module2, account);
    if (account !== declareAccount) {
      this._loadInternal(module2, declareAccount);
    }
  }
  _loadInternal(module2, account) {
    if (this.contains(account, module2.name)) {
      return;
    }
    this.moduleMapping.set(moduleQname({ address: account, name: module2.name }), module2);
    for (const struct of module2.structs) {
      const key = [account, module2.name, struct.name].join(SPLITTER);
      this.typeMapping.set(key, struct);
    }
    for (const func of module2.exposedFunctions) {
      const key = [account, module2.name, func.name].join(SPLITTER);
      this.funcMapping.set(key, func);
    }
  }
  decodeBigInt(data) {
    if (Array.isArray(data)) {
      throw new Error("data is in byte array");
    }
    return BigInt(data);
  }
  requestMap = /* @__PURE__ */ new Map();
  async getMoveStruct(type) {
    const [account_, module2, typeName] = type.split(SPLITTER);
    const account = accountAddressString(account_);
    type = [account, module2, typeName].join(SPLITTER);
    let struct = this.typeMapping.get(type);
    if (struct) {
      return struct;
    }
    let resp = this.requestMap.get(account);
    if (!resp) {
      resp = this.adapter.fetchModules(account).then((modules) => {
        for (const m of modules) {
          this.load(m, account);
        }
      });
      this.requestMap.set(account, resp);
    }
    await resp;
    struct = this.typeMapping.get(type);
    if (struct) {
      return struct;
    }
    throw new Error("Failed to load function " + type + " type are not imported anywhere");
  }
  async getMoveFunction(type) {
    const [account_, module2, typeName] = type.split(SPLITTER);
    const account = accountAddressString(account_);
    type = [account, module2, typeName].join(SPLITTER);
    let func = this.funcMapping.get(type);
    if (func) {
      return func;
    }
    let resp = this.requestMap.get(account);
    if (!resp) {
      resp = this.adapter.fetchModules(account).then((modules) => {
        for (const m of modules) {
          this.load(m, account);
        }
      }).catch((e) => {
        this.requestMap.delete(account);
      });
      this.requestMap.set(account, resp);
    }
    await resp;
    func = this.funcMapping.get(type);
    if (func) {
      return func;
    }
    throw new Error("Failed to load function " + type + " type are not imported anywhere");
  }
  async decode(data, type) {
    if (type.reference) {
      return data;
    }
    switch (type.qname) {
      case "signer":
      // TODO check this, aptos only
      case "address":
      case "Address":
      case "0x1::string::String":
      case "bool":
      case "Bool":
      case "u8":
      case "U8":
      case "u16":
      case "U16":
      case "u32":
      case "U32":
        return data;
      case "u64":
      case "U64":
      case "u128":
      case "U128":
      case "u256":
      case "U256":
        return this.decodeBigInt(data);
    }
    if (type.qname.toLowerCase() === VECTOR_STR) {
      if (type.typeArgs[0].qname === "u8" || type.typeArgs[0].qname === "U8") {
        return data;
      }
      const res = [];
      for (const entry of data) {
        res.push(await this.decode(entry, type.typeArgs[0]));
      }
      return res;
    }
    const struct = await this.getMoveStruct(type.qname);
    const typeCtx = /* @__PURE__ */ new Map();
    for (const [idx, typeArg] of type.typeArgs.entries()) {
      typeCtx.set("T" + idx, typeArg);
    }
    const typedData = {};
    for (const field of struct.fields) {
      let filedType = field.type;
      filedType = filedType.applyTypeArgs(typeCtx);
      const fieldValue = this.adapter.getData(data)[field.name];
      const value = await this.decode(fieldValue, filedType);
      typedData[field.name] = value;
    }
    return typedData;
  }
  async decodeArray(entries, types, strict = true) {
    const entriesDecoded = [];
    for (const [idx, arg] of entries.entries()) {
      const argType = types[idx];
      try {
        if (!strict && arg === void 0) {
          entriesDecoded.push(arg);
        } else {
          entriesDecoded.push(await this.decode(arg, argType));
        }
      } catch (e) {
        throw Error("Decoding error for " + JSON.stringify(arg) + "using type" + argType + e.toString());
      }
    }
    return entriesDecoded;
  }
  encode(data) {
    if (!data) {
      return void 0;
    }
    if (typeof data === "bigint") {
      return data.toString();
    }
    if (Array.isArray(data)) {
      return this.encodeArray(data);
    }
    for (const [key, value] of Object.entries(data)) {
      if (!value) {
        continue;
      }
      if (typeof value === "bigint") {
        data[key] = value.toString();
      }
    }
    return data;
  }
  encodeArray(entriesDecoded) {
    const entries = [];
    for (const [idx, arg] of entriesDecoded.entries()) {
      entries.push(this.encode(arg));
    }
    return entries;
  }
  async decodeCallResult(res, func) {
    const f = await this.getMoveFunction(func);
    return this.decodeArray(res, f.return);
  }
  async filterAndDecodeStruct(typeMatcher, structsWithTags) {
    if (!structsWithTags) {
      return [];
    }
    const results = [];
    for (const resource of structsWithTags) {
      const resourceType = this.adapter.getType(resource);
      const resourceTypeDescriptor = parseMoveType(resourceType);
      if (!matchType(typeMatcher, resourceTypeDescriptor)) {
        continue;
      }
      const result = await this.decodedStruct(resource);
      if (result) {
        results.push(result);
      } else {
        console.error("decoding error");
      }
    }
    return results;
  }
  async decodedStruct(typeStruct) {
    const typeDescriptor = parseMoveType(this.adapter.getType(typeStruct));
    const typeArguments = typeDescriptor.typeArgs.map((t) => t.getSignature());
    let dataTyped = void 0;
    try {
      dataTyped = await this.decode(typeStruct, typeDescriptor);
    } catch (e) {
      throw Error("Decoding error for struct" + JSON.stringify(typeStruct) + e.toString());
    }
    return {
      ...typeStruct,
      data_decoded: dataTyped,
      type_arguments: typeArguments
    };
  }
  async decodedType(typeStruct, type) {
    if (typeStruct === null || typeStruct == void 0) {
      return typeStruct;
    }
    if (typeof typeStruct === "object") {
      if ("type" in typeStruct) {
        const typeInStruct = parseMoveType(typeStruct.type.toString() || "");
        if (!matchType(type, typeInStruct)) {
          return void 0;
        }
      }
    }
    return await this.decode(typeStruct, type);
  }
};

// ../../node_modules/@typemove/move/dist/esm/internal-models.js
var InternalMoveFunctionVisibility;
(function(InternalMoveFunctionVisibility2) {
  InternalMoveFunctionVisibility2["PRIVATE"] = "private";
  InternalMoveFunctionVisibility2["PUBLIC"] = "public";
  InternalMoveFunctionVisibility2["FRIEND"] = "friend";
})(InternalMoveFunctionVisibility || (InternalMoveFunctionVisibility = {}));

// src/types/aptos/pyth.ts
var import_aptos4 = require("@sentio/sdk/aptos");
var _0x12 = __toESM(require("@sentio/sdk/aptos/builtin/0x1"), 1);

// src/types/aptos/0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625.ts
var import_aptos = require("@sentio/sdk/aptos");
var import_aptos2 = require("@sentio/sdk/aptos");
var _0x1 = __toESM(require("@sentio/sdk/aptos/builtin/0x1"), 1);
var set = class _set extends import_aptos.AptosBaseProcessor {
  constructor(options) {
    super("set", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625",
    network: import_aptos.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _set({ ..._set.DEFAULT_OPTIONS, ...options });
  }
  onEventUnit(func, fetchConfig) {
    this.onMoveEvent(func, { type: "set::Unit" }, fetchConfig);
    return this;
  }
};
((set6) => {
  let Set2;
  ((Set3) => {
    Set3.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::set::Set";
    const TYPE = new TypeDescriptor(Set3.TYPE_QNAME);
    function type(arg0 = ANY_TYPE) {
      return TYPE.apply(arg0);
    }
    Set3.type = type;
  })(Set2 = set6.Set || (set6.Set = {}));
  let Unit;
  ((Unit2) => {
    Unit2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::set::Unit";
    const TYPE = new TypeDescriptor(Unit2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Unit2.type = type;
  })(Unit = set6.Unit || (set6.Unit = {}));
})(set || (set = {}));
var u16 = class _u16 extends import_aptos.AptosBaseProcessor {
  constructor(options) {
    super("u16", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625",
    network: import_aptos.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _u16({ ..._u16.DEFAULT_OPTIONS, ...options });
  }
  onEventU16(func, fetchConfig) {
    this.onMoveEvent(func, { type: "u16::U16" }, fetchConfig);
    return this;
  }
};
((u162) => {
  let U16;
  ((U162) => {
    U162.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16";
    const TYPE = new TypeDescriptor(U162.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    U162.type = type;
  })(U16 = u162.U16 || (u162.U16 = {}));
})(u16 || (u16 = {}));
var u32 = class _u32 extends import_aptos.AptosBaseProcessor {
  constructor(options) {
    super("u32", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625",
    network: import_aptos.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _u32({ ..._u32.DEFAULT_OPTIONS, ...options });
  }
  onEventU32(func, fetchConfig) {
    this.onMoveEvent(func, { type: "u32::U32" }, fetchConfig);
    return this;
  }
};
((u324) => {
  let U32;
  ((U322) => {
    U322.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32";
    const TYPE = new TypeDescriptor(U322.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    U322.type = type;
  })(U32 = u324.U32 || (u324.U32 = {}));
})(u32 || (u32 = {}));
var vaa;
((vaa3) => {
  let VAA;
  ((VAA2) => {
    VAA2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::vaa::VAA";
    const TYPE = new TypeDescriptor(VAA2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    VAA2.type = type;
  })(VAA = vaa3.VAA || (vaa3.VAA = {}));
})(vaa || (vaa = {}));
var u256 = class _u256 extends import_aptos.AptosBaseProcessor {
  constructor(options) {
    super("u256", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625",
    network: import_aptos.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _u256({ ..._u256.DEFAULT_OPTIONS, ...options });
  }
  onEventDU256(func, fetchConfig) {
    this.onMoveEvent(func, { type: "u256::DU256" }, fetchConfig);
    return this;
  }
  onEventU256(func, fetchConfig) {
    this.onMoveEvent(func, { type: "u256::U256" }, fetchConfig);
    return this;
  }
};
((u2562) => {
  let DU256;
  ((DU2562) => {
    DU2562.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::DU256";
    const TYPE = new TypeDescriptor(DU2562.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    DU2562.type = type;
  })(DU256 = u2562.DU256 || (u2562.DU256 = {}));
  let U256;
  ((U2562) => {
    U2562.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256";
    const TYPE = new TypeDescriptor(U2562.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    U2562.type = type;
  })(U256 = u2562.U256 || (u2562.U256 = {}));
})(u256 || (u256 = {}));
var state = class _state extends import_aptos.AptosBaseProcessor {
  constructor(options) {
    super("state", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625",
    network: import_aptos.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _state({ ..._state.DEFAULT_OPTIONS, ...options });
  }
  onEntryPublishEvent(func, filter, fetchConfig) {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "state::publish_event"
      },
      fetchConfig
    );
    return this;
  }
  onEventGuardianSetChanged(func, fetchConfig) {
    this.onMoveEvent(func, { type: "state::GuardianSetChanged" }, fetchConfig);
    return this;
  }
  onEventWormholeMessage(func, fetchConfig) {
    this.onMoveEvent(func, { type: "state::WormholeMessage" }, fetchConfig);
    return this;
  }
};
((state6) => {
  let GuardianSetChanged;
  ((GuardianSetChanged2) => {
    GuardianSetChanged2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::GuardianSetChanged";
    const TYPE = new TypeDescriptor(
      GuardianSetChanged2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GuardianSetChanged2.type = type;
  })(GuardianSetChanged = state6.GuardianSetChanged || (state6.GuardianSetChanged = {}));
  let GuardianSetChangedHandle;
  ((GuardianSetChangedHandle2) => {
    GuardianSetChangedHandle2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::GuardianSetChangedHandle";
    const TYPE = new TypeDescriptor(
      GuardianSetChangedHandle2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GuardianSetChangedHandle2.type = type;
  })(GuardianSetChangedHandle = state6.GuardianSetChangedHandle || (state6.GuardianSetChangedHandle = {}));
  let WormholeMessage;
  ((WormholeMessage2) => {
    WormholeMessage2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::WormholeMessage";
    const TYPE = new TypeDescriptor(
      WormholeMessage2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    WormholeMessage2.type = type;
  })(WormholeMessage = state6.WormholeMessage || (state6.WormholeMessage = {}));
  let WormholeMessageHandle;
  ((WormholeMessageHandle2) => {
    WormholeMessageHandle2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::WormholeMessageHandle";
    const TYPE = new TypeDescriptor(
      WormholeMessageHandle2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    WormholeMessageHandle2.type = type;
  })(WormholeMessageHandle = state6.WormholeMessageHandle || (state6.WormholeMessageHandle = {}));
  let WormholeState;
  ((WormholeState2) => {
    WormholeState2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::WormholeState";
    const TYPE = new TypeDescriptor(WormholeState2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    WormholeState2.type = type;
  })(WormholeState = state6.WormholeState || (state6.WormholeState = {}));
})(state || (state = {}));
var cursor;
((cursor3) => {
  let Cursor;
  ((Cursor2) => {
    Cursor2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor";
    const TYPE = new TypeDescriptor(Cursor2.TYPE_QNAME);
    function type(arg0 = ANY_TYPE) {
      return TYPE.apply(arg0);
    }
    Cursor2.type = type;
  })(Cursor = cursor3.Cursor || (cursor3.Cursor = {}));
})(cursor || (cursor = {}));
var emitter;
((emitter3) => {
  let EmitterCapability;
  ((EmitterCapability2) => {
    EmitterCapability2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::emitter::EmitterCapability";
    const TYPE = new TypeDescriptor(
      EmitterCapability2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    EmitterCapability2.type = type;
  })(EmitterCapability = emitter3.EmitterCapability || (emitter3.EmitterCapability = {}));
  let EmitterRegistry;
  ((EmitterRegistry2) => {
    EmitterRegistry2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::emitter::EmitterRegistry";
    const TYPE = new TypeDescriptor(
      EmitterRegistry2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    EmitterRegistry2.type = type;
  })(EmitterRegistry = emitter3.EmitterRegistry || (emitter3.EmitterRegistry = {}));
})(emitter || (emitter = {}));
var structs = class _structs extends import_aptos.AptosBaseProcessor {
  constructor(options) {
    super("structs", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625",
    network: import_aptos.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _structs({ ..._structs.DEFAULT_OPTIONS, ...options });
  }
  onEventGuardian(func, fetchConfig) {
    this.onMoveEvent(func, { type: "structs::Guardian" }, fetchConfig);
    return this;
  }
  onEventGuardianSet(func, fetchConfig) {
    this.onMoveEvent(func, { type: "structs::GuardianSet" }, fetchConfig);
    return this;
  }
  onEventSignature(func, fetchConfig) {
    this.onMoveEvent(func, { type: "structs::Signature" }, fetchConfig);
    return this;
  }
};
((structs2) => {
  let Guardian;
  ((Guardian2) => {
    Guardian2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::Guardian";
    const TYPE = new TypeDescriptor(Guardian2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Guardian2.type = type;
  })(Guardian = structs2.Guardian || (structs2.Guardian = {}));
  let GuardianSet;
  ((GuardianSet2) => {
    GuardianSet2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::GuardianSet";
    const TYPE = new TypeDescriptor(GuardianSet2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    GuardianSet2.type = type;
  })(GuardianSet = structs2.GuardianSet || (structs2.GuardianSet = {}));
  let Signature;
  ((Signature2) => {
    Signature2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::Signature";
    const TYPE = new TypeDescriptor(Signature2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Signature2.type = type;
  })(Signature = structs2.Signature || (structs2.Signature = {}));
})(structs || (structs = {}));
var wormhole = class _wormhole extends import_aptos.AptosBaseProcessor {
  constructor(options) {
    super("wormhole", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625",
    network: import_aptos.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _wormhole({ ..._wormhole.DEFAULT_OPTIONS, ...options });
  }
  onEntryInit(func, filter, fetchConfig) {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "wormhole::init"
      },
      fetchConfig
    );
    return this;
  }
};
var guardian_pubkey = class _guardian_pubkey extends import_aptos.AptosBaseProcessor {
  constructor(options) {
    super("guardian_pubkey", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625",
    network: import_aptos.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _guardian_pubkey({
      ..._guardian_pubkey.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventAddress(func, fetchConfig) {
    this.onMoveEvent(func, { type: "guardian_pubkey::Address" }, fetchConfig);
    return this;
  }
};
((guardian_pubkey2) => {
  let Address2;
  ((Address3) => {
    Address3.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::guardian_pubkey::Address";
    const TYPE = new TypeDescriptor(Address3.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Address3.type = type;
  })(Address2 = guardian_pubkey2.Address || (guardian_pubkey2.Address = {}));
})(guardian_pubkey || (guardian_pubkey = {}));
var contract_upgrade = class _contract_upgrade extends import_aptos.AptosBaseProcessor {
  constructor(options) {
    super("contract_upgrade", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625",
    network: import_aptos.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _contract_upgrade({
      ..._contract_upgrade.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEntryMigrate(func, filter, fetchConfig) {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "contract_upgrade::migrate"
      },
      fetchConfig
    );
    return this;
  }
  onEntrySubmitVaaEntry(func, filter, fetchConfig) {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "contract_upgrade::submit_vaa_entry"
      },
      fetchConfig
    );
    return this;
  }
  onEntryUpgrade(func, filter, fetchConfig) {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "contract_upgrade::upgrade"
      },
      fetchConfig
    );
    return this;
  }
};
((contract_upgrade5) => {
  let Hash3;
  ((Hash4) => {
    Hash4.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::contract_upgrade::Hash";
    const TYPE = new TypeDescriptor(Hash4.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Hash4.type = type;
  })(Hash3 = contract_upgrade5.Hash || (contract_upgrade5.Hash = {}));
  let Migrating;
  ((Migrating2) => {
    Migrating2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::contract_upgrade::Migrating";
    const TYPE = new TypeDescriptor(Migrating2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Migrating2.type = type;
  })(Migrating = contract_upgrade5.Migrating || (contract_upgrade5.Migrating = {}));
  let UpgradeAuthorized;
  ((UpgradeAuthorized2) => {
    UpgradeAuthorized2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::contract_upgrade::UpgradeAuthorized";
    const TYPE = new TypeDescriptor(
      UpgradeAuthorized2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    UpgradeAuthorized2.type = type;
  })(UpgradeAuthorized = contract_upgrade5.UpgradeAuthorized || (contract_upgrade5.UpgradeAuthorized = {}));
})(contract_upgrade || (contract_upgrade = {}));
var external_address = class _external_address extends import_aptos.AptosBaseProcessor {
  constructor(options) {
    super("external_address", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625",
    network: import_aptos.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _external_address({
      ..._external_address.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventExternalAddress(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "external_address::ExternalAddress" },
      fetchConfig
    );
    return this;
  }
};
((external_address3) => {
  let ExternalAddress;
  ((ExternalAddress2) => {
    ExternalAddress2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress";
    const TYPE = new TypeDescriptor(
      ExternalAddress2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    ExternalAddress2.type = type;
  })(ExternalAddress = external_address3.ExternalAddress || (external_address3.ExternalAddress = {}));
})(external_address || (external_address = {}));
var guardian_set_upgrade = class _guardian_set_upgrade extends import_aptos.AptosBaseProcessor {
  constructor(options) {
    super("guardian_set_upgrade", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625",
    network: import_aptos.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _guardian_set_upgrade({
      ..._guardian_set_upgrade.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEntrySubmitVaaEntry(func, filter, fetchConfig) {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "guardian_set_upgrade::submit_vaa_entry"
      },
      fetchConfig
    );
    return this;
  }
};
((guardian_set_upgrade2) => {
  let GuardianSetUpgrade;
  ((GuardianSetUpgrade2) => {
    GuardianSetUpgrade2.TYPE_QNAME = "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::guardian_set_upgrade::GuardianSetUpgrade";
    const TYPE = new TypeDescriptor(
      GuardianSetUpgrade2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GuardianSetUpgrade2.type = type;
  })(GuardianSetUpgrade = guardian_set_upgrade2.GuardianSetUpgrade || (guardian_set_upgrade2.GuardianSetUpgrade = {}));
})(guardian_set_upgrade || (guardian_set_upgrade = {}));
var MODULES = JSON.parse(
  '[{"bytecode":"0xa11ceb0b050000000c010004020412031627043d060543430786013c08c201400a8202100b9202020c94022c0dc002020ec202020000010100020401030100030700010804020301000100040001010300050203010300060104010301040701020300010508030203000106010902030403060406050602070b0001090009000002060b0001090009000101010b00010900010900020900080103070b0202090009010900090102060b0202090009010900010b02020900090103736574057461626c650353657404556e69740361646408636f6e7461696e73036e657705656c656d73055461626c650b64756d6d795f6669656c645bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e196250000000000000000000000000000000000000000000000000000000000000001000201070b020209000801010201090100050001000001070b0036000b010912013800020101000001050b0037000b0138010202010000010338023900020000000500","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"set","friends":[],"exposed_functions":[{"name":"add","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":["copy","drop"]}],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::set::Set<T0>","T0"],"return":[]},{"name":"contains","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":["copy","drop"]}],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::set::Set<T0>","T0"],"return":["bool"]},{"name":"new","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":["copy","drop"]}],"params":[],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::set::Set<T0>"]}],"structs":[{"name":"Set","is_native":false,"abilities":["store"],"generic_type_params":[{"constraints":["copy","drop"]}],"fields":[{"name":"elems","type":"0x1::table::Table<T0, 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::set::Unit>"}]},{"name":"Unit","is_native":false,"abilities":["copy","drop","store"],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]}]}},{"bytecode":"0xa11ceb0b050000000b010002020204030614051a11072b3708622006820114109601290abf01050cc401650da90202000000010f000002000100000302030000040304000005030200010608000001030108000202020303020203753136035531360e636865636b5f6f766572666c6f770866726f6d5f7536340873706c69745f753806746f5f753634066e756d6265725bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625030800000000000000000308ffff000000000000126170746f733a3a6d657461646174615f7630150100000000000000000a455f4f564552464c4f570000020106030000000001090b001000140701250308070027020101000003070b0012000c010e0111000b01020201000005120b0013000c010a0131083006000100000000000019330c020b0106000100000000000019330c030b020b03020301000001040e0010001402000000","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"u16","friends":[],"exposed_functions":[{"name":"from_u64","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u64"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16"]},{"name":"split_u8","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16"],"return":["u8","u8"]},{"name":"to_u64","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16"],"return":["u64"]}],"structs":[{"name":"U16","is_native":false,"abilities":["copy","drop","store","key"],"generic_type_params":[],"fields":[{"name":"number","type":"u64"}]}]}},{"bytecode":"0xa11ceb0b050000000b010002020204030614051a15072f3708662006860114109a01290ac301050cc8018d010dd50202000000010f00000200010000030203000004030400000503020001060800000103010800040202020205030202020203753332035533320e636865636b5f6f766572666c6f770866726f6d5f7536340873706c69745f753806746f5f753634066e756d6265725bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625030800000000000000000308ffffffff00000000126170746f733a3a6d657461646174615f7630150100000000000000000a455f4f564552464c4f570000020106030000000001090b001000140701250308070027020101000003070b0012000c010e0111000b01020201000005220b0013000c010a0131183006000100000000000019330c020a0131103006000100000000000019330c030a0131083006000100000000000019330c040b0106000100000000000019330c050b020b030b040b05020301000001040e0010001402000000","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"u32","friends":[],"exposed_functions":[{"name":"from_u64","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u64"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"]},{"name":"split_u8","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"],"return":["u8","u8","u8","u8"]},{"name":"to_u64","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"],"return":["u64"]}],"structs":[{"name":"U32","is_native":false,"abilities":["copy","drop","store","key"],"generic_type_params":[],"fields":[{"name":"number","type":"u64"}]}]}},{"bytecode":"0xa11ceb0b050000000d01001602162a0340b60104f6010405fa01a401079e03fb0608990a4006d90a5a10b30bb3020ae60d200c860e96050d9c13120fae130400020103000400050006000700080009000a000b000c000d00000411070009130f000a150f00081f0f0008230f00022f0001000001300700053c0f00083d0f00000e000100000f0203000010000400001200050000140006000016000700001700030000180003000019000800001a000700001b030200001c030200001d080800001e0001000020090100072c010700072d010600072e01050002310b0c010003320d040003330d070003340f030001350310000836110e0002370c0b0100060803030003380d060004050d050003390d0800073a071300073b030100073e151600083f151700084019110005411a1b0008421c1b00120418040106080000010800010a020102010801010802010803010302060800060804130a02020b0601020b060102080108020208030a0208030a0202030a0208070a080502080302010a0900010b0601090001070b06010201080502070b06010203010807030807020202080408000108040d0108080808060809020a0809030a02020208070303010608040101010a080901080901060805030a02020608070108080106080910636f6e74726163745f7570677261646514677561726469616e5f7365745f757067726164650376616109736563703235366b3106637572736f720b646573657269616c697a651065787465726e616c5f616464726573730f677561726469616e5f7075626b6579096b656363616b3235360573746174650773747275637473037531360375333203564141116173736572745f676f7665726e616e63650764657374726f79156765745f636f6e73697374656e63795f6c6576656c0f45787465726e616c41646472657373136765745f656d69747465725f6164647265737303553136116765745f656d69747465725f636861696e03553332166765745f677561726469616e5f7365745f696e646578086765745f686173680b6765745f7061796c6f61640c6765745f73657175656e63650d6765745f74696d657374616d700570617273651070617273655f616e645f7665726966790671756f72756d0e7265706c61795f70726f746563740b477561726469616e5365740676657269667912677561726469616e5f7365745f696e6465780a7369676e617475726573095369676e61747572650974696d657374616d70056e6f6e63650d656d69747465725f636861696e0f656d69747465725f616464726573730873657175656e636511636f6e73697374656e63795f6c6576656c0468617368077061796c6f61641e6765745f63757272656e745f677561726469616e5f7365745f696e646578146765745f676f7665726e616e63655f636861696e176765745f676f7665726e616e63655f636f6e747261637406437572736f720e45434453415369676e617475726504696e69740e646573657269616c697a655f75380f646573657269616c697a655f75333212646573657269616c697a655f766563746f721a65636473615f7369676e61747572655f66726f6d5f6279746573106372656174655f7369676e617475726504726573740f646573657269616c697a655f7531360f646573657269616c697a655f753634106765745f677561726469616e5f7365741e7365745f676f7665726e616e63655f616374696f6e5f636f6e73756d6564074164647265737308477561726469616e16677561726469616e5f7365745f69735f6163746976650d6765745f677561726469616e7310756e7061636b5f7369676e61747572650e66726f6d5f7369676e61747572650b6765745f616464726573735bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e196250000000000000000000000000000000000000000000000000000000000000001030803000000000000000308040000000000000003080500000000000000030802000000000000000308070000000000000003080000000000000000030808000000000000000308010000000000000003080600000000000000126170746f733a3a6d657461646174615f76309e020900000000000000000b455f4e4f5f51554f52554d00010000000000000015455f544f4f5f4d414e595f5349474e41545552455300020000000000000013455f494e56414c49445f5349474e415455524500030000000000000016455f475541524449414e5f5345545f455850495245440004000000000000001a455f494e56414c49445f474f5645524e414e43455f434841494e0005000000000000001c455f494e56414c49445f474f5645524e414e43455f454d49545445520006000000000000000f455f57524f4e475f56455253494f4e00070000000000000018455f4e4f4e5f494e4352454153494e475f5349474e4552530008000000000000001d455f4f4c445f475541524449414e5f5345545f474f5645524e414e43450000020a210803220a0805240803250803260802270801280329022a0a022b0a0200010000071f110f0c010a001000140b0121030c0b00010706270a0010011411102103160b00010701270b00100214111121031e0702270201010000030e0b0013000c010101010101010101010b01020201000001040b00100314020301000001040b00100214020401000001040b00100114020501000001040b00100014020601000001040b00100414020701000001040b00100514020801000001040b00100614020901000001040b00100714020a0000000a5c0b0038000c030d0311130c130b13310121030c0708270d0311140c080d0311130c11400e00000000000000000c100a11310024031905310d0311130c070d0306400000000000000011150c0e0d0311130c0c0b0e11160c0f0d100b0f0b0c0b071117440e0b113101170c1105140b0338010c010a01111911190c090b0138000c040d0411140c120d0411140c0a0d04111a0c060d04111b0c050d04111c0c0d0d0411130c020b0438010c0b0b080b100b120b0a0b060b050b0d0b020b090b0b1200020b010000120d0b00110a0c020e02100014111d0c010e020e01110e0b02020c01000001080b00060200000000000000180603000000000000001a06010000000000000016020d03000001050b00100414111e020e00000014620a01111f03090b00010b01010700270b0111200c070a001004140c090a001008410e0c0e0e0741180c080a0e0b08110c2603200b00010705270600000000000000000c0d31000c0a0a0d0a0e230329055f0a0010080a0d420e11210c060c0b0c0c0a0d0600000000000000002103360539080c02053d0a060b0a240c020b0203430b00010704270a060c0a0a090b0b0e0c11220c030e070b063442180c050b0511230c040b030b0421035a0b00010703270b0d060100000000000000160c0d05240b0001020000000400050007000800090006000200010000000100","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"vaa","friends":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::contract_upgrade","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::guardian_set_upgrade"],"exposed_functions":[{"name":"assert_governance","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::vaa::VAA"],"return":[]},{"name":"destroy","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::vaa::VAA"],"return":["vector<u8>"]},{"name":"get_consistency_level","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::vaa::VAA"],"return":["u8"]},{"name":"get_emitter_address","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::vaa::VAA"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress"]},{"name":"get_emitter_chain","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::vaa::VAA"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16"]},{"name":"get_guardian_set_index","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::vaa::VAA"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"]},{"name":"get_hash","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::vaa::VAA"],"return":["vector<u8>"]},{"name":"get_payload","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::vaa::VAA"],"return":["vector<u8>"]},{"name":"get_sequence","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::vaa::VAA"],"return":["u64"]},{"name":"get_timestamp","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::vaa::VAA"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"]},{"name":"parse_and_verify","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::vaa::VAA"]},{"name":"quorum","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u64"],"return":["u64"]},{"name":"replay_protect","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::vaa::VAA"],"return":[]}],"structs":[{"name":"VAA","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"guardian_set_index","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"},{"name":"signatures","type":"vector<0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::Signature>"},{"name":"timestamp","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"},{"name":"nonce","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"},{"name":"emitter_chain","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16"},{"name":"emitter_address","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress"},{"name":"sequence","type":"u64"},{"name":"consistency_level","type":"u8"},{"name":"hash","type":"vector<u8>"},{"name":"payload","type":"vector<u8>"}]}]}},{"bytecode":"0xa11ceb0b050000000b010002020208030a64056e9601078402bc0108c0032006e0035f10bf04dd040a9c091e0cba09ef140da91e18000000010700000207000003000100000401020000050103000006040500000700010000080607000009020100000a030100000b080300000c090300000d000100000e0a0b00000f0a0b0000100c0d0000110e0d0000120f010000130f01000014020a00001500010000160d0100020801080101080101040103020608010608010102010800020801010206080103020608000302030302030103070801030300030708000303020801020b0303030301010103030308010101020101030303030501010108010104030303030803030303030303031701030303030303030303030303030303010101030108010800060301040404040303010307030303030308010304753235360544553235360455323536036164640761735f753132380661735f75363407636f6d70617265036469760d64753235365f746f5f753235360966726f6d5f753132380866726f6d5f75363403676574056765745f64036d756c0f6f766572666c6f77696e675f6164640f6f766572666c6f77696e675f73756203707574057075745f640373686c037368720a73706c69745f7531323803737562047a65726f0276300276310276320276330276340276350276360276375bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e1962503080000000000000000030803000000000000000308020000000000000002010003080400000000000000030801000000000000000201020201010410ffffffffffffffffffffffffffffffff0410ffffffffffffffff0000000000000000126170746f733a3a6d657461646174615f7630c8040500000000000000000e45434153545f4f564552464c4f57395768656e2063616e277420636173742060553235366020746f206075313238602028652e672e206e756d62657220746f6f206c61726765292e01000000000000000f45574f5244535f4f564552464c4f573f5768656e20747279696e6720746f20676574206f722070757420776f726420696e746f2055323536206275742069742773206f7574206f6620696e6465782e020000000000000009454f564552464c4f57145768656e206d617468206f766572666c6f77732e03000000000000000c454449565f42595f5a45524f215768656e20617474656d7074656420746f20646976696465206279207a65726f2e04000000000000000c45554e535550504f52544544a902544f444f3a2072656d6f76656420736f6d652066756e6374696f6e616c6974792074686174207468652070726f7665722077617320627265616b696e67206f6e2e0a20496e206f7264657220746f206b656570207468652066756e6374696f6e73206261636b776172647320636f6d70617469626c652c207765206b656570207468650a207369676e617475726573206275742072657665727420696d6d6564696174656c792e0a20412062657474657220736f6c7574696f6e20776f756c64206265206669677572696e67206f757420612077617920746f20736b697020636865636b696e67207468656d0a20696e207468652070726f7665722c20616e64206a75737420726573746f726520746865206f726967696e616c2066756e6374696f6e616c6974792e0002081703180319031a031b031c031d031e030102041703180319031a0300010000105411130c0c0600000000000000000c040600000000000000000c050a05070423030b054c0e000a0511080c020e010a0511080c030a0406000000000000000022031805370b020b03110b0c070c0a0b0a0b04110b0c080c0b0d0c0a050b0b110d0600000000000000000c040b07032b052f0b04060100000000000000160c040b08033205360b04060100000000000000160c0405470b020b03110b0c060c090d0c0a050b09110d0600000000000000000c040b06034505470601000000000000000c040b05060100000000000000160c0505060b040600000000000000002103520702270b0c020101000011200e00100014060000000000000000210307050e0e00100114060000000000000000210c010510090c010b0103140700270e001002143531402f0e001003143516020201000012240e00100214060000000000000000210307050e0e00100014060000000000000000210c010510090c010b010313051a0e00100114060000000000000000210c02051c090c020b0203200700270e001003140203010000132c07040c040a0406000000000000000024030705260b04060100000000000000170c040a000a0411080c020a010a0411080c030a020a0322031805250b01010b00010b020b03230321052307070207060205020b01010b0001070302040100000d020704270500000014400e001004140e001005140e001006140e0010071412010c04090c050e00100814060000000000000000220317051a080c0105200e00100914060000000000000000220c010b0103230526080c02052c0e00100a14060000000000000000220c020b02032f0532080c0305380e00100b14060000000000000000220c030b03033b053d080c050b040b0502060100000a0a0b0011110c010c020b010b02060000000000000000060000000000000000120102070100000d040b00351106020801000015320a01060000000000000000210305050a0b001003140c0505300a0106010000000000000021030f05140b001002140c04052e0a01060200000000000000210319051e0b001000140c03052c0b010603000000000000002103260b00010705270b001001140c020b020c030b030c040b040c050b05020900000016620a01060000000000000000210305050a0b001004140c0905600a0106010000000000000021030f05140b001005140c08055e0a01060200000000000000210319051e0b001006140c07055c0a0106030000000000000021032305280b001007140c06055a0a0106040000000000000021032d05320b001008140c0505580a01060500000000000000210337053c0b001009140c0405560a0106060000000000000021034105460b00100a140c0305540b0106070000000000000021034e0b00010705270b00100b140c020b020c030b030c040b040c050b050c060b060c070b070c080b080c090b09020a01000017930106000000000000000006000000000000000006000000000000000006000000000000000006000000000000000006000000000000000006000000000000000006000000000000000012000c180600000000000000000c0e0a0e07042303110588010600000000000000000c070e010a0e11080c060600000000000000000c0f0a0f070423031e0583010e000a0f11080c050a05060000000000000000220327052a080c02052e0a07060000000000000000220c020b020331057e0b05350a06351811110c100c0a0e180a0e0a0f1611090c090b100b09110b0c120c110d180a0e0a0f160b11110e0b12034d05500601000000000000000c0305520600000000000000000c030b030c150e180a0e0a0f160601000000000000001611090c080b0a0b15160c0b0b0b0b07110b0c130c0c0b0c0b08110b0c140c0d0d180a0e0a0f16060100000000000000160b0d110e0b130b141e0377057a0601000000000000000c04057c0600000000000000000c040b040c070b0f060100000000000000160c0f05190b0e060100000000000000160c0e050c0b1811050c160c170b16200391010702270b17020b00000018250b00350c040b01350c050a040a05160c070a07070924030f051b0b070709173201000000000000000000000000000000170c060b0634080c030c0205220b040b051634090c030c020b020b03020c000000191c0a000a0123030505130b010b00170c040709340b041706010000000000000016080c030c0205190b000b0117090c030c020b020b03020d0000000d2b0a01060000000000000000210305050a0b020b000f0315052a0a0106010000000000000021030f05140b020b000f0215052a0a01060200000000000000210319051e0b020b000f0015052a0b010603000000000000002103260b00010705270b020b000f0115020e0000000d530a01060000000000000000210305050a0b020b000f041505520a0106010000000000000021030f05140b020b000f051505520a01060200000000000000210319051e0b020b000f061505520a0106030000000000000021032305280b020b000f071505520a0106040000000000000021032d05320b020b000f081505520a01060500000000000000210337053c0b020b000f091505520a0106060000000000000021034105460b020b000f0a1505520b0106070000000000000021034e0b00010705270b020b000f0b15020f0100001a4f11130c070a01340640000000000000001a0c080b0134064000000000000000190c020a080c030a03070423031305250e000a030a081711080a02332f0c050d070a030b05110d0b03060100000000000000160c03050e0a0206000000000000000024032a054d0a08060100000000000000160c040a040704230333054d0e070a0411080e000a04060100000000000000170a0817110831400a02331730160c060d070a040b06110d0b04060100000000000000160c04052e0b0702100100001a5311130c070a01340640000000000000001a0c080b0134064000000000000000190c020a080c030a03070423031305250e000a0311080a0233300c050d070a030a08170b05110d0b03060100000000000000160c03050e0a0206000000000000000024032a05510a08060100000000000000160c040a04070423033305510e070a040a08170601000000000000001711080e000a04110831400a0233172f160c060d070a040a0817060100000000000000170b06110d0b04060100000000000000160c04052e0b0702110000000a0d0a00314030340c010b00320000000000000000010000000000000019340c020b010b020212010000105411130c0c0600000000000000000c040600000000000000000c050a05070423030b054c0e000a0511080c020e010a0511080c030a0406000000000000000022031805370b020b03110c0c070c0a0b0a0b04110c0c080c0b0d0c0a050b0b110d0600000000000000000c040b07032b052f0b04060100000000000000160c040b08033205360b04060100000000000000160c0405470b020b03110c0c060c090d0c0a050b09110d0600000000000000000c040b06034505470601000000000000000c040b05060100000000000000160c0505060b040600000000000000002103520702270b0c02130100000d0606000000000000000006000000000000000006000000000000000006000000000000000012010201020103010101000000000100020003000400050006000700","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"u256","friends":[],"exposed_functions":[{"name":"add","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"]},{"name":"as_u128","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"],"return":["u128"]},{"name":"as_u64","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"],"return":["u64"]},{"name":"compare","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256","&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"],"return":["u8"]},{"name":"div","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"]},{"name":"from_u128","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u128"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"]},{"name":"from_u64","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u64"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"]},{"name":"get","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256","u64"],"return":["u64"]},{"name":"mul","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"]},{"name":"shl","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256","u8"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"]},{"name":"shr","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256","u8"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"]},{"name":"sub","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"]},{"name":"zero","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"]}],"structs":[{"name":"DU256","is_native":false,"abilities":["copy","drop","store"],"generic_type_params":[],"fields":[{"name":"v0","type":"u64"},{"name":"v1","type":"u64"},{"name":"v2","type":"u64"},{"name":"v3","type":"u64"},{"name":"v4","type":"u64"},{"name":"v5","type":"u64"},{"name":"v6","type":"u64"},{"name":"v7","type":"u64"}]},{"name":"U256","is_native":false,"abilities":["copy","drop","store"],"generic_type_params":[],"fields":[{"name":"v0","type":"u64"},{"name":"v1","type":"u64"},{"name":"v2","type":"u64"},{"name":"v3","type":"u64"}]}]}},{"bytecode":"0xa11ceb0b050000000c010016021644035ad40104ae021205c002e50107a504ee0908930e4006d30e220af50e520cc70fa0040de713160ffd1308000401050106010701080009000a000b000c000d000e000f060000100c000011060000120c00001308000214040106010a170f0009190f00081b0f00061f07000125060005270400033d04020301000107410401030105450400001500010000160203000018040500001a050600001c050700001d050400001e05060000200508000021040700002205090000230a0b0000240c050000260d05000028050e0000290f0500002a060500002b100500002c060500002d080500002e090500002f070500003004050000310511000a460409000347141502030008181605000348181902030008490a0400044a050900084b0a0400014c0c1e0106034d05200203040a4e090400074d05210103054f0522000528230e000250250501060751270501030351290502030001522a110018131a131e1d1e1f1f132110241d25102613010b05010800010801010b0501080201080301080600010807010808010809010301060808010101060c07060c080708070809080603080a01080b040303030a02010a02010c0308060708080708040203080802070b0c0209000901090001070901020708080806020306080402060b0c02090009010900010609010106080403070b0c020308080307080404010806080603010802010b05010900010800010b0c0209000901010b0d01090001080e0107080e020708030302070b0501090009000107080402070b0d0109000900020307080403070b0c0209000901090009010106080a10636f6e74726163745f7570677261646514677561726469616e5f7365745f757067726164650376616108776f726d686f6c65057374617465076163636f756e74056576656e74057461626c650974696d657374616d7007656d69747465721065787465726e616c5f61646472657373037365740773747275637473037531360375333212477561726469616e5365744368616e67656418477561726469616e5365744368616e67656448616e646c650f576f726d686f6c654d65737361676515576f726d686f6c654d65737361676548616e646c650d576f726d686f6c6553746174650b4576656e7448616e646c65226372656174655f677561726469616e5f7365745f6368616e6765645f68616e646c651e6372656174655f776f726d686f6c655f6d6573736167655f68616e646c6503553332136578706972655f677561726469616e5f736574035531360c6765745f636861696e5f69640b477561726469616e536574186765745f63757272656e745f677561726469616e5f7365741e6765745f63757272656e745f677561726469616e5f7365745f696e646578146765745f676f7665726e616e63655f636861696e0f45787465726e616c41646472657373176765745f676f7665726e616e63655f636f6e7472616374106765745f677561726469616e5f7365740f6765745f6d6573736167655f66656516677561726469616e5f7365745f69735f61637469766514696e69745f6d6573736167655f68616e646c6573105369676e65724361706162696c69747913696e69745f776f726d686f6c655f737461746511456d69747465724361706162696c6974790b6e65775f656d69747465720d7075626c6973685f6576656e740c7365745f636861696e5f69641e7365745f676f7665726e616e63655f616374696f6e5f636f6e73756d6564177365745f676f7665726e616e63655f636861696e5f6964177365745f676f7665726e616e63655f636f6e74726163740f7365745f6d6573736167655f6665651273746f72655f677561726469616e5f736574197570646174655f677561726469616e5f7365745f696e6465780f776f726d686f6c655f7369676e6572106f6c64477561726469616e496e646578106e6577477561726469616e496e6465780673656e6465720873657175656e6365056e6f6e6365077061796c6f616411636f6e73697374656e63795f6c6576656c08636861696e5f696413676f7665726e616e63655f636861696e5f696413676f7665726e616e63655f636f6e74726163740d677561726469616e5f73657473055461626c6512677561726469616e5f7365745f696e64657813677561726469616e5f7365745f6578706972791b636f6e73756d65645f676f7665726e616e63655f616374696f6e73035365740b6d6573736167655f6665650a7369676e65725f63617010656d69747465725f72656769737472790f456d6974746572526567697374727906746f5f7536340a626f72726f775f6d757406626f72726f77166765745f677561726469616e5f7365745f696e6465780b6e6f775f7365636f6e6473176765745f677561726469616e5f7365745f657870697279106e65775f6576656e745f68616e646c65036e65770866726f6d5f75363415696e69745f656d69747465725f72656769737472790a656d69745f6576656e74036164641d6372656174655f7369676e65725f776974685f6361706162696c6974795bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625000000000000000000000000000000000000000000000000000000000000000105205bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625000202320806330806010201060b05010800020206340335033603370a0238020803030201060b0501080204020a3908073a08073b08093c0b0c020308083e08063f0806400b0d010a02420343080a44080e0001000005030b001201020101000005030b001203020203000104121107002a040c030a030f000b00111738000c020b031001140c010b020b011119020301000104050507002b04100214020401000104170e07002b040c010a0110031411170c000b0110000b003801140205010001041a0707002b040c000b00100314020601000104050507002b04100414020701000104050507002b041005140208010001041b0f07002a040c030b030f000b0011170c020c010b012e0b02380114020901000104050507002b04100614020a010001041c190a00111b0c0311050c02111c0c040b030b0221030c05110b0001080c0105170b00111d11170b04240c010b01020b030000050b0a000a00380211012d030a000b00380311002d01020c030000050f0b000b010b020b03380406000000000000000011200b0438050b050b06112212042d04020d03000104230707002a040f070c000b001123020e03040103241007002a030c04111c0c050b040f080b000b010b020b0331000b0512023806020f0300010405060b0007002a040f0215021003000104260807002a040c010b010f090b00380702110300010405060b0007002a040f041502120300010405060b0007002a040f051502130300010405060b0007002a040f0615021403000104280d07002a040c020e00111b11170c010b020f000b010b003808021503000104260807002a040c010b000b010f0315021603000104050507002b04100a11270204030405040004040401040204070409030004060408000000010002000300","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"state","friends":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::contract_upgrade","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::guardian_set_upgrade","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::vaa","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::wormhole"],"exposed_functions":[{"name":"create_guardian_set_changed_handle","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x1::event::EventHandle<0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::GuardianSetChanged>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::GuardianSetChangedHandle"]},{"name":"create_wormhole_message_handle","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x1::event::EventHandle<0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::WormholeMessage>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::WormholeMessageHandle"]},{"name":"expire_guardian_set","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"],"return":[]},{"name":"get_chain_id","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16"]},{"name":"get_current_guardian_set","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::GuardianSet"]},{"name":"get_current_guardian_set_index","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"]},{"name":"get_governance_chain","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16"]},{"name":"get_governance_contract","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress"]},{"name":"get_guardian_set","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::GuardianSet"]},{"name":"get_message_fee","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"guardian_set_is_active","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::GuardianSet"],"return":["bool"]},{"name":"init_message_handles","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["&signer"],"return":[]},{"name":"init_wormhole_state","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["&signer","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32","u64","0x1::account::SignerCapability"],"return":[]},{"name":"new_emitter","visibility":"friend","is_entry":false,"generic_type_params":[],"params":[],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::emitter::EmitterCapability"]},{"name":"publish_event","visibility":"friend","is_entry":true,"generic_type_params":[],"params":["u64","u64","u64","vector<u8>"],"return":[]},{"name":"set_chain_id","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16"],"return":[]},{"name":"set_governance_action_consumed","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":[]},{"name":"set_governance_chain_id","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16"],"return":[]},{"name":"set_governance_contract","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress"],"return":[]},{"name":"set_message_fee","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["u64"],"return":[]},{"name":"store_guardian_set","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::GuardianSet"],"return":[]},{"name":"update_guardian_set_index","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"],"return":[]},{"name":"wormhole_signer","visibility":"friend","is_entry":false,"generic_type_params":[],"params":[],"return":["signer"]}],"structs":[{"name":"GuardianSetChanged","is_native":false,"abilities":["drop","store"],"generic_type_params":[],"fields":[{"name":"oldGuardianIndex","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"},{"name":"newGuardianIndex","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"}]},{"name":"GuardianSetChangedHandle","is_native":false,"abilities":["store","key"],"generic_type_params":[],"fields":[{"name":"event","type":"0x1::event::EventHandle<0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::GuardianSetChanged>"}]},{"name":"WormholeMessage","is_native":false,"abilities":["drop","store"],"generic_type_params":[],"fields":[{"name":"sender","type":"u64"},{"name":"sequence","type":"u64"},{"name":"nonce","type":"u64"},{"name":"payload","type":"vector<u8>"},{"name":"consistency_level","type":"u8"},{"name":"timestamp","type":"u64"}]},{"name":"WormholeMessageHandle","is_native":false,"abilities":["store","key"],"generic_type_params":[],"fields":[{"name":"event","type":"0x1::event::EventHandle<0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state::WormholeMessage>"}]},{"name":"WormholeState","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"chain_id","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16"},{"name":"governance_chain_id","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16"},{"name":"governance_contract","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress"},{"name":"guardian_sets","type":"0x1::table::Table<u64, 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::GuardianSet>"},{"name":"guardian_set_index","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"},{"name":"guardian_set_expiry","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"},{"name":"consumed_governance_actions","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::set::Set<vector<u8>>"},{"name":"message_fee","type":"u64"},{"name":"signer_cap","type":"0x1::account::SignerCapability"},{"name":"emitter_registry","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::emitter::EmitterRegistry"}]}]}},{"bytecode":"0xa11ceb0b050000000c010004020406030a1e042802052a1a07443f088301400ac301070bca01020ccc01480d9402020e960202000001010002000100000003000101000004020001000005030401000006000201000108050101000404010b0001090000010a090001070b0001090001090001070a090006637572736f7206766563746f7206437572736f720d64657374726f795f656d70747904696e697404706f6b650472657374046461746107726576657273655bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e196250000000000000000000000000000000000000000000000000000000000000001000201070a090000040001000002060b003a000c010b0146040000000000000000020101000001050d0038000b003900020201000001040b0036004504020301000002070b003a000c010d0138000b01020000000400","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"cursor","friends":[],"exposed_functions":[{"name":"destroy_empty","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]}],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<T0>"],"return":[]},{"name":"init","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]}],"params":["vector<T0>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<T0>"]},{"name":"poke","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]}],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<T0>"],"return":["T0"]},{"name":"rest","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":[]}],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<T0>"],"return":["vector<T0>"]}],"structs":[{"name":"Cursor","is_native":false,"abilities":[],"generic_type_params":[{"constraints":[]}],"fields":[{"name":"data","type":"vector<T0>"}]}]}},{"bytecode":"0xa11ceb0b050000000c01000602060c031228053a20075af20108cc022006ec020e10fa02380ab2030c0cbe0390010dce04060fd4040400020003000400050400000604000109070000070001000008020300000a020400000b010500000c060000000d07030002100901000111080400010800000106080001030108020108010107080101070800010a0202070a020305737461746508776f726d686f6c6507656d69747465721065787465726e616c5f616464726573730973657269616c697a6511456d69747465724361706162696c6974790f456d697474657252656769737472791364657374726f795f656d69747465725f6361700b6765745f656d69747465720f45787465726e616c41646472657373146765745f65787465726e616c5f6164647265737315696e69745f656d69747465725f72656769737472790b6e65775f656d69747465720c7573655f73657175656e63650873657175656e6365076e6578745f69640d73657269616c697a655f7536340a66726f6d5f62797465735bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625030800000000000000000a020100126170746f733a3a6d657461646174615f76302401000000000000000019455f494e56414c49445f454d49545445525f555047524144450000020202030e030102010f030001000001050b0013000101020101000001040b001000140202010000080a07010c010d010b0010001411060b0111070203030000010306010000000000000012010204030000030e0a001001140c010a01060100000000000000160b000f01150b0106000000000000000012000205030000030c0a001002140c010a01060100000000000000160b000f02150b01020000010000010000000100","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"emitter","friends":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::wormhole"],"exposed_functions":[{"name":"destroy_emitter_cap","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::emitter::EmitterCapability"],"return":[]},{"name":"get_emitter","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::emitter::EmitterCapability"],"return":["u64"]},{"name":"get_external_address","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::emitter::EmitterCapability"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress"]},{"name":"init_emitter_registry","visibility":"friend","is_entry":false,"generic_type_params":[],"params":[],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::emitter::EmitterRegistry"]},{"name":"new_emitter","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::emitter::EmitterRegistry"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::emitter::EmitterCapability"]},{"name":"use_sequence","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::emitter::EmitterCapability"],"return":["u64"]}],"structs":[{"name":"EmitterCapability","is_native":false,"abilities":["store"],"generic_type_params":[],"fields":[{"name":"emitter","type":"u64"},{"name":"sequence","type":"u64"}]},{"name":"EmitterRegistry","is_native":false,"abilities":["store"],"generic_type_params":[],"fields":[{"name":"next_id","type":"u64"}]}]}},{"bytecode":"0xa11ceb0b050000000a01000a020a180322410563360799018103089a04400ada041d0cf7048f010d86060e0f9406020001010201030004000500060f0000070f0000080f00040a0f00010c0700030f0f000009000100000b020300000d040500000e060700001008090000110a0b0000120a0b0000130a0c0000140d0400031c000900041d0e0b00021e070e00041f0b0e00010a020108000208030a08000108010308040202010802020708010803000106080001080501060801010803010a0800010608020103057374617465077374727563747309736563703235366b310974696d657374616d700f677561726469616e5f7075626b65790375333208477561726469616e0b477561726469616e536574095369676e61747572650f6372656174655f677561726469616e03553332136372656174655f677561726469616e5f7365740e45434453415369676e6174757265106372656174655f7369676e6174757265136578706972655f677561726469616e5f73657407416464726573730b6765745f61646472657373176765745f677561726469616e5f7365745f657870697279166765745f677561726469616e5f7365745f696e6465780d6765745f677561726469616e7310756e7061636b5f7369676e6174757265076164647265737305696e64657809677561726469616e730f65787069726174696f6e5f74696d65037369670b7265636f766572795f69640e677561726469616e5f696e6465780a66726f6d5f62797465730866726f6d5f7536340b6e6f775f7365636f6e647306746f5f7536345bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e196250000000000000000000000000000000000000000000000000000000000000001000201150805010203160803170a08001808030202031908041a021b020001000007040b0011091200020101000007060b000b01060000000000000000110a1201020201000007050b000b010b02120202030300000709110b0b01110c16110a0b000f0015020401000007040b00100114020501000007040b00100014020601000007040b00100214020701000007040b001003140208010000070a0a001004140a001005140b00100614020102000001000101020002010202000000","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"structs","friends":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::state"],"exposed_functions":[{"name":"create_guardian","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::Guardian"]},{"name":"create_guardian_set","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32","vector<0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::Guardian>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::GuardianSet"]},{"name":"create_signature","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x1::secp256k1::ECDSASignature","u8","u8"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::Signature"]},{"name":"expire_guardian_set","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::GuardianSet","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"],"return":[]},{"name":"get_address","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::Guardian"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::guardian_pubkey::Address"]},{"name":"get_guardian_set_expiry","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::GuardianSet"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"]},{"name":"get_guardian_set_index","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::GuardianSet"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"]},{"name":"get_guardians","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::GuardianSet"],"return":["vector<0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::Guardian>"]},{"name":"unpack_signature","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::Signature"],"return":["0x1::secp256k1::ECDSASignature","u8","u8"]}],"structs":[{"name":"Guardian","is_native":false,"abilities":["copy","drop","store","key"],"generic_type_params":[],"fields":[{"name":"address","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::guardian_pubkey::Address"}]},{"name":"GuardianSet","is_native":false,"abilities":["copy","drop","store","key"],"generic_type_params":[],"fields":[{"name":"index","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"},{"name":"guardians","type":"vector<0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::Guardian>"},{"name":"expiration_time","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"}]},{"name":"Signature","is_native":false,"abilities":["copy","drop","store","key"],"generic_type_params":[],"fields":[{"name":"sig","type":"0x1::secp256k1::ECDSASignature"},{"name":"recovery_id","type":"u8"},{"name":"guardian_index","type":"u8"}]}]}},{"bytecode":"0xa11ceb0b050000000a01001a021a260340880104c8010c05d401960107ea02b004089a076006fa072c10a608310cd708d9010000010101020103010401050206000700080009000a000b000c010e06000a0f0f000c100f0007120400031304010001021408000b1d0f00081e07000a220f00000d000100001102010000150304000016010500061707080005180b01010005190c0d01000a1a0a09000c1b040e00011c100f000b1b041100081f0a1200092013010009211401000a23151600092416010004251417000326170d0100032714010100092801040003291a040100032a1b010100072b1c0400072c1d0400092d1e0100092e010500050a060a111812181418151805060c03030a020a0a020007080003030a020a080108020304070803030a020b040108050103010803030a080103080002060c05010800010801010a0201070a090001060a09000101010802010c0106080001080601080707060c080608060807080203080001060c0208020a0801010808010501080502030301060b0401090002050b040109000107080301060803040303030a0208776f726d686f6c65076163636f756e740a6170746f735f636f696e04636f696e067369676e657206766563746f72086465706c6f79657207656d69747465721065787465726e616c5f616464726573730573746174650773747275637473037531360375333204696e6974105369676e65724361706162696c69747908477561726469616e035533320d696e69745f696e7465726e616c11456d69747465724361706162696c69747904436f696e094170746f73436f696e0f7075626c6973685f6d6573736167651072656769737465725f656d697474657217636c61696d5f7369676e65725f6361706162696c69747907726576657273650869735f656d7074790f6372656174655f677561726469616e0866726f6d5f7536341d6372656174655f7369676e65725f776974685f6361706162696c697479035531360f45787465726e616c416464726573730a66726f6d5f627974657313696e69745f776f726d686f6c655f737461746514696e69745f6d6573736167655f68616e646c65730b477561726469616e536574136372656174655f677561726469616e5f7365741273746f72655f677561726469616e5f7365740a616464726573735f6f661569735f6163636f756e745f726567697374657265640872656769737465720f6765745f6d6573736167655f6665650576616c7565076465706f7369740c7573655f73657175656e63650b6765745f656d69747465720d7075626c6973685f6576656e740b6e65775f656d69747465725bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e1962500000000000000000000000000000000000000000000000000000000000000010108bc32f7de18a5f6e1e7d6ee7aff9f5fc858d0d87ac0da94dd8d2a5d267d6b0308000000000000000005205bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625126170746f733a3a6d657461646174615f76301d01000000000000000012455f494e53554646494349454e545f4645450000010400061d0b00070111040c07400900000000000000000c050d0438000e04380120030d05130d050d04450a1107440905080b070b010b020b030b050680510100000000001108060000000000000000110102010000000f1e0e0011090c070e070b01110a0b02110a0b03110b0b050b060b00110c0e07110d06000000000000000011080b04110e110f0e071110380220031b051d0e0738030202010000191a11130c040b040e03380425030b0b000107002707010b0338050a0011160c050b002e11170a050b010b0211180b050203010000010211190200","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"wormhole","friends":[],"exposed_functions":[{"name":"init","visibility":"public","is_entry":true,"generic_type_params":[],"params":["&signer","u64","u64","vector<u8>","vector<vector<u8>>"],"return":[]},{"name":"publish_message","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::emitter::EmitterCapability","u64","vector<u8>","0x1::coin::Coin<0x1::aptos_coin::AptosCoin>"],"return":["u64"]},{"name":"register_emitter","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::emitter::EmitterCapability"]}],"structs":[]}},{"bytecode":"0xa11ceb0b050000000601000403040a050e040712150827400c670b0000010100000000000100000000010a0200096b656363616b3235360a6170746f735f686173685bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e1962500000000000000000000000000000000000000000000000000000000000000010001000001030b0011010200","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"keccak256","friends":[],"exposed_functions":[{"name":"keccak256","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":["vector<u8>"]}],"structs":[]}},{"bytecode":"0xa11ceb0b050000000801000c020c0c03183f04570a05615307b401b60108ea02400caa03a50100000101010200030004000503070f0004090700050b0f0000060001000008020100000a030100000c040100000d050100000e060100000f07010001100a08010002110c01010002120d01010003130f0e0005131211000709080b090b0710071302070a02040002070a02080002070a02080102070a02080202070a020302070a020202070a020a02010a02010401060900010201070a090002070a09000a0900020202010800010801040202020201080201030973657269616c697a650362637306766563746f72037531360475323536037533320e73657269616c697a655f75313238035531360d73657269616c697a655f75313604553235360e73657269616c697a655f75323536035533320d73657269616c697a655f7533320d73657269616c697a655f7536340c73657269616c697a655f75381073657269616c697a655f766563746f7208746f5f6279746573077265766572736506617070656e640873706c69745f75385bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e1962500000000000000000000000000000000000000000000000000000000000000010001000008090e0138000c020d0238010b000b02380202010100000e0b0b01110a0c030c020a000b0211050b000b031105020201000008090e0138030c020d0238010b000b023802020301000011130b01110b0c050c040c030c020a000b0211050a000b0311050a000b0411050b000b051105020401000008090e0138040c020d0238010b000b023802020501000001040b000b01440b020601000001040b000b0138020200","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"serialize","friends":[],"exposed_functions":[{"name":"serialize_u128","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut vector<u8>","u128"],"return":[]},{"name":"serialize_u16","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut vector<u8>","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16"],"return":[]},{"name":"serialize_u256","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut vector<u8>","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"],"return":[]},{"name":"serialize_u32","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut vector<u8>","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"],"return":[]},{"name":"serialize_u64","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut vector<u8>","u64"],"return":[]},{"name":"serialize_u8","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut vector<u8>","u8"],"return":[]},{"name":"serialize_vector","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut vector<u8>","vector<u8>"],"return":[]}],"structs":[]}},{"bytecode":"0xa11ceb0b050000000801000a020a12031c42045e0205603e079e01c80108e602200c8603c4030000000100020003000401050001000002070f0003090700040b0f0000060001000008000200000a000300000c000400000d000500000e000600000f07080001100a0b01000211050200031201030003130f030003141003000411050400070601070b00010201040108010108020108030103010202070b00010203010a020302030401070b0001090001090003020303000204040208020202080208020b646573657269616c697a6506637572736f720375313604753235360375333206437572736f7210646573657269616c697a655f75313238035531360f646573657269616c697a655f753136045532353610646573657269616c697a655f75323536035533320f646573657269616c697a655f7533320f646573657269616c697a655f7536340e646573657269616c697a655f753812646573657269616c697a655f766563746f7204706f6b650866726f6d5f7536340966726f6d5f753132380373686c036164645bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e1962500010000091c32000000000000000000000000000000000c030600000000000000000c020a0206100000000000000023030905180a0038000c010b0331082f0b0135160c030b02060100000000000000160c0205040b00010b0302010100000c1d0600000000000000000c030600000000000000000c020a0206020000000000000023030905180a0038000c010b0331082f0b0134160c030b02060100000000000000160c0205040b00010b03110802020100000e0e0a0011000c010b0011000c020b0111093180110a0b021109110b02030100000c1d0600000000000000000c030600000000000000000c020a0206040000000000000023030905180a0038000c010b0331082f0b0134160c030b02060100000000000000160c0205040b00010b03110c02040100000c1c0600000000000000000c030600000000000000000c020a0206080000000000000023030905180a0038000c010b0331082f0b0134160c030b02060100000000000000160c0205040b00010b0302050100000d030b00380002060100000814400600000000000000000c020a0106000000000000000024030705100d020a00380044060b01060100000000000000170c0105020b00010b020200","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"deserialize","friends":[],"exposed_functions":[{"name":"deserialize_u128","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>"],"return":["u128"]},{"name":"deserialize_u16","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u16::U16"]},{"name":"deserialize_u256","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u256::U256"]},{"name":"deserialize_u32","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"]},{"name":"deserialize_u64","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>"],"return":["u64"]},{"name":"deserialize_u8","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>"],"return":["u8"]},{"name":"deserialize_vector","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>","u64"],"return":["vector<u8>"]}],"structs":[]}},{"bytecode":"0xa11ceb0b050000000b01000c020c12031e2f044d0405513e078f01e10108f0024006b0030a10ba03770ab104060cb704950100000101010201030104000500060f0003080700030a070002100701000000070001000009020100000b030100010d060600030e0200000505000000040f080401000311030a0002120c0d01000605080b010a0201080001060801030a02020608020001020103040a020a020a020301070a0900020b030108010801010b0301080101080101070b030109000109000f677561726469616e5f7075626b6579056572726f72066f7074696f6e09736563703235366b3106766563746f72096b656363616b32353607416464726573730a66726f6d5f62797465731145434453415261775075626c69634b65790b66726f6d5f7075626b65790e45434453415369676e61747572650e66726f6d5f7369676e617475726505627974657310696e76616c69645f617267756d656e741d65636473615f7261775f7075626c69635f6b65795f746f5f62797465730772657665727365064f7074696f6e0d65636473615f7265636f76657207657874726163745bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625000000000000000000000000000000000000000000000000000000000000000103080100000000000000126170746f733a3a6d657461646174615f7630630101000000000000000d455f444553455249414c495a454b416e206572726f72206f63637572726564207768696c6520646573657269616c697a696e672c20666f72206578616d706c652064756520746f2077726f6e6720696e7075742073697a652e0002010c0a0200010000040b0e00410506140000000000000021030807001103270b0012000201010000071d0b0011040c020b0211050c03400500000000000000000c010600000000000000000c040a0406140000000000000023030f05180d010d03450544050b04060100000000000000160c04050a0d0138000b0112000202010000090b0b000b010b0211070c030d0338010c040e0411010200","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"guardian_pubkey","friends":[],"exposed_functions":[{"name":"from_bytes","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::guardian_pubkey::Address"]},{"name":"from_pubkey","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x1::secp256k1::ECDSARawPublicKey"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::guardian_pubkey::Address"]},{"name":"from_signature","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u8>","u8","&0x1::secp256k1::ECDSASignature"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::guardian_pubkey::Address"]}],"structs":[{"name":"Address","is_native":false,"abilities":["copy","drop","store","key"],"generic_type_params":[],"fields":[{"name":"bytes","type":"vector<u8>"}]}]}},{"bytecode":"0xa11ceb0b050000000c01001202121a032c7d04a9010a05b3016c079f02b30308d205400692068201109407b8010acc08110cdd08c7020da40b0200000101010200030004000500060007000800090200000a0800000b080007170f00031800010000081f0000000c000100000d000200000e010300000f010100001002040000110204000012020100001305010006160106000319090a0100041a0b0200041b0c0800041c0c0d00061d010d00031e0a0101000820020f000821100100082210010008230f02000224120101000505020200022513030100022614010100012715010009080e081302150216080106080000010a020101010800020a020a0a02010c050208030b0401020a020a020102010a0900010b0401090002070b0401020301070b040102010803020800080501080501060805040a020a0a020a020c01070a090001060a090002070a09000a090003060c0a020a0a0210636f6e74726163745f7570677261646504636f646506766563746f7206637572736f720b646573657269616c697a65096b656363616b32353605737461746503753136037661610448617368094d6967726174696e671155706772616465417574686f72697a656411617574686f72697a655f75706772616465086765745f686173680c69735f6d6967726174696e67076d6967726174650d70617273655f7061796c6f61640a7375626d69745f766161107375626d69745f7661615f656e747279077570677261646504686173680b64756d6d795f6669656c640f776f726d686f6c655f7369676e65720355313606437572736f7204696e697412646573657269616c697a655f766563746f720e646573657269616c697a655f75380f646573657269616c697a655f7531360c6765745f636861696e5f69640d64657374726f795f656d707479035641411070617273655f616e645f766572696679116173736572745f676f7665726e616e63650e7265706c61795f70726f746563740764657374726f7907726576657273650869735f656d70747906617070656e64137075626c6973685f7061636b6167655f74786e5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e1962500000000000000000000000000000000000000000000000000000000000000010a02212000000000000000000000000000000000000000000000000000000000436f726503080300000000000000030802000000000000000308040000000000000003080500000000000000030801000000000000000308000000000000000005205bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625126170746f733a3a6d657461646174615f7630a30106000000000000000016455f555047524144455f554e415554484f52495a454400010000000000000011455f554e45585045435445445f4841534800020000000000000010455f494e56414c49445f4d4f44554c4500030000000000000010455f494e56414c49445f414354494f4e00040000000000000010455f494e56414c49445f5441524745540005000000000000000f455f4e4f545f4d4947524154494e4700000201140a020102011501020201140a020000000102061111080c01070729020306050a07072c021302010e010b0010001412022d02020101000001040b001000140202010000010307072901020301040101010a07072901030507042707072c01130101020400000007280b0038000c030d03062000000000000000110a0c050b05070021030d0702270d03110b0c010b0131012103160701270d03110c0c020b02110d21031f0703270d03062000000000000000110a0c040b0338010b0412000205010001020e0f0b00110f0c020e0211100e0211110b02111211040c010e0111000b0102060104010201040b00110501020701040102113207072902030507062707072c0213020c040a010c030d0338020a0011140c020e033803200315051b0d020d0345021114380405100b0211140b0421032207052711080c050e050b000b0111170707290120032d05310e050912012d0102000000","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"contract_upgrade","friends":[],"exposed_functions":[{"name":"get_hash","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::contract_upgrade::Hash"],"return":["vector<u8>"]},{"name":"is_migrating","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["bool"]},{"name":"migrate","visibility":"public","is_entry":true,"generic_type_params":[],"params":[],"return":[]},{"name":"submit_vaa","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::contract_upgrade::Hash"]},{"name":"submit_vaa_entry","visibility":"public","is_entry":true,"generic_type_params":[],"params":["vector<u8>"],"return":[]},{"name":"upgrade","visibility":"public","is_entry":true,"generic_type_params":[],"params":["vector<u8>","vector<vector<u8>>"],"return":[]}],"structs":[{"name":"Hash","is_native":false,"abilities":["drop"],"generic_type_params":[],"fields":[{"name":"hash","type":"vector<u8>"}]},{"name":"Migrating","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]},{"name":"UpgradeAuthorized","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"hash","type":"vector<u8>"}]}]}},{"bytecode":"0xa11ceb0b050000000c01000a020a0a03142e044202054437077ba101089c024006dc020a10e602300a9603060c9c03bc010dd8040200000101000200030004000507000206000100000003000100000702010000080302000009040100000a0402000004050600030b070200010c0a060100040d0b0600070901070b010102010800010a020106080001060a0202070a0208000002070b0101020303030a0203010202070a09000a090002070a020a021065787465726e616c5f6164647265737306766563746f7206637572736f720b646573657269616c697a650973657269616c697a650f45787465726e616c4164647265737306437572736f720a66726f6d5f6279746573096765745f6279746573086c6566745f7061640b7061645f6c6566745f333212646573657269616c697a655f766563746f7206617070656e641073657269616c697a655f766563746f725bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625000000000000000000000000000000000000000000000000000000000000000103080000000000000000126170746f733a3a6d657461646174615f76301c01000000000000000011455f564543544f525f544f4f5f4c4f4e4700000201000a020001000002070b0006200000000000000011060c010b011101020101000006030e001103020201000006040b00100014020301000002060b0011040c010b011200020401000008240a0041090c010a0106200000000000000025030b0b0001070027400900000000000000000c020620000000000000000b01170c030a03060000000000000000240316051e0d02310044090b03060100000000000000170c0305110d020b001438000b02020501000006060b000e01100014110802000000","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"external_address","friends":[],"exposed_functions":[{"name":"deserialize","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress"]},{"name":"from_bytes","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress"]},{"name":"get_bytes","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress"],"return":["vector<u8>"]},{"name":"left_pad","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&vector<u8>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress"]},{"name":"pad_left_32","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&vector<u8>"],"return":["vector<u8>"]},{"name":"serialize","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut vector<u8>","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress"],"return":[]}],"structs":[{"name":"ExternalAddress","is_native":false,"abilities":["copy","drop","store"],"generic_type_params":[],"fields":[{"name":"external_address","type":"vector<u8>"}]}]}},{"bytecode":"0xa11ceb0b050000000c01001002101e032e7a04a8010405ac015c0788028504088d062006ad0660108d07c6010ad3080a0cdd08a3020d800b040000000100020003000400050006000700080200040a0f00060c0f0004160f00051a0f00011b00010000072400000009000100000b000200000d000300000e040500000f0405000010040100031301030006140306000315030100041707080003180801000319030100011c0b0c0100021d0e0400021e0f0a00021f0f1000052006100002210f03000422040d0001230c01010007250412000726130100072713010007281204000c0a130a0106080000010a0801010802010a0201080001030208020a0801010803090208040b0501020a02020a08010a0208020a020102010a0900010b0501090001080102070b0501020301070b05010201080402080008060108060106080614677561726469616e5f7365745f7570677261646506637572736f720b646573657269616c697a65057374617465077374727563747303753136037533320376616112477561726469616e536574557067726164650a646f5f7570677261646508477561726469616e0d6765745f677561726469616e73035533320d6765745f6e65775f696e6465780d70617273655f7061796c6f61640a7375626d69745f766161107375626d69745f7661615f656e747279096e65775f696e64657809677561726469616e731e6765745f63757272656e745f677561726469616e5f7365745f696e64657806746f5f753634197570646174655f677561726469616e5f7365745f696e6465780b477561726469616e536574136372656174655f677561726469616e5f7365741273746f72655f677561726469616e5f736574136578706972655f677561726469616e5f7365740355313606437572736f7204696e697412646573657269616c697a655f766563746f720e646573657269616c697a655f75380f646573657269616c697a655f7531360866726f6d5f7536340f646573657269616c697a655f7533320f6372656174655f677561726469616e0d64657374726f795f656d707479035641411070617273655f616e645f766572696679116173736572745f676f7665726e616e63650e7265706c61795f70726f746563740764657374726f795bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e196250308030000000000000003080200000000000000030804000000000000000308050000000000000003080100000000000000030800000000000000000a02212000000000000000000000000000000000000000000000000000000000436f7265126170746f733a3a6d657461646174615f7630b10106000000000000000014455f57524f4e475f475541524449414e5f4c454e00010000000000000011455f4e4f5f475541524449414e5f53455400020000000000000010455f494e56414c49445f4d4f44554c4500030000000000000010455f494e56414c49445f414354494f4e00040000000000000010455f494e56414c49445f5441524745540005000000000000001f455f4e4f4e5f494e4352454d454e54414c5f475541524449414e5f5345545300000202110802120a080100000000031f11060c010a0010001411070a011107060100000000000000162103100b00010703270a0010001411080a001000140b001001141109110a0b01110b020101000001040b00100114020201000001040b00100014020301000009400b0038000c03400d00000000000000000c060d03062000000000000000110d0c090b09070621030f0701270d03110e0c010b0131022103180700270d03110f0c020b0206000000000000000011102103220702270d0311110c080d03110e0c050a05310024032d053a0d03061400000000000000110d0c070d060b071112440d0b053101170c0505280b0338010b080b0612000204010000110f0b0011140c020e0211150e0211160b02111711030c010e0111000b01020501040001040b00110401020000000100","abi":{"address":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625","name":"guardian_set_upgrade","friends":[],"exposed_functions":[{"name":"get_guardians","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::guardian_set_upgrade::GuardianSetUpgrade"],"return":["vector<0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::Guardian>"]},{"name":"get_new_index","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::guardian_set_upgrade::GuardianSetUpgrade"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"]},{"name":"parse_payload","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::guardian_set_upgrade::GuardianSetUpgrade"]},{"name":"submit_vaa","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":["0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::guardian_set_upgrade::GuardianSetUpgrade"]},{"name":"submit_vaa_entry","visibility":"public","is_entry":true,"generic_type_params":[],"params":["vector<u8>"],"return":[]}],"structs":[{"name":"GuardianSetUpgrade","is_native":false,"abilities":["drop"],"generic_type_params":[],"fields":[{"name":"new_index","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::u32::U32"},{"name":"guardians","type":"vector<0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::structs::Guardian>"}]}]}}]'
);
function loadAllTypes2(coder) {
  _0x1.loadAllTypes(coder);
  for (const m of Object.values(MODULES)) {
    coder.load(
      m,
      "0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625"
    );
  }
}
loadAllTypes2((0, import_aptos2.defaultMoveCoder)(import_aptos.AptosNetwork.MAIN_NET));

// src/types/aptos/pyth.ts
var i64 = class _i64 extends import_aptos3.AptosBaseProcessor {
  constructor(options) {
    super("i64", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387",
    network: import_aptos3.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _i64({ ..._i64.DEFAULT_OPTIONS, ...options });
  }
  onEventI64(func, fetchConfig) {
    this.onMoveEvent(func, { type: "i64::I64" }, fetchConfig);
    return this;
  }
};
((i644) => {
  let I64;
  ((I642) => {
    I642.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::i64::I64";
    const TYPE = new TypeDescriptor(I642.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    I642.type = type;
  })(I64 = i644.I64 || (i644.I64 = {}));
})(i64 || (i64 = {}));
var set2 = class _set extends import_aptos3.AptosBaseProcessor {
  constructor(options) {
    super("set", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387",
    network: import_aptos3.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _set({ ..._set.DEFAULT_OPTIONS, ...options });
  }
  onEventUnit(func, fetchConfig) {
    this.onMoveEvent(func, { type: "set::Unit" }, fetchConfig);
    return this;
  }
};
((set6) => {
  let Set2;
  ((Set3) => {
    Set3.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set::Set";
    const TYPE = new TypeDescriptor(Set3.TYPE_QNAME);
    function type(arg0 = ANY_TYPE) {
      return TYPE.apply(arg0);
    }
    Set3.type = type;
  })(Set2 = set6.Set || (set6.Set = {}));
  let Unit;
  ((Unit2) => {
    Unit2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set::Unit";
    const TYPE = new TypeDescriptor(Unit2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Unit2.type = type;
  })(Unit = set6.Unit || (set6.Unit = {}));
})(set2 || (set2 = {}));
var pyth = class _pyth extends import_aptos3.AptosBaseProcessor {
  constructor(options) {
    super("pyth", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387",
    network: import_aptos3.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _pyth({ ..._pyth.DEFAULT_OPTIONS, ...options });
  }
  onEntryInit(func, filter, fetchConfig) {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pyth::init"
      },
      fetchConfig
    );
    return this;
  }
  onEntryUpdatePriceFeedsIfFresh(func, filter, fetchConfig) {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pyth::update_price_feeds_if_fresh"
      },
      fetchConfig
    );
    return this;
  }
  onEntryUpdatePriceFeedsIfFreshWithFunder(func, filter, fetchConfig) {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pyth::update_price_feeds_if_fresh_with_funder"
      },
      fetchConfig
    );
    return this;
  }
  onEntryUpdatePriceFeedsWithFunder(func, filter, fetchConfig) {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pyth::update_price_feeds_with_funder"
      },
      fetchConfig
    );
    return this;
  }
};
var event = class _event extends import_aptos3.AptosBaseProcessor {
  constructor(options) {
    super("event", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387",
    network: import_aptos3.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _event({ ..._event.DEFAULT_OPTIONS, ...options });
  }
  onEventPriceFeedUpdate(func, fetchConfig) {
    this.onMoveEvent(func, { type: "event::PriceFeedUpdate" }, fetchConfig);
    return this;
  }
};
((event4) => {
  let PriceFeedUpdate;
  ((PriceFeedUpdate2) => {
    PriceFeedUpdate2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::event::PriceFeedUpdate";
    const TYPE = new TypeDescriptor(
      PriceFeedUpdate2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    PriceFeedUpdate2.type = type;
  })(PriceFeedUpdate = event4.PriceFeedUpdate || (event4.PriceFeedUpdate = {}));
  let PriceFeedUpdateHandle;
  ((PriceFeedUpdateHandle2) => {
    PriceFeedUpdateHandle2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::event::PriceFeedUpdateHandle";
    const TYPE = new TypeDescriptor(
      PriceFeedUpdateHandle2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    PriceFeedUpdateHandle2.type = type;
  })(PriceFeedUpdateHandle = event4.PriceFeedUpdateHandle || (event4.PriceFeedUpdateHandle = {}));
})(event || (event = {}));
var price = class _price extends import_aptos3.AptosBaseProcessor {
  constructor(options) {
    super("price", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387",
    network: import_aptos3.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price({ ..._price.DEFAULT_OPTIONS, ...options });
  }
  onEventPrice(func, fetchConfig) {
    this.onMoveEvent(func, { type: "price::Price" }, fetchConfig);
    return this;
  }
};
((price6) => {
  let Price;
  ((Price2) => {
    Price2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price";
    const TYPE = new TypeDescriptor(Price2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Price2.type = type;
  })(Price = price6.Price || (price6.Price = {}));
})(price || (price = {}));
var state2;
((state6) => {
  let BaseUpdateFee;
  ((BaseUpdateFee2) => {
    BaseUpdateFee2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::state::BaseUpdateFee";
    const TYPE = new TypeDescriptor(BaseUpdateFee2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    BaseUpdateFee2.type = type;
  })(BaseUpdateFee = state6.BaseUpdateFee || (state6.BaseUpdateFee = {}));
  let ContractUpgradeAuthorized;
  ((ContractUpgradeAuthorized2) => {
    ContractUpgradeAuthorized2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::state::ContractUpgradeAuthorized";
    const TYPE = new TypeDescriptor(
      ContractUpgradeAuthorized2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    ContractUpgradeAuthorized2.type = type;
  })(ContractUpgradeAuthorized = state6.ContractUpgradeAuthorized || (state6.ContractUpgradeAuthorized = {}));
  let DataSources;
  ((DataSources2) => {
    DataSources2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::state::DataSources";
    const TYPE = new TypeDescriptor(DataSources2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    DataSources2.type = type;
  })(DataSources = state6.DataSources || (state6.DataSources = {}));
  let GovernanceDataSource;
  ((GovernanceDataSource2) => {
    GovernanceDataSource2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::state::GovernanceDataSource";
    const TYPE = new TypeDescriptor(
      GovernanceDataSource2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GovernanceDataSource2.type = type;
  })(GovernanceDataSource = state6.GovernanceDataSource || (state6.GovernanceDataSource = {}));
  let LastExecutedGovernanceSequence;
  ((LastExecutedGovernanceSequence2) => {
    LastExecutedGovernanceSequence2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::state::LastExecutedGovernanceSequence";
    const TYPE = new TypeDescriptor(
      LastExecutedGovernanceSequence2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    LastExecutedGovernanceSequence2.type = type;
  })(LastExecutedGovernanceSequence = state6.LastExecutedGovernanceSequence || (state6.LastExecutedGovernanceSequence = {}));
  let LatestPriceInfo;
  ((LatestPriceInfo2) => {
    LatestPriceInfo2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::state::LatestPriceInfo";
    const TYPE = new TypeDescriptor(
      LatestPriceInfo2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    LatestPriceInfo2.type = type;
  })(LatestPriceInfo = state6.LatestPriceInfo || (state6.LatestPriceInfo = {}));
  let SignerCapability;
  ((SignerCapability2) => {
    SignerCapability2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::state::SignerCapability";
    const TYPE = new TypeDescriptor(
      SignerCapability2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    SignerCapability2.type = type;
  })(SignerCapability = state6.SignerCapability || (state6.SignerCapability = {}));
  let StalePriceThreshold;
  ((StalePriceThreshold2) => {
    StalePriceThreshold2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::state::StalePriceThreshold";
    const TYPE = new TypeDescriptor(
      StalePriceThreshold2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    StalePriceThreshold2.type = type;
  })(StalePriceThreshold = state6.StalePriceThreshold || (state6.StalePriceThreshold = {}));
})(state2 || (state2 = {}));
var governance = class _governance extends import_aptos3.AptosBaseProcessor {
  constructor(options) {
    super("governance", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387",
    network: import_aptos3.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _governance({ ..._governance.DEFAULT_OPTIONS, ...options });
  }
  onEntryExecuteGovernanceInstruction(func, filter, fetchConfig) {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "governance::execute_governance_instruction"
      },
      fetchConfig
    );
    return this;
  }
};
var price_feed = class _price_feed extends import_aptos3.AptosBaseProcessor {
  constructor(options) {
    super("price_feed", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387",
    network: import_aptos3.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price_feed({ ..._price_feed.DEFAULT_OPTIONS, ...options });
  }
  onEventPriceFeed(func, fetchConfig) {
    this.onMoveEvent(func, { type: "price_feed::PriceFeed" }, fetchConfig);
    return this;
  }
};
((price_feed4) => {
  let PriceFeed;
  ((PriceFeed2) => {
    PriceFeed2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_feed::PriceFeed";
    const TYPE = new TypeDescriptor(PriceFeed2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    PriceFeed2.type = type;
  })(PriceFeed = price_feed4.PriceFeed || (price_feed4.PriceFeed = {}));
})(price_feed || (price_feed = {}));
var price_info = class _price_info extends import_aptos3.AptosBaseProcessor {
  constructor(options) {
    super("price_info", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387",
    network: import_aptos3.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price_info({ ..._price_info.DEFAULT_OPTIONS, ...options });
  }
  onEventPriceInfo(func, fetchConfig) {
    this.onMoveEvent(func, { type: "price_info::PriceInfo" }, fetchConfig);
    return this;
  }
};
((price_info4) => {
  let PriceInfo;
  ((PriceInfo2) => {
    PriceInfo2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_info::PriceInfo";
    const TYPE = new TypeDescriptor(PriceInfo2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    PriceInfo2.type = type;
  })(PriceInfo = price_info4.PriceInfo || (price_info4.PriceInfo = {}));
})(price_info || (price_info = {}));
var data_source = class _data_source extends import_aptos3.AptosBaseProcessor {
  constructor(options) {
    super("data_source", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387",
    network: import_aptos3.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _data_source({ ..._data_source.DEFAULT_OPTIONS, ...options });
  }
  onEventDataSource(func, fetchConfig) {
    this.onMoveEvent(func, { type: "data_source::DataSource" }, fetchConfig);
    return this;
  }
};
((data_source4) => {
  let DataSource;
  ((DataSource2) => {
    DataSource2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::data_source::DataSource";
    const TYPE = new TypeDescriptor(DataSource2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    DataSource2.type = type;
  })(DataSource = data_source4.DataSource || (data_source4.DataSource = {}));
})(data_source || (data_source = {}));
var price_status = class _price_status extends import_aptos3.AptosBaseProcessor {
  constructor(options) {
    super("price_status", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387",
    network: import_aptos3.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price_status({ ..._price_status.DEFAULT_OPTIONS, ...options });
  }
  onEventPriceStatus(func, fetchConfig) {
    this.onMoveEvent(func, { type: "price_status::PriceStatus" }, fetchConfig);
    return this;
  }
};
((price_status4) => {
  let PriceStatus;
  ((PriceStatus2) => {
    PriceStatus2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_status::PriceStatus";
    const TYPE = new TypeDescriptor(PriceStatus2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    PriceStatus2.type = type;
  })(PriceStatus = price_status4.PriceStatus || (price_status4.PriceStatus = {}));
})(price_status || (price_status = {}));
var set_update_fee;
((set_update_fee4) => {
  let SetUpdateFee;
  ((SetUpdateFee2) => {
    SetUpdateFee2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set_update_fee::SetUpdateFee";
    const TYPE = new TypeDescriptor(SetUpdateFee2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    SetUpdateFee2.type = type;
  })(SetUpdateFee = set_update_fee4.SetUpdateFee || (set_update_fee4.SetUpdateFee = {}));
})(set_update_fee || (set_update_fee = {}));
var contract_upgrade2 = class _contract_upgrade extends import_aptos3.AptosBaseProcessor {
  constructor(options) {
    super("contract_upgrade", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387",
    network: import_aptos3.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _contract_upgrade({
      ..._contract_upgrade.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEntryDoContractUpgrade(func, filter, fetchConfig) {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "contract_upgrade::do_contract_upgrade"
      },
      fetchConfig
    );
    return this;
  }
};
((contract_upgrade5) => {
  let AuthorizeContractUpgrade;
  ((AuthorizeContractUpgrade2) => {
    AuthorizeContractUpgrade2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::contract_upgrade::AuthorizeContractUpgrade";
    const TYPE = new TypeDescriptor(
      AuthorizeContractUpgrade2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    AuthorizeContractUpgrade2.type = type;
  })(AuthorizeContractUpgrade = contract_upgrade5.AuthorizeContractUpgrade || (contract_upgrade5.AuthorizeContractUpgrade = {}));
})(contract_upgrade2 || (contract_upgrade2 = {}));
var price_identifier = class _price_identifier extends import_aptos3.AptosBaseProcessor {
  constructor(options) {
    super("price_identifier", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387",
    network: import_aptos3.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price_identifier({
      ..._price_identifier.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventPriceIdentifier(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "price_identifier::PriceIdentifier" },
      fetchConfig
    );
    return this;
  }
};
((price_identifier4) => {
  let PriceIdentifier;
  ((PriceIdentifier2) => {
    PriceIdentifier2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier";
    const TYPE = new TypeDescriptor(
      PriceIdentifier2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    PriceIdentifier2.type = type;
  })(PriceIdentifier = price_identifier4.PriceIdentifier || (price_identifier4.PriceIdentifier = {}));
})(price_identifier || (price_identifier = {}));
var set_data_sources;
((set_data_sources4) => {
  let SetDataSources;
  ((SetDataSources2) => {
    SetDataSources2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set_data_sources::SetDataSources";
    const TYPE = new TypeDescriptor(SetDataSources2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    SetDataSources2.type = type;
  })(SetDataSources = set_data_sources4.SetDataSources || (set_data_sources4.SetDataSources = {}));
})(set_data_sources || (set_data_sources = {}));
var governance_action;
((governance_action4) => {
  let GovernanceAction;
  ((GovernanceAction2) => {
    GovernanceAction2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_action::GovernanceAction";
    const TYPE = new TypeDescriptor(
      GovernanceAction2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GovernanceAction2.type = type;
  })(GovernanceAction = governance_action4.GovernanceAction || (governance_action4.GovernanceAction = {}));
})(governance_action || (governance_action = {}));
var contract_upgrade_hash = class _contract_upgrade_hash extends import_aptos3.AptosBaseProcessor {
  constructor(options) {
    super("contract_upgrade_hash", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387",
    network: import_aptos3.AptosNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _contract_upgrade_hash({
      ..._contract_upgrade_hash.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventHash(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "contract_upgrade_hash::Hash" },
      fetchConfig
    );
    return this;
  }
};
((contract_upgrade_hash2) => {
  let Hash3;
  ((Hash4) => {
    Hash4.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::contract_upgrade_hash::Hash";
    const TYPE = new TypeDescriptor(Hash4.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Hash4.type = type;
  })(Hash3 = contract_upgrade_hash2.Hash || (contract_upgrade_hash2.Hash = {}));
})(contract_upgrade_hash || (contract_upgrade_hash = {}));
var governance_instruction;
((governance_instruction4) => {
  let GovernanceInstruction;
  ((GovernanceInstruction2) => {
    GovernanceInstruction2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_instruction::GovernanceInstruction";
    const TYPE = new TypeDescriptor(
      GovernanceInstruction2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GovernanceInstruction2.type = type;
  })(GovernanceInstruction = governance_instruction4.GovernanceInstruction || (governance_instruction4.GovernanceInstruction = {}));
})(governance_instruction || (governance_instruction = {}));
var batch_price_attestation;
((batch_price_attestation4) => {
  let BatchPriceAttestation;
  ((BatchPriceAttestation2) => {
    BatchPriceAttestation2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::batch_price_attestation::BatchPriceAttestation";
    const TYPE = new TypeDescriptor(
      BatchPriceAttestation2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    BatchPriceAttestation2.type = type;
  })(BatchPriceAttestation = batch_price_attestation4.BatchPriceAttestation || (batch_price_attestation4.BatchPriceAttestation = {}));
  let Header;
  ((Header2) => {
    Header2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::batch_price_attestation::Header";
    const TYPE = new TypeDescriptor(Header2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Header2.type = type;
  })(Header = batch_price_attestation4.Header || (batch_price_attestation4.Header = {}));
})(batch_price_attestation || (batch_price_attestation = {}));
var set_stale_price_threshold;
((set_stale_price_threshold4) => {
  let SetStalePriceThreshold;
  ((SetStalePriceThreshold2) => {
    SetStalePriceThreshold2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set_stale_price_threshold::SetStalePriceThreshold";
    const TYPE = new TypeDescriptor(
      SetStalePriceThreshold2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    SetStalePriceThreshold2.type = type;
  })(SetStalePriceThreshold = set_stale_price_threshold4.SetStalePriceThreshold || (set_stale_price_threshold4.SetStalePriceThreshold = {}));
})(set_stale_price_threshold || (set_stale_price_threshold = {}));
var set_governance_data_source;
((set_governance_data_source4) => {
  let SetGovernanceDataSource;
  ((SetGovernanceDataSource2) => {
    SetGovernanceDataSource2.TYPE_QNAME = "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set_governance_data_source::SetGovernanceDataSource";
    const TYPE = new TypeDescriptor(
      SetGovernanceDataSource2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    SetGovernanceDataSource2.type = type;
  })(SetGovernanceDataSource = set_governance_data_source4.SetGovernanceDataSource || (set_governance_data_source4.SetGovernanceDataSource = {}));
})(set_governance_data_source || (set_governance_data_source = {}));
var MODULES2 = JSON.parse(
  '[{"bytecode":"0xa11ceb0b050000000a01000402040403082d0535130748b40108fc0120069c02140ab002070cb702d0010d8704040000000100020700000300010000040203000005020000000602000000070401000008040000010b050000010c050000010d0500000103010800010608000101020301000303010303693634056572726f72034936340866726f6d5f7536340f6765745f69735f6e65676174697665196765745f6d61676e69747564655f69665f6e65676174697665196765745f6d61676e69747564655f69665f706f736974697665036e65770f70617273655f6d61676e6974756465086e65676174697665096d61676e69747564650e706f7369746976655f76616c75650e6e656761746976655f76616c7565136d61676e69747564655f746f6f5f6c617267657e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387030800000000000000800308ffffffffffffff7f00020209010a0300010000040e0a00313f30060100000000000000210c020b000a0211050c010b010b021104020101000005040b001000140202010000050c0a0010001403080b00011106270b001001140203010000050d0a001000142003090b00011107270b001001140204010000061c07010c040a010305050707000c040a000b0425030d1108270a000600000000000000002103120514090c010b000c020b010c030b030b0212000205000000000e0b0120030405060b00020b0006ffffffffffffffff1d0c020b0206010000000000000016020000000100","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"i64","friends":[],"exposed_functions":[{"name":"from_u64","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u64"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::i64::I64"]},{"name":"get_is_negative","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::i64::I64"],"return":["bool"]},{"name":"get_magnitude_if_negative","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::i64::I64"],"return":["u64"]},{"name":"get_magnitude_if_positive","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::i64::I64"],"return":["u64"]},{"name":"new","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u64","bool"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::i64::I64"]}],"structs":[{"name":"I64","is_native":false,"abilities":["copy","drop","store"],"generic_type_params":[],"fields":[{"name":"negative","type":"bool"},{"name":"magnitude","type":"u64"}]}]}},{"bytecode":"0xa11ceb0b050000000c01000602061203183a04520a055c5d07b9015e089702400ad702140beb02020ced02620dcf03040ed3030400000101010200030401030000040700010b0402030100010005000101030006020301030007040101030008010501030105080102030001060903020300020d0a030100010e0b0c0203000108010d0203040407050706060707080702070b0001090009000002060b000109000900010101070b00010900010b00010900010900020900080103070b0202090009010900090102060b020209000901090001060a090002070b0202090009010900010901010b02020900090103736574057461626c6506766563746f720353657404556e69740361646408636f6e7461696e7305656d707479036e6577046b65797305656c656d73055461626c650b64756d6d795f6669656c640869735f656d7074790672656d6f76657e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b3870000000000000000000000000000000000000000000000000000000000000001000202090a09000a0b0202090008010102010c01000600010000010b0a0036000a0109120138000b0036010b014406020101000001050b0037000b013801020201000001110a0037013802200306050e0a0036000a003601450638030105000b000102030100000104400600000000000000003804390002000100000006010600","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"set","friends":[],"exposed_functions":[{"name":"add","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":["copy","drop"]}],"params":["&mut 0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set::Set<T0>","T0"],"return":[]},{"name":"contains","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":["copy","drop"]}],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set::Set<T0>","T0"],"return":["bool"]},{"name":"empty","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":["copy","drop"]}],"params":["&mut 0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set::Set<T0>"],"return":[]},{"name":"new","visibility":"public","is_entry":false,"generic_type_params":[{"constraints":["copy","drop"]}],"params":[],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set::Set<T0>"]}],"structs":[{"name":"Set","is_native":false,"abilities":["store"],"generic_type_params":[{"constraints":["copy","drop"]}],"fields":[{"name":"keys","type":"vector<T0>"},{"name":"elems","type":"0x1::table::Table<T0, 0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set::Unit>"}]},{"name":"Unit","is_native":false,"abilities":["copy","drop","store"],"generic_type_params":[],"fields":[{"name":"dummy_field","type":"bool"}]}]}},{"bytecode":"0xa11ceb0b0500000009010028022832035abc020496030e05a403860207aa05c30a08ed0f800106ed10220c8f1187060000010101020103010401050106020702080209000a000b000c000d000e000f00100011001203130e15070010170700012106000b22070011240700032a04010001022b08000f340700073907000946000008480f000a4f00000014000100001602030000180405000019060500001a040500001b040500001c060500001d040500001e030100001f0701000020080300002309030000250a0b0000260c0d000027040b0000280e030000290f0300002c100300002d110300002e120300002f13030005300301000e311401000c32030100121e030100123304150011350a16000f181605000f1b1605001236030100133718170001381a1900073a0f1b000b3b1c1d0012201e03000d201f0300043c1f2000033d200b0100033e1f0301000f3f1623000c400301001241040b000642260b0100124327030005440301000d4528030009470f290009492a2b00084a2b0100094b2a1b00124c1d0b000c4d030100094e290f000a500f2c000a4e2c0e0003512d0101000c5203010003532e0301000c5403010010550f04000c56030100035731320100252126212a15372139212a0f3d2102030301030206080003000108010108000208010301060a0a0207060c03030a020a030a0a020306080203030a020a080303010608040101020a030a0a02010a0803010a0804010a02020a0a020b05010806040a0a020a0a020a030b0501080604060c0a0a020a0a020a0302060c0a0a02010608000108040106080701080202060c05010c010608020108080203080801080306060c030308030a0803080201060c0105010806060800080003060807060801030106080102030a0803030807060801080401060a09000208010804020807030108090106080901080a01080b01060b0501090002050b050109000508000301030801010b0501080602060c03010b050109000470797468076163636f756e740a6170746f735f636f696e04636f696e067369676e65720974696d657374616d7006766563746f721065787465726e616c5f6164647265737303753136037661611762617463685f70726963655f6174746573746174696f6e0b646174615f736f75726365056572726f72056576656e740570726963650a70726963655f666565641070726963655f6964656e7469666965720a70726963655f696e666f057374617465086465706c6f796572086162735f6469666605507269636514636865636b5f70726963655f69735f66726573680f50726963654964656e7469666965720d6765745f656d615f70726963651b6765745f656d615f70726963655f6e6f5f6f6c6465725f7468616e146765745f656d615f70726963655f756e73616665096765745f7072696365176765745f70726963655f6e6f5f6f6c6465725f7468616e106765745f70726963655f756e736166651e6765745f7374616c655f70726963655f7468726573686f6c645f736563730e6765745f7570646174655f66656504696e6974105369676e65724361706162696c6974790a44617461536f757263650d696e69745f696e7465726e616c095072696365496e666f0f69735f66726573685f7570646174651270617273655f646174615f736f75726365731170726963655f666565645f6578697374730c7570646174655f6361636865217570646174655f70726963655f666565645f66726f6d5f73696e676c655f76616104436f696e094170746f73436f696e127570646174655f70726963655f66656564731b7570646174655f70726963655f66656564735f69665f6672657368277570646174655f70726963655f66656564735f69665f66726573685f776974685f66756e6465721e7570646174655f70726963655f66656564735f776974685f66756e6465720b6e6f775f7365636f6e64730d6765745f74696d657374616d70127374616c655f70726963655f757064617465156765745f6c61746573745f70726963655f696e666f095072696365466565640e6765745f70726963655f66656564136765745f626173655f7570646174655f66656517636c61696d5f7369676e65725f6361706162696c6974791d6372656174655f7369676e65725f776974685f6361706162696c6974790f45787465726e616c416464726573730a66726f6d5f6279746573036e65770a616464726573735f6f661569735f6163636f756e745f72656769737465726564087265676973746572146765745f70726963655f6964656e7469666965723b646174615f736f757263655f656d69747465725f616464726573735f616e645f636861696e5f6964735f646966666572656e745f6c656e677468731170726963655f696e666f5f6361636865640869735f656d707479157365745f6c61746573745f70726963655f696e666f106e6f775f6d6963726f7365636f6e647316656d69745f70726963655f666565645f757064617465035641411070617273655f616e645f76657269667903553136116765745f656d69747465725f636861696e06746f5f753634136765745f656d69747465725f616464726573731469735f76616c69645f646174615f736f7572636513696e76616c69645f646174615f736f757263650764657374726f7915426174636850726963654174746573746174696f6e0b646573657269616c697a650576616c756510696e73756666696369656e745f666565076465706f7369741c696e76616c69645f7075626c6973685f74696d65735f6c656e6774680d66726f6d5f627974655f7665630d6e6f5f66726573685f646174610877697468647261777e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b38700000000000000000000000000000000000000000000000000000000000000015bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625b31e712b26fd295357355f6845e77c888298636609e93bc9b05f0f604049f43405207e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b38700000000030d0a000a0124030505090b000b0117020b010b00170201000000010c11150b00111611000c020b020b0123030b111727020201000003040b0011181103020301000005080b0011040c020e020b0111010b02020401000015070b0011190c010e01111a111b020501000003040b0011181106020601000005080b0011070c020e020b0111010b02020701000015070b0011190c010e01111a111c02080100000302111802090100000305111d0b00410f18020a010400170e0b000700111e0c070b070b010b020b030b040b05110d0b06110b020b00000019180e00111f0c060e060b010b050b020b03112011210b040b0011220e0611230e061124380020031505170e063801020c00000022210b00111a0c040a04111c0c010e0111160c060b0411270c050a0514110e20031205160b050108020b051411070c020e0211160c030b060b0324020d00000024250e0041010e01410f210308112827401d00000000000000000c030600000000000000000c020a020e00410123031205230d030e000a024201140e010a02420f1411201121441d0b02060100000000000000160c02050c0b03020e01000003030b001129020f030000251e0e003802200305051b0d0045150c030e03110c030c051a0e03111a140c010e0111270c020b02140b03112b0b01112c112d05000b0046150000000000000000021000000029130b00112e0c010e01112f11300e01113111211132030d1133270b01113411351136110f021101000003150e0011090e01380325030811382707000b0138040e00380520031005140d00450f1110050b02120104002f3e0e01410f0e024101210308113a27090c060600000000000000000c070a070e02410123031205360e010a07420f14113b0c080a08112920031d0520080c0605360b0811070c040e0411160c050b050e020a0742011423032e0531080c0605360b07060100000000000000160c07050c0b06033a113c270b000b0311110213010400300b0b000e01110938060c040b010b020b030b041112021401040030090b000e01110938060c020b010b0211110200","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"pyth","friends":[],"exposed_functions":[{"name":"get_ema_price","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"]},{"name":"get_ema_price_no_older_than","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier","u64"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"]},{"name":"get_ema_price_unsafe","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"]},{"name":"get_price","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"]},{"name":"get_price_no_older_than","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier","u64"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"]},{"name":"get_price_unsafe","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"]},{"name":"get_stale_price_threshold_secs","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"get_update_fee","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&vector<vector<u8>>"],"return":["u64"]},{"name":"init","visibility":"public","is_entry":true,"generic_type_params":[],"params":["&signer","u64","u64","vector<u8>","vector<u64>","vector<vector<u8>>","u64"],"return":[]},{"name":"price_feed_exists","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier"],"return":["bool"]},{"name":"update_cache","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["vector<0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_info::PriceInfo>"],"return":[]},{"name":"update_price_feeds","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<vector<u8>>","0x1::coin::Coin<0x1::aptos_coin::AptosCoin>"],"return":[]},{"name":"update_price_feeds_if_fresh","visibility":"public","is_entry":true,"generic_type_params":[],"params":["vector<vector<u8>>","vector<vector<u8>>","vector<u64>","0x1::coin::Coin<0x1::aptos_coin::AptosCoin>"],"return":[]},{"name":"update_price_feeds_if_fresh_with_funder","visibility":"public","is_entry":true,"generic_type_params":[],"params":["&signer","vector<vector<u8>>","vector<vector<u8>>","vector<u64>"],"return":[]},{"name":"update_price_feeds_with_funder","visibility":"public","is_entry":true,"generic_type_params":[],"params":["&signer","vector<vector<u8>>"],"return":[]}],"structs":[]}},{"bytecode":"0xa11ceb0b050000000601000403049b01059f010307a201e105088307400cc307c20300000100000100010000020001000003000100000400010000050001000006000100000700010000080001000009000100000a000100000b000100000c000100000d000100000e000100000f0001000010000100001100010000120001000013000100001400010000150001000016000100001700010000180001000019000100011a010100011b010100011c010100011d010100011e010100011f010100000103056572726f723b646174615f736f757263655f656d69747465725f616464726573735f616e645f636861696e5f6964735f646966666572656e745f6c656e6774687329676f7665726e616e63655f636f6e74726163745f757067726164655f636861696e5f69645f7a65726f1b696e636f72726563745f6964656e7469666965725f6c656e67746810696e73756666696369656e745f6665651f696e76616c69645f6174746573746174696f6e5f6d616769635f76616c756525696e76616c69645f62617463685f6174746573746174696f6e5f6865616465725f73697a6513696e76616c69645f646174615f736f7572636519696e76616c69645f676f7665726e616e63655f616374696f6e1e696e76616c69645f676f7665726e616e63655f646174615f736f757263651e696e76616c69645f676f7665726e616e63655f6d616769635f76616c756519696e76616c69645f676f7665726e616e63655f6d6f64756c6522696e76616c69645f676f7665726e616e63655f73657175656e63655f6e756d62657222696e76616c69645f676f7665726e616e63655f7461726765745f636861696e5f696413696e76616c69645f686173685f6c656e67746814696e76616c69645f70726963655f7374617475731c696e76616c69645f7075626c6973685f74696d65735f6c656e67746814696e76616c69645f757067726164655f68617368136d61676e69747564655f746f6f5f6c617267650e6e656761746976655f76616c75650d6e6f5f66726573685f64617461086f766572666c6f770e706f7369746976655f76616c7565127374616c655f70726963655f75706461746514756e617574686f72697a65645f7570677261646512756e6b6e6f776e5f70726963655f6665656410696e76616c69645f617267756d656e740d696e76616c69645f73746174650e616c72656164795f6578697374730c6f75745f6f665f72616e6765117065726d697373696f6e5f64656e696564096e6f745f666f756e647e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b3870000000000000000000000000000000000000000000000000000000000000001000100000003061900000000000000111902010100000003061600000000000000111902020100000003060200000000000000111902030100000003060600000000000000111902040100000003061800000000000000111902050100000003061200000000000000111902060100000003060300000000000000111902070100000003061000000000000000111902080100000003060e000000000000001119020901000000030614000000000000001119020a0100000003060c000000000000001119020b0100000003060f000000000000001119020c0100000003060d000000000000001119020d0100000003060b000000000000001119020e01000000030617000000000000001119020f0100000003060500000000000000111902100100000003060a00000000000000111902110100000003061500000000000000111902120100000003060100000000000000111a02130100000003060700000000000000111b02140100000003061100000000000000111c02150100000003061300000000000000111a02160100000003060400000000000000111b02170100000003060900000000000000111d02180100000003060800000000000000111e0200","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"error","friends":[],"exposed_functions":[{"name":"data_source_emitter_address_and_chain_ids_different_lengths","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"governance_contract_upgrade_chain_id_zero","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"incorrect_identifier_length","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"insufficient_fee","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"invalid_attestation_magic_value","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"invalid_batch_attestation_header_size","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"invalid_data_source","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"invalid_governance_action","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"invalid_governance_data_source","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"invalid_governance_magic_value","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"invalid_governance_module","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"invalid_governance_sequence_number","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"invalid_governance_target_chain_id","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"invalid_hash_length","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"invalid_price_status","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"invalid_publish_times_length","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"invalid_upgrade_hash","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"magnitude_too_large","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"negative_value","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"no_fresh_data","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"overflow","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"positive_value","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"stale_price_update","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"unauthorized_upgrade","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"unknown_price_feed","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]}],"structs":[]}},{"bytecode":"0xa11ceb0b050000000c010008020812031a1604300405341e07529c0108ee014006ae02220ad002110ce1022b0d8c03020f8e030200010102010100030004060000050c0003060700020a0401060100070001000008020100020b05010106010c0206010602040304020802030001060c0107080101080002070b030109000900010b030109000470797468056576656e74076163636f756e740a70726963655f666565640f5072696365466565645570646174651550726963654665656455706461746548616e646c650950726963654665656416656d69745f70726963655f666565645f75706461746504696e69740974696d657374616d700b4576656e7448616e646c650a656d69745f6576656e74106e65775f6576656e745f68616e646c657e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387000000000000000000000000000000000000000000000000000000000000000105207e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b3870002020308020903010201010b030108000003000101030a07002a010c020b020f000b000b0112003800020103000001060a000b00380112012d01020100000000","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"event","friends":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::pyth"],"exposed_functions":[{"name":"emit_price_feed_update","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_feed::PriceFeed","u64"],"return":[]},{"name":"init","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["&signer"],"return":[]}],"structs":[{"name":"PriceFeedUpdate","is_native":false,"abilities":["drop","store"],"generic_type_params":[],"fields":[{"name":"price_feed","type":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_feed::PriceFeed"},{"name":"timestamp","type":"u64"}]},{"name":"PriceFeedUpdateHandle","is_native":false,"abilities":["store","key"],"generic_type_params":[],"fields":[{"name":"event","type":"0x1::event::EventHandle<0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::event::PriceFeedUpdate>"}]}]}},{"bytecode":"0xa11ceb0b0500000009010004020408030c19052514073956088f01200aaf010d0cbc01410dfd010800000001000207000104070000030001000005000200000600020000070001000008030400010608000103010801040801030801030108000005707269636503693634055072696365086765745f636f6e6603493634086765745f6578706f096765745f70726963650d6765745f74696d657374616d70036e657704636f6e66046578706f0974696d657374616d707e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b38700020400080109030a08010b030001000005040b00100014020101000005040b00100114020201000005040b00100214020301000005040b00100314020401000005060b000b010b020b03120002000100020000000300","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"price","friends":[],"exposed_functions":[{"name":"get_conf","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"],"return":["u64"]},{"name":"get_expo","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::i64::I64"]},{"name":"get_price","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::i64::I64"]},{"name":"get_timestamp","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"],"return":["u64"]},{"name":"new","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::i64::I64","u64","0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::i64::I64","u64"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"]}],"structs":[{"name":"Price","is_native":false,"abilities":["copy","drop","store"],"generic_type_params":[],"fields":[{"name":"price","type":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::i64::I64"},{"name":"conf","type":"u64"},{"name":"expo","type":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::i64::I64"},{"name":"timestamp","type":"u64"}]}]}},{"bytecode":"0xa11ceb0b050000000c01001402144203569e0104f40112058602a10107a703e507088c0b4006cc0b220aee0b350ca30cd1030df40f0e0f82100e000701080109010a000b000c000d000e000f00100011080000120800001308000014080000150800001608000017080000180800041a0600081d0700071e07000521070001170600092f0401030002330402030100010019000100001b000200001c000100001f03040000200001000022050000002306070000240607000025030700002600080000270100000028020000000309000000040600000029010000002a0a0000002b0100000636000100063700010002380d0e020300093900100103033a11070100093b1200010302390013020304093c14070103023c0d07020300013d160800093e19000103023f1d00020302130a140615061606170a1806190a1b061c0a00010301080801080a01080906060c0303080b0a080b080c01080b0101010c010a080b02080a0809010608040106080502060b0e0209000901090001060901010b0d01080b010b0d01090001060a090002070b0d0109000900010b0e020900090102060b0d0109000900010608030106080c0107080001070b0d01080b01070b0d01090001070803010708040107080503070b0e0209000901090009010107080710636f6e74726163745f757067726164650a676f7665726e616e63650470797468107365745f646174615f736f75726365731a7365745f676f7665726e616e63655f646174615f736f75726365197365745f7374616c655f70726963655f7468726573686f6c640e7365745f7570646174655f666565057374617465076163636f756e74057461626c6506766563746f7215636f6e74726163745f757067726164655f686173680b646174615f736f75726365056572726f721070726963655f6964656e7469666965720a70726963655f696e666f037365740d4261736555706461746546656519436f6e747261637455706772616465417574686f72697a65640b44617461536f757263657314476f7665726e616e636544617461536f757263651e4c6173744578656375746564476f7665726e616e636553657175656e63650f4c61746573745072696365496e666f105369676e65724361706162696c697479135374616c6550726963655468726573686f6c64136765745f626173655f7570646174655f6665650448617368246765745f636f6e74726163745f757067726164655f617574686f72697a65645f68617368256765745f6c6173745f65786563757465645f676f7665726e616e63655f73657175656e6365095072696365496e666f0f50726963654964656e746966696572156765745f6c61746573745f70726963655f696e666f1e6765745f7374616c655f70726963655f7468726573686f6c645f736563730a44617461536f7572636504696e69741469735f76616c69645f646174615f736f757263651f69735f76616c69645f676f7665726e616e63655f646174615f736f757263651170726963655f696e666f5f6361636865640b707974685f7369676e6572137365745f626173655f7570646174655f666565247365745f636f6e74726163745f757067726164655f617574686f72697a65645f68617368257365745f6c6173745f65786563757465645f676f7665726e616e63655f73657175656e6365157365745f6c61746573745f70726963655f696e666f1e7365745f7374616c655f70726963655f7468726573686f6c645f7365637303666565046861736807736f75726365730353657406736f757263650873657175656e636504696e666f055461626c65117369676e65725f6361706162696c6974790e7468726573686f6c645f7365637314756e617574686f72697a65645f7570677261646512756e6b6e6f776e5f70726963655f6665656406626f72726f77036e65770869735f656d7074790361646408636f6e7461696e731d6372656174655f7369676e65725f776974685f6361706162696c69747905656d707479067570736572747e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387000000000000000000000000000000000000000000000000000000000000000105207e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b3870002012c030102012d08080202012e0b0d01080b03020130080b0402013103050201320b0e02080a080906020134080c07020135030001000100000507002b00100014020101000101020b07002901030511112707002c0113010c000b000202010001040b0707002b040c000b001001140203010001050c0e0a001108030511122707002b050c010b0110020b00380014020401000107000507002b0710031402050300000f290a000b0112072d070a000b0212002d0038010c060e04380220030f05140d060d0445063803050a0a000b0612022d020a000b0312032d030a0006000000000000000012042d040a000b0512062d060b00380412052d05020601000102000607002b0210040b003805020701000103150907002b030c010b011005140b00210208010001050c0807002b050c010b0110020b003806020903000106000507002b061006111a020a03000100170807002a000c010b000b010f0015020b0300020106080f070029010304050807002c0113010111090c010e010b0012012d01020c03000102181307002a020f040c010a0138070e00380220030b05100a010d004506380305060b0101020d030001031a0807002a030c010b000b010f0515020e030001041b0807002a040c010b000b010f0115020f030001051c0907002a050c020b020f020b000b0138080210030001071e0807002a070c010b000b010f0315020000040005000700020003000600000000010002000300040005000600","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"state","friends":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::contract_upgrade","0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance","0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::pyth","0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set_data_sources","0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set_governance_data_source","0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set_stale_price_threshold","0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set_update_fee"],"exposed_functions":[{"name":"get_base_update_fee","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"get_contract_upgrade_authorized_hash","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::contract_upgrade_hash::Hash"]},{"name":"get_last_executed_governance_sequence","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"get_latest_price_info","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_info::PriceInfo"]},{"name":"get_stale_price_threshold_secs","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["u64"]},{"name":"init","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["&signer","u64","u64","0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::data_source::DataSource","vector<0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::data_source::DataSource>","0x1::account::SignerCapability"],"return":[]},{"name":"is_valid_data_source","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::data_source::DataSource"],"return":["bool"]},{"name":"is_valid_governance_data_source","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::data_source::DataSource"],"return":["bool"]},{"name":"price_info_cached","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier"],"return":["bool"]},{"name":"pyth_signer","visibility":"friend","is_entry":false,"generic_type_params":[],"params":[],"return":["signer"]},{"name":"set_base_update_fee","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["u64"],"return":[]},{"name":"set_contract_upgrade_authorized_hash","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::contract_upgrade_hash::Hash"],"return":[]},{"name":"set_data_sources","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["vector<0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::data_source::DataSource>"],"return":[]},{"name":"set_governance_data_source","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::data_source::DataSource"],"return":[]},{"name":"set_last_executed_governance_sequence","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["u64"],"return":[]},{"name":"set_latest_price_info","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier","0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_info::PriceInfo"],"return":[]},{"name":"set_stale_price_threshold_secs","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["u64"],"return":[]}],"structs":[{"name":"BaseUpdateFee","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"fee","type":"u64"}]},{"name":"ContractUpgradeAuthorized","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"hash","type":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::contract_upgrade_hash::Hash"}]},{"name":"DataSources","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"sources","type":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::set::Set<0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::data_source::DataSource>"}]},{"name":"GovernanceDataSource","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"source","type":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::data_source::DataSource"}]},{"name":"LastExecutedGovernanceSequence","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"sequence","type":"u64"}]},{"name":"LatestPriceInfo","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"info","type":"0x1::table::Table<0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier, 0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_info::PriceInfo>"}]},{"name":"SignerCapability","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"signer_capability","type":"0x1::account::SignerCapability"}]},{"name":"StalePriceThreshold","is_native":false,"abilities":["key"],"generic_type_params":[],"fields":[{"name":"threshold_secs","type":"u64"}]}]}},{"bytecode":"0xa11ceb0b050000000701001c021c180334960105ca013107fb01cc0608c708400c8709bd010000010101020103000400050006000700080009000a000b000c000d030f0000071103000812000002200f000123070005250700000e000100001000020003130200000814000400081505060007160106000817050700061801070008130400000419000100071a0106000a19000100071b0106000919000100071c0106000c19000100071d010600061e0107000b19000100031f0002000321090a0002220a07000324090b0005260c0d000d270d0e00062801070003290907000d2a010700062b0107000d2c070100010a02000108000308010802080001080201060802010801010302080003010608000108030108040203080401080501010a676f7665726e616e63651065787465726e616c5f61646472657373037531360376616110636f6e74726163745f757067726164650b646174615f736f75726365056572726f7211676f7665726e616e63655f616374696f6e16676f7665726e616e63655f696e737472756374696f6e107365745f646174615f736f75726365731a7365745f676f7665726e616e63655f646174615f736f75726365197365745f7374616c655f70726963655f7468726573686f6c640e7365745f7570646174655f6665650573746174651e657865637574655f676f7665726e616e63655f696e737472756374696f6e035641411f70617273655f616e645f7665726966795f676f7665726e616e63655f76616110476f7665726e616e6365416374696f6e15476f7665726e616e6365496e737472756374696f6e0764657374726f790d66726f6d5f627974655f7665630a6765745f616374696f6e146e65775f636f6e74726163745f75706772616465136765745f7461726765745f636861696e5f696429676f7665726e616e63655f636f6e74726163745f757067726164655f636861696e5f69645f7a65726f07657865637574651e6e65775f7365745f676f7665726e616e63655f646174615f736f75726365146e65775f7365745f646174615f736f7572636573126e65775f7365745f7570646174655f6665651d6e65775f7365745f7374616c655f70726963655f7468726573686f6c6419696e76616c69645f676f7665726e616e63655f616374696f6e1070617273655f616e645f76657269667903553136116765745f656d69747465725f636861696e06746f5f7536340f45787465726e616c41646472657373136765745f656d69747465725f616464726573730a44617461536f75726365036e65771f69735f76616c69645f676f7665726e616e63655f646174615f736f757263651e696e76616c69645f676f7665726e616e63655f646174615f736f757263650c6765745f73657175656e6365256765745f6c6173745f65786563757465645f676f7665726e616e63655f73657175656e636522696e76616c69645f676f7665726e616e63655f73657175656e63655f6e756d626572257365745f6c6173745f65786563757465645f676f7665726e616e63655f73657175656e63657e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b3875bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e196250001040003420b0011010c030b03110211030c020e0211040c010a01110521030f051a0e0211060600000000000000002203161107270b021108110905410a01110a21031f05230b021108110b05410a01110c210328052c0b021108110d05410a01110e21033105350b021108110f05410b01111021033e0b021108011111270b02110811120201000000081a0b0011130c010e01111411150e01111611171118030d1119270e01111a0c020a02111b240316111c270b02111d0b010200","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"governance","friends":[],"exposed_functions":[{"name":"execute_governance_instruction","visibility":"public","is_entry":true,"generic_type_params":[],"params":["vector<u8>"],"return":[]}],"structs":[]}},{"bytecode":"0xa11ceb0b050000000901000602060c031214052616073c7d08b901200ad9010c0ce501320d9702060000000100020003070001040700020707000005000100000600010000080002000009030400010608000108010106080203080208010801010800000a70726963655f666565640570726963651070726963655f6964656e746966696572095072696365466565640550726963650d6765745f656d615f7072696365096765745f70726963650f50726963654964656e746966696572146765745f70726963655f6964656e746966696572036e657709656d615f70726963657e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b3870002030208020108010a08010001000005040b00100014020101000005040b00100114020201000005030b001002020301000005050b000b010b0212000200020001000000","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"price_feed","friends":[],"exposed_functions":[{"name":"get_ema_price","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_feed::PriceFeed"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"]},{"name":"get_price","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_feed::PriceFeed"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"]},{"name":"get_price_identifier","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_feed::PriceFeed"],"return":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier"]},{"name":"new","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier","0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price","0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_feed::PriceFeed"]}],"structs":[{"name":"PriceFeed","is_native":false,"abilities":["copy","drop","store"],"generic_type_params":[],"fields":[{"name":"price_identifier","type":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier"},{"name":"price","type":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"},{"name":"ema_price","type":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price::Price"}]}]}},{"bytecode":"0xa11ceb0b0500000009010004020408030c140520130733810108b401200ad4010a0cde01320d9002060000000100020700010507000003000100000400010000060002000007030400010608000103010608010303030801010800000a70726963655f696e666f0a70726963655f66656564095072696365496e666f106765745f6172726976616c5f74696d65146765745f6174746573746174696f6e5f74696d65095072696365466565640e6765745f70726963655f66656564036e6577106174746573746174696f6e5f74696d650c6172726976616c5f74696d657e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387000203080309030108010001000005040b00100014020101000005040b00100114020201000005030b001002020301000005050b000b010b0212000200010000000200","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"price_info","friends":[],"exposed_functions":[{"name":"get_arrival_time","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_info::PriceInfo"],"return":["u64"]},{"name":"get_attestation_time","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_info::PriceInfo"],"return":["u64"]},{"name":"get_price_feed","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_info::PriceInfo"],"return":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_feed::PriceFeed"]},{"name":"new","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u64","u64","0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_feed::PriceFeed"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_info::PriceInfo"]}],"structs":[{"name":"PriceInfo","is_native":false,"abilities":["copy","drop","store"],"generic_type_params":[],"fields":[{"name":"attestation_time","type":"u64"},{"name":"arrival_time","type":"u64"},{"name":"price_feed","type":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_feed::PriceFeed"}]}]}},{"bytecode":"0xa11ceb0b0500000008010004020408030c0505110807195a0873400ab301080cbb010d000001010002070001030700000400010002030801010800000b646174615f736f757263651065787465726e616c5f616464726573730a44617461536f757263650f45787465726e616c41646472657373036e65770d656d69747465725f636861696e0f656d69747465725f616464726573737e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b3875bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e1962500020205030608010001000002040b000b0112000200","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"data_source","friends":[],"exposed_functions":[{"name":"new","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u64","0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::data_source::DataSource"]}],"structs":[{"name":"DataSource","is_native":false,"abilities":["copy","drop","store"],"generic_type_params":[],"fields":[{"name":"emitter_chain","type":"u64"},{"name":"emitter_address","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress"}]}]}},{"bytecode":"0xa11ceb0b050000000701000c020c12031e4b056924078d01b40108c102400c81038c0100000101010001020103000405050700010600010000030f0f0004110f00000700010000080001000009000200000a000200000b000200000c000300000d040500050e02010002090008000310080200020a0009000410090200020b000200020c000300020d04050001070b0101020108000103010202070b01010203010a02040800030103000108020108030b646573657269616c697a6506637572736f720375313603753332036936340349363406437572736f720f646573657269616c697a655f6933320f646573657269616c697a655f6936340f646573657269616c697a655f7531360f646573657269616c697a655f7533320f646573657269616c697a655f7536340e646573657269616c697a655f753812646573657269616c697a655f766563746f720866726f6d5f7536340355313606746f5f753634035533327e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b3875bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e196250001000006190b0011030c020a02311f30060100000000000000210c030b03030c05140600000000ffffffff0b02160c040b0411070c0105170b0211070c010b01020101000007040b0011041107020201000007040b0011081109020301000007040b00110a110b020401000007030b00110c020501000007030b00110d020601000007040b000b01110e0200","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"deserialize","friends":[],"exposed_functions":[{"name":"deserialize_i32","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::i64::I64"]},{"name":"deserialize_i64","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::i64::I64"]},{"name":"deserialize_u16","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>"],"return":["u64"]},{"name":"deserialize_u32","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>"],"return":["u64"]},{"name":"deserialize_u64","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>"],"return":["u64"]},{"name":"deserialize_u8","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>"],"return":["u8"]},{"name":"deserialize_vector","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&mut 0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::cursor::Cursor<u8>","u64"],"return":["vector<u8>"]}],"structs":[]}},{"bytecode":"0xa11ceb0b050000000a01000402040403081905210a072b670892012006b201140ac601050ccb01370d820202000000010002070000030001000004020000000503010000060301000108030000010301080001060800000c70726963655f737461747573056572726f720b50726963655374617475730866726f6d5f7536340a6765745f7374617475730b6e65775f74726164696e670b6e65775f756e6b6e6f776e0673746174757314696e76616c69645f70726963655f7374617475737e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387030801000000000000000308000000000000000000020107030001000003090a0007002503061104270b001200020101000003040b001000140202010000030307001200020301000003030701120002000000","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"price_status","friends":[],"exposed_functions":[{"name":"from_u64","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u64"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_status::PriceStatus"]},{"name":"get_status","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_status::PriceStatus"],"return":["u64"]},{"name":"new_trading","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_status::PriceStatus"]},{"name":"new_unknown","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_status::PriceStatus"]}],"structs":[{"name":"PriceStatus","is_native":false,"abilities":["copy","drop","store"],"generic_type_params":[],"fields":[{"name":"status","type":"u64"}]}]}},{"bytecode":"0xa11ceb0b050000000b01000a020a0a03142a043e04054229076bc00108ab0260068b03120a9d03070ca403570ffb03020001010202030004000500060000020e00010000000700010000080203000009020400010c000100040d010300020f0809010003100a0100021109030100050707070203030103010a020001080003030303030b01010203030102010a0900010b0101090001070b0101020a676f7665726e616e63650e7365745f7570646174655f666565066d617468363406637572736f720b646573657269616c697a650573746174650c5365745570646174654665650e6170706c795f6578706f6e656e7407657865637574650d66726f6d5f627974655f766563086d616e7469737361086578706f6e656e7403706f77137365745f626173655f7570646174655f66656506437572736f7204696e69740f646573657269616c697a655f7536340d64657374726f795f656d7074797e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b38700000000000000000000000000000000000000000000000000000000000000015bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e196250410ffffffffffffffff00000000000000000002020a030b030000000003060b00060a000000000000000b011103180201030000050c0b00110213000c010c030b030b0111000c020b0211040202000000060f0b0038000c010d0111060c030d0111060c020b0138010b030b02120002000000","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"set_update_fee","friends":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance"],"exposed_functions":[{"name":"execute","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":[]}],"structs":[{"name":"SetUpdateFee","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"mantissa","type":"u64"},{"name":"exponent","type":"u64"}]}]}},{"bytecode":"0xa11ceb0b050000000b01001202120e03205f047f0a0589015207db01980308f3046006d3050a0add05060ce30585010fe80602000101020103010402050006000700080009000a0000050e0600041600010000000b000100000c020100000d020300000f0405000811010700071201080008130106000214090100081507010004170c0d010006180e0200050d02070004190d010100031a0f010100011b020200031c10050100031d11010100051e070200090b0c0b0d020f02100b020a020a0a0200010a02010800030a0a020a0208010101010c010801010303060c0a020a0a02020b02010208010102010a0900010b0201090002070b0201020301070a090001060a090002070a09000a09000a676f7665726e616e636510636f6e74726163745f757067726164650a6170746f735f6861736804636f646506766563746f7206637572736f7215636f6e74726163745f757067726164655f686173680b646573657269616c697a65056572726f7205737461746518417574686f72697a65436f6e74726163745570677261646513646f5f636f6e74726163745f7570677261646507657865637574650d66726f6d5f627974655f76656304486173680c6d6174636865735f686173680468617368246765745f636f6e74726163745f757067726164655f617574686f72697a65645f6861736814696e76616c69645f757067726164655f686173680b707974685f7369676e6572137075626c6973685f7061636b6167655f74786e247365745f636f6e74726163745f757067726164655f617574686f72697a65645f6861736806437572736f7204696e697412646573657269616c697a655f766563746f720d64657374726f795f656d7074790772657665727365096b656363616b3235360869735f656d70747906617070656e640764657374726f797e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b38700000000000000000000000000000000000000000000000000000000000000015bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e196250308200000000000000000020110080100010400060e0a010a0011041103030711052711060c020e020b000b011107020103000007070b00110213000c010b01110802020000000a0d0b0038000c010d010700110a110b0c020b0138010b021200020300000000180a000c040d0438020b01110e0c030e04380320030c05120d030d044502110e380405070b03110e0b0211112102000000","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"contract_upgrade","friends":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance"],"exposed_functions":[{"name":"do_contract_upgrade","visibility":"public","is_entry":true,"generic_type_params":[],"params":["vector<u8>","vector<vector<u8>>"],"return":[]},{"name":"execute","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":[]}],"structs":[{"name":"AuthorizeContractUpgrade","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"hash","type":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::contract_upgrade_hash::Hash"}]}]}},{"bytecode":"0xa11ceb0b050000000a01000402040403080f05170f0726610887012006a7010a0ab101060cb701230dda01020000000100020700000300010000040200000106030500010a020108000106080000010201031070726963655f6964656e746966696572056572726f720f50726963654964656e7469666965720d66726f6d5f627974655f766563096765745f62797465730562797465731b696e636f72726563745f6964656e7469666965725f6c656e6774687e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b38703082000000000000000000201050a0200010000030a0e00410407002103071102270b001200020101000003040b0010001402000000","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"price_identifier","friends":[],"exposed_functions":[{"name":"from_byte_vec","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier"]},{"name":"get_bytes","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_identifier::PriceIdentifier"],"return":["vector<u8>"]}],"structs":[{"name":"PriceIdentifier","is_native":false,"abilities":["copy","drop","store"],"generic_type_params":[],"fields":[{"name":"bytes","type":"vector<u8>"}]}]}},{"bytecode":"0xa11ceb0b050000000a01000c020c12031e3404520405563d079301f501088803400ac803070ccf03710fc0040200010102010300040005000600070000030b0700010c00010000020d0700000800010000090002000501030100010e06070100040f0805000410080a0004110b00000212000c0003130d090001140701010003050905010a0200010800010a0801060b02010202080303020a08010102010a0900010b0201090001070b020102010801010302070b02010203010803020308030a676f7665726e616e6365107365745f646174615f736f757263657306637572736f721065787465726e616c5f616464726573730b646174615f736f757263650b646573657269616c697a650573746174650e53657444617461536f757263657307657865637574650d66726f6d5f627974655f76656307736f75726365730a44617461536f7572636506437572736f720f45787465726e616c4164647265737304696e69740e646573657269616c697a655f75380f646573657269616c697a655f75313612646573657269616c697a655f766563746f720a66726f6d5f6279746573036e65770d64657374726f795f656d7074797e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b3875bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e196250002010a0a08010003000003070b00110113000c010b011102020100000004260b0038000c010d0111040c02400900000000000000000c0631000c050a050a0223030f05210d0111050c040d01062000000000000000110611070c030d060b040b03110844090b053101160c05050a0b0138010b06120002000000","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"set_data_sources","friends":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance"],"exposed_functions":[{"name":"execute","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":[]}],"structs":[{"name":"SetDataSources","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"sources","type":"vector<0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::data_source::DataSource>"}]}]}},{"bytecode":"0xa11ceb0b0500000009010004020404030823052b0a0735cb010880022006a0020f0aaf02050cb4025e0000000100020300000300010000040201000005020100000602010000070201000008020100010a0204000102010800000101010311676f7665726e616e63655f616374696f6e056572726f7210476f7665726e616e6365416374696f6e0766726f6d5f7538146e65775f636f6e74726163745f75706772616465146e65775f7365745f646174615f736f75726365731e6e65775f7365745f676f7665726e616e63655f646174615f736f757263651d6e65775f7365745f7374616c655f70726963655f7468726573686f6c64126e65775f7365745f7570646174655f6665650576616c756519696e76616c69645f676f7665726e616e63655f616374696f6e7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387020100020102020101020104020103000201090200010000031307000a00250305050a0a000703250c01050c090c010b0103101106270b001200020101000002030700120002020100000203070112000203010000020307021200020401000002030703120002050100000203070412000200","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"governance_action","friends":[],"exposed_functions":[{"name":"from_u8","visibility":"public","is_entry":false,"generic_type_params":[],"params":["u8"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_action::GovernanceAction"]},{"name":"new_contract_upgrade","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_action::GovernanceAction"]},{"name":"new_set_data_sources","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_action::GovernanceAction"]},{"name":"new_set_governance_data_source","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_action::GovernanceAction"]},{"name":"new_set_stale_price_threshold","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_action::GovernanceAction"]},{"name":"new_set_update_fee","visibility":"public","is_entry":false,"generic_type_params":[],"params":[],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_action::GovernanceAction"]}],"structs":[{"name":"GovernanceAction","is_native":false,"abilities":["copy","drop"],"generic_type_params":[],"fields":[{"name":"value","type":"u8"}]}]}},{"bytecode":"0xa11ceb0b050000000801000402040403080f05170b0722500872200a9201060c98012d0000000100020600000300010000040100000106020400010800010a02000102010315636f6e74726163745f757067726164655f68617368056572726f7204486173680764657374726f790d66726f6d5f627974655f766563046861736813696e76616c69645f686173685f6c656e6774687e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387000201050a020001000001050b0013000c010b010201010000020a0e0041030620000000000000002103071102270b0012000200","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"contract_upgrade_hash","friends":[],"exposed_functions":[{"name":"destroy","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::contract_upgrade_hash::Hash"],"return":["vector<u8>"]},{"name":"from_byte_vec","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::contract_upgrade_hash::Hash"]}],"structs":[{"name":"Hash","is_native":false,"abilities":["drop","store"],"generic_type_params":[],"fields":[{"name":"hash","type":"vector<u8>"}]}]}},{"bytecode":"0xa11ceb0b050000000b01000e020e12032057047704057b3e07b901a20308db0440069b050b0aa6050d0cb305cb010dfe0606000001010102010300040005000600070000060a0300011300010000031c0f0000080001000009010000000b020300000c020400000d020500000e02060001140809010004150a0100051606050004170b0400061804030004190b0500011a09080100051b060500021d060d00031e0d0500051f06050006040c04010800010a020106080001080101020103000708010b02010208000a02020a0203010a0900010b0201090002070b0201020301070b02010202010301080316676f7665726e616e63655f696e737472756374696f6e06637572736f72057374617465037531360b646573657269616c697a65056572726f7211676f7665726e616e63655f616374696f6e15476f7665726e616e6365496e737472756374696f6e0764657374726f790d66726f6d5f627974655f76656310476f7665726e616e6365416374696f6e0a6765745f616374696f6e0a6765745f6d6f64756c65136765745f7461726765745f636861696e5f69640876616c6964617465076d6f64756c655f06616374696f6e0f7461726765745f636861696e5f6964077061796c6f616406437572736f7204696e697412646573657269616c697a655f766563746f721e696e76616c69645f676f7665726e616e63655f6d616769635f76616c75650e646573657269616c697a655f75380766726f6d5f75380f646573657269616c697a655f753136047265737419696e76616c69645f676f7665726e616e63655f6d6f64756c65035531360c6765745f636861696e5f696406746f5f75363422696e76616c69645f676f7665726e616e63655f7461726765745f636861696e5f69647e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b3875bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e196250a0205045054474d0201010002040f021008011103120a020001000001080b0013000c010101010b01020101000007240b0038000c020d0206040000000000000011070c040b04070021030d1108270d0211090c050d021109110a0c010d02110b0c070b0238010c060b050b010b070b0612000c030e0311050b03020201000006040b00100014020301000006040b00100114020401000006040b0010021402050000000c200a00100114070121030a0b0001110d270b001002140c020a02110e110f2103140517080c01051b0b02060000000000000000210c010b01031f1110270200010000000200","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"governance_instruction","friends":[],"exposed_functions":[{"name":"destroy","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_instruction::GovernanceInstruction"],"return":["vector<u8>"]},{"name":"from_byte_vec","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_instruction::GovernanceInstruction"]},{"name":"get_action","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_instruction::GovernanceInstruction"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_action::GovernanceAction"]},{"name":"get_module","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_instruction::GovernanceInstruction"],"return":["u8"]},{"name":"get_target_chain_id","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_instruction::GovernanceInstruction"],"return":["u64"]}],"structs":[{"name":"GovernanceInstruction","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"module_","type":"u8"},{"name":"action","type":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance_action::GovernanceAction"},{"name":"target_chain_id","type":"u64"},{"name":"payload","type":"vector<u8>"}]}]}},{"bytecode":"0xa11ceb0b050000000b010016021626033c7a04b6010405ba019c0107d6029b0508f1076006d1080a0adb081b0cf608f5030deb0c040000010102020003000400050006000700080009000a000b0000000c0000020d00010000090f07000625070005260700082707000a280700073107000003000100000e0203000010020400001101050000120607000013080900021d0c0d0100031e020700031f0f000002200d0e0100032102070004220e07000323020b0004240e07000829001200032a021300032b020700032c0213000a2d071400062e1516000a2f0e140001300e0700072e171800092e190400060b090b010a0201080001070b020102010801010803010a08030106080001030206080003010608030d080103030a08030a0203030b0201020801030308030a08030102010a0900010b020109000002070b020102030c03030303020a020303020303031103030a02030308040308050308050308050308050806030807010806010805010807040805030805030108040308060804080401080803030308081762617463685f70726963655f6174746573746174696f6e0974696d657374616d7006637572736f720b646573657269616c697a65056572726f72036936340570726963650a70726963655f666565641070726963655f6964656e7469666965720a70726963655f696e666f0c70726963655f73746174757315426174636850726963654174746573746174696f6e0648656164657206437572736f7212646573657269616c697a655f686561646572095072696365496e666f16646573657269616c697a655f70726963655f696e666f0764657374726f79156765745f6174746573746174696f6e5f636f756e740e6765745f70726963655f696e666f06686561646572106174746573746174696f6e5f73697a65116174746573746174696f6e5f636f756e740b70726963655f696e666f73056d616769630d76657273696f6e5f6d616a6f720d76657273696f6e5f6d696e6f720b6865616465725f73697a650a7061796c6f61645f696404696e69740f646573657269616c697a655f75313612646573657269616c697a655f766563746f720d64657374726f795f656d7074790f646573657269616c697a655f7533321f696e76616c69645f6174746573746174696f6e5f6d616769635f76616c75650e646573657269616c697a655f753825696e76616c69645f62617463685f6174746573746174696f6e5f6865616465725f73697a65055072696365034936340f50726963654964656e7469666965720b50726963655374617475730d66726f6d5f627974655f7665630f646573657269616c697a655f6936340f646573657269616c697a655f7536340f646573657269616c697a655f6933320866726f6d5f753634036e65770b6e65775f74726164696e670b6e6f775f7365636f6e6473095072696365466565647e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b38700000000000000000000000000000000000000000000000000000000000000015bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e196250308485732500000000000020414080115031603170a0803010205180319031a031b031c02000100000a360b0038000c080d0811010c090d0811070c060d0811070c07400400000000000000000c0d0600000000000000000c0a0a0a0a0623031505260d0811020c0c0d0d0b0c44040d080a07069500000000000000171108010b0a060100000000000000160c0a05100b0838010b090c010b060c020b070c030b0d0c040b010b030b020b041200020100000010380a00110a0c080a08070021030b0b0001110b270a0011070c0b0a0011070c0c0a0011070c070a00110c0c090a0706010000000000000026031f0b0001110d270a07060100000000000000170c0a0b000b0a1108010b080c010b070c020b0c0c030b0b0c040b090c050b010b040b030b020b051201020200000011580a000620000000000000001108010a000620000000000000001108110e0c0f0a00110f0c0e0a0011100c050a0011110c0a0a00110f0c080a0011100c070a00110c3411120c110a00110a010a00110a010a0011100c040a0011100c100a0011100c0d0a00110f0c0c0b0011100c0b0b0e0b050a0a0a1011130c060a11111422033d05430b0c0b0b0a0a0a0d11130c060b100c090b11111422034a054c0b0d0c090b0411150b0f0b060b080b070b0a0b091113111611170203010000050d0b0013000c010101130101010101010b0102040100000e040b0010001402050100000e050b0010010b014204020002000300","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"batch_price_attestation","friends":[],"exposed_functions":[{"name":"deserialize","visibility":"public","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::batch_price_attestation::BatchPriceAttestation"]},{"name":"destroy","visibility":"public","is_entry":false,"generic_type_params":[],"params":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::batch_price_attestation::BatchPriceAttestation"],"return":["vector<0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_info::PriceInfo>"]},{"name":"get_attestation_count","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::batch_price_attestation::BatchPriceAttestation"],"return":["u64"]},{"name":"get_price_info","visibility":"public","is_entry":false,"generic_type_params":[],"params":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::batch_price_attestation::BatchPriceAttestation","u64"],"return":["&0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_info::PriceInfo"]}],"structs":[{"name":"BatchPriceAttestation","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"header","type":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::batch_price_attestation::Header"},{"name":"attestation_size","type":"u64"},{"name":"attestation_count","type":"u64"},{"name":"price_infos","type":"vector<0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::price_info::PriceInfo>"}]},{"name":"Header","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"magic","type":"u64"},{"name":"version_major","type":"u64"},{"name":"version_minor","type":"u64"},{"name":"header_size","type":"u64"},{"name":"payload_id","type":"u8"}]}]}},{"bytecode":"0xa11ceb0b050000000a01000802080a0312200432040536210757be01089502400ad502050cda022e0f880302000101020003000400050000010a00010000000600010000070002000309030100010b06070100020c080300010d0701010003050505010a02000108000103020b010102030102010a0900010b0101090001070b0101020a676f7665726e616e6365197365745f7374616c655f70726963655f7468726573686f6c6406637572736f720b646573657269616c697a65057374617465165365745374616c6550726963655468726573686f6c6407657865637574650d66726f6d5f627974655f766563097468726573686f6c641e7365745f7374616c655f70726963655f7468726573686f6c645f7365637306437572736f7204696e69740f646573657269616c697a655f7536340d64657374726f795f656d7074797e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b3875bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e1962500020108030003000003070b00110113000c010b0111020201000000040b0b0038000c010d0111040c020b0138010b02120002000000","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"set_stale_price_threshold","friends":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance"],"exposed_functions":[{"name":"execute","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":[]}],"structs":[{"name":"SetStalePriceThreshold","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"threshold","type":"u64"}]}]}},{"bytecode":"0xa11ceb0b050000000a01000c020c12031e39045704055b3a079501d90208ee03400aae040a0cb804550f8d050200010102010300040005000600070000020c0700030e070001110001000000080001000009000200030f040500050105010005100601000112090a010004130b060004140c00000215000d0004160b060001170a01010005080a08010a02000108000308010303020308010108020103040b030102080103030102010a0900010b0301090001070b03010202070b030102030108010a676f7665726e616e63651a7365745f676f7665726e616e63655f646174615f736f7572636506637572736f721065787465726e616c5f616464726573730b646174615f736f757263650b646573657269616c697a6505737461746517536574476f7665726e616e636544617461536f7572636507657865637574650d66726f6d5f627974655f76656310656d69747465725f636861696e5f69640f656d69747465725f616464726573730f45787465726e616c4164647265737310696e697469616c5f73657175656e63650a44617461536f75726365036e6577257365745f6c6173745f65786563757465645f676f7665726e616e63655f73657175656e636506437572736f7204696e69740f646573657269616c697a655f75313612646573657269616c697a655f766563746f720a66726f6d5f62797465730f646573657269616c697a655f7536340d64657374726f795f656d7074797e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b3875bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e196250002030a030b08010d0300030000030d0b00110113000c030c010c020b020b01110211030b031104020100000007150b0038000c010d0111060c030d01062000000000000000110711080c020d0111090c040b0138010b030b020b04120002000000","abi":{"address":"0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387","name":"set_governance_data_source","friends":["0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387::governance"],"exposed_functions":[{"name":"execute","visibility":"friend","is_entry":false,"generic_type_params":[],"params":["vector<u8>"],"return":[]}],"structs":[{"name":"SetGovernanceDataSource","is_native":false,"abilities":[],"generic_type_params":[],"fields":[{"name":"emitter_chain_id","type":"u64"},{"name":"emitter_address","type":"0x5bc11445584a763c1fa7ed39081f1b920954da14e04b32440cba863d03e19625::external_address::ExternalAddress"},{"name":"initial_sequence","type":"u64"}]}]}}]'
);
function loadAllTypes4(coder) {
  _0x12.loadAllTypes(coder);
  loadAllTypes2(
    coder
  );
  for (const m of Object.values(MODULES2)) {
    coder.load(
      m,
      "0x7e783b349d3e89cf5931af376ebeadbfab855b3fa239b7ada8f5a92fbea6b387"
    );
  }
}
loadAllTypes4((0, import_aptos4.defaultMoveCoder)(import_aptos3.AptosNetwork.MAIN_NET));

// src/aptos.ts
var import_sdk = require("@sentio/sdk");

// src/pyth.ts
var PRICE_MAP = /* @__PURE__ */ new Map([
  ["0x374ddb8a25370dc3a997fd3c73103b1ac04c2cfd60103bf7f607fdb56c968e0d", "Commodities.BRENT1M"],
  ["0xa6416fd4788c8d0f0b5c7d9d93030f4f6b4a012a324771026f4b20d20114fcf4", "Commodities.BRENT2M"],
  ["0x6c4005cf9cc3c55690d8ad84a6487d5226f7fe732df55bfcfb76865061b0c10b", "Commodities.BRENT3M"],
  ["0xeca3fb7e6be5be55a01678ee00f6405b9e4986e32d539ccd2a06a57e0c615880", "Commodities.WTI1M"],
  ["0xce78914f5aa6494591e123a5d5a8623fd85fe0fd247b97552177b48c2859eb1a", "Commodities.WTI2M"],
  ["0xc1ef96cd5a8c25e780ddc7e9e1dfaa9809e6a82ab8b58dbf233c47e9501f0176", "Commodities.WTI3M"],
  ["0x63f341689d98a12ef60a5cff1d7f85c70a9e17bf1575f0e7c0b2512d48b1c8b3", "Crypto.1INCH/USD"],
  ["0x2b9ab1e972a281585084148ba1389800799bd4be63b957507db1349314e47445", "Crypto.AAVE/USD"],
  ["0xbd640cddb72063e2ede34c6a0baf6699759b9837fcb06aa0e2fbcecb9b65fde7", "Crypto.ACM/USD"],
  ["0x2a01deaec9e51a579277b34b122399984d0bbf57e2458a7e42fecd2829867a0d", "Crypto.ADA/USD"],
  ["0x9db37f4d5654aad3e37e2e14ffd8d53265fb3026d1d8f91146539eebaa2ef45f", "Crypto.AERO/USD"],
  ["0x104e4d9ba218610b9af53c887f9fcb7396615259867a5a4b5983a65802aeee0b", "Crypto.AEVO/USD"],
  ["0x17cd845b16e874485b2684f8b8d1517d744105dbb904eec30222717f4bc9ee0d", "Crypto.AFSUI/USD"],
  ["0x3b670a7aa22cf0dc3b76b42dc2e26a85bac35eafc5a5ae2defd6d98201b1b997", "Crypto.AGEUR/USD"],
  ["0x4ea5bb4d2f5900cc2e97ba534240950740b4d3b89fe712a94a7304fd2fd92702", "Crypto.AKT/USD"],
  ["0xfc2176300cd75700a0aa99cf926dfddd99aa03cb2d20eb78f8161c10c143dbc7", "Crypto.ALEX/USD"],
  ["0xfa17ceaf30d19ba51112fdcc750cc83454776f47fb0112e4af07f15f4bb1ebc0", "Crypto.ALGO/USD"],
  ["0xccca1d2b0d9a9ca72aa2c849329520a378aea0ec7ef14497e67da4050d6cf578", "Crypto.ALICE/USD"],
  ["0x9095653620547ece988ec51486dc7a6eb2efddbce8ea5bedbd53bf00cca84cf6", "Crypto.ALPACA/USD"],
  ["0x97d7d4c20e5a06fdb60f7a448a9e9a779f2b31c3f21121180010a4a470844aae", "Crypto.ALPINE/USD"],
  ["0x119ff2acf90f68582f5afd6f7d5f12dbae81e4423f165837169d6b94c27fb384", "Crypto.ALT/USD"],
  ["0xbe4cb6bf8f18e84b1c4fd6fafa7f048a972be26505bd58338eb66c80faa99483", "Crypto.AMB/USD"],
  ["0xd37e4513ebe235fff81e453d400debaf9a49a5df2b7faa11b3831d35d7e72cb7", "Crypto.AMP/USD"],
  ["0x89a58e1cab821118133d6831f5018fba5b354afb78b2d18f575b3cbf69a4f652", "Crypto.ANKR/USD"],
  ["0x15add95022ae13563a11992e727c91bdb6b55bc183d9d747436c80a483d8c864", "Crypto.APE/USD"],
  ["0x95ea50020cf75a81a105d639fd74773ade522e12044600b52286ff5961c71412", "Crypto.API3/USD"],
  ["0x03ae4db29ed4ae33d323568895aa00337e658e348b37509f5372ae51f0af00d5", "Crypto.APT/USD"],
  ["0xf610eae82767039ffc95eef8feaeddb7bbac0673cfe7773b2fde24fd1adb0aee", "Crypto.AR/USD"],
  ["0x3fa4252848f9f0a1480be62745a4629d9eb1322aebab8a791e344b3b9c1adcf5", "Crypto.ARB/USD"],
  ["0x2394ce86c7d68050ce52797923860f6c1656a73fb11bd10dacb3f9c719acdd1d", "Crypto.ARG/USD"],
  ["0x7677dd124dee46cfcd46ff03cf405fb0ed94b1f49efbea3444aadbda939a7ad3", "Crypto.ARKM/USD"],
  ["0xb881c6dad5dd3dc9a83222f8032fb439859288119afc742d43adc305cef151cc", "Crypto.ASR/USD"],
  ["0x89b814de1eb2afd3d3b498d296fca3a873e644bafb587e84d181a01edd682853", "Crypto.ASTR/USD"],
  ["0x2c6d813b1fbc97004bc0e420ca4c85455f4304fcd9b208d23e7a161ad113377c", "Crypto.ASTRO/USD"],
  ["0x681e0eb7acf9a2a3384927684d932560fb6f67c6beb21baa0f110e993b265386", "Crypto.ATLAS/USD"],
  ["0x8ff1200345393bb25be4f4eeb2d97234e91f7e6213f3745a694b1436e700f271", "Crypto.ATM/USD"],
  ["0xb00b60f88b03a6a625a8d1c048c3f66653edf217439983d037e7222c4e612819", "Crypto.ATOM/USD"],
  ["0x2ea070725c82f69be1a730c1730cb229dc3ab44459f41d6f06f0b9ab551e4ddb", "Crypto.AUDIO/USD"],
  ["0x2f7c4f738d498585065a4b87b637069ec99474597da7f0ca349ba8ac3ba9cac5", "Crypto.AURORA/USD"],
  ["0x18667130b9120bcc71d9f8cbe4119e603e3c8f11c2d91745b0b80ec609c9df3b", "Crypto.AURY/USD"],
  ["0x93da3352f9f1d105fdfe4971cfa80e9dd777bfc5d0f683ebb6e1294b92137bb7", "Crypto.AVAX/USD"],
  ["0x60144b1d5c9e9851732ad1d9760e3485ef80be39b984f6bf60f82b28a2b7f126", "Crypto.AXL/USD"],
  ["0xb7e3904c08ddd9c0c10c6d207d390fd19e87eb6aab96304f571ed94caebdefa0", "Crypto.AXS/USD"],
  ["0x07ad7b4a7662d19a6bc675f6b467172d2f3947fa653ca97555a9b20236406628", "Crypto.BAL/USD"],
  ["0x5ab188823c117b3ac791391752f95fd701d923ccffa3436ecf7ba5d4bb4bd678", "Crypto.BAND/USD"],
  ["0x9d23a47f843f5c9284832ae6e76e4aa067dc6072a58f151d39a65a4cc792ef9f", "Crypto.BAR/USD"],
  ["0x8e860fb74e60e5736b455d82f60b3728049c348e94961add5f961b02fdee2535", "Crypto.BAT/USD"],
  ["0x3dd2b63686a450ec7290df3a1e0b583c0481f651351edfa7636f39aed55cf8a3", "Crypto.BCH/USD"],
  ["0x3871d0ef1cf9e26005e4bbf7822f67a8883071a9d8a4e7a0125d2484cca7671f", "Crypto.BEAM/USD"],
  ["0x7f981f906d7cfe93f618804f1de89e0199ead306edc022d3230b3e8305f391b0", "Crypto.BETH/USD"],
  ["0x708bfcf418ead52a408407b039f2c33ce24ddc80d6dcb6d1cffef91c156c80fa", "Crypto.BGB/USD"],
  ["0x70cd05521e3bdeaee2cadc1360f0d95397f03275f273199be35a029114f53a3b", "Crypto.BIFI/USD"],
  ["0xc5e0e0c92116c0c070a242b254270441a6201af680a33e0381561c59db3266c9", "Crypto.BITCOIN/USD"],
  ["0x856aac602516addee497edf6f50d39e8c95ae5fb0da1ed434a8c2ab9c3e877e9", "Crypto.BLUR/USD"],
  ["0x93c3def9b169f49eed14c9d73ed0e942c666cf0e1290657ec82038ebb792c2a8", "Crypto.BLZE/USD"],
  ["0x2f95862b045670cd22bee3114c39763a4a08beeb663b145d283c31d7d1101c4f", "Crypto.BNB/USD"],
  ["0xd1e9cff9b8399f9867819a3bf1aa8c2598234eecfd36ddc3a7bc7848432184b5", "Crypto.BOBA/USD"],
  ["0x7bd87c3390d2c88d4699c7621fd857e0982027723751ce6e98bcc7604a407976", "Crypto.BODEN/USD"],
  ["0x30e4780570973e438fdb3f1b7ad22618b2fc7333b65c7853a7ca144c39052f7a", "Crypto.BOME/USD"],
  ["0x72b021217ca3fe68922a19aaf990109cb9d84e9ad004b4d2025ad6f529314419", "Crypto.BONK/USD"],
  ["0x46a89b09e545ad5ccebee43198e70876c22a0621ff9f1dc8525aef2cffc52d2b", "Crypto.BOO/USD"],
  ["0xef3f94c52ecc3a624fa0fa51ab2b562f70d8f98ff505bb36cbc08c22b1aff628", "Crypto.BORG/USD"],
  ["0x1ce9069708fb49e2f1b062fa4f1be0bb151475ca506939d6d8c14386d49f43dc", "Crypto.BRZ/USD"],
  ["0x89875379e70f8fbadc17aef315adf3a8d5d160b811435537e03c97e8aac97d9c", "Crypto.BSOL/USD"],
  ["0xb44565b8b9b39ab2f4ba792f1c8f8aa8ef7d780e709b191637ef886d96fd1472", "Crypto.BSV/USD"],
  ["0x48ce0cf436bac22dad33551dfe2eb7bf9991e419a05f25aed4e90c29c3a1cdbe", "Crypto.BSW/USD"],
  ["0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43", "Crypto.BTC/USD"],
  ["0x097d687437374051c75160d648800f021086bc8edf469f11284491fda8192315", "Crypto.BTT/USD"],
  ["0xfdf28a46570252b25fd31cb257973f865afc5ca2f320439e45d95e0394bc7382", "Crypto.BUCK/USD"],
  ["0x5bc91f13e412c07599167bae86f07543f076a638962b8d6017ec19dab4a82814", "Crypto.BUSD/USD"],
  ["0x2dd14c7c38aa7066c7a508aac299ebcde5165b07d5d9f2d94dfbfe41f0bc5f2e", "Crypto.C98/USD"],
  ["0x2356af9529a1064d41e32d617e2ce1dca5733afa901daba9e2b68dee5d53ecf9", "Crypto.CAKE/USD"],
  ["0x972776d57490d31c32279c16054e5c01160bd9a2e6af8b58780c82052b053549", "Crypto.CANTO/USD"],
  ["0x15ecddd26d49e1a8f1de9376ebebc03916ede873447c1255d2d5891b92ce5717", "Crypto.CBETH/USD"],
  ["0x7d669ddcdd23d9ef1fa9a9cc022ba055ec900e91c4cb960f3c20429d4447a411", "Crypto.CELO/USD"],
  ["0x20841878a1c4d3ea4587603e2cb55b32afae64402f281652f5a3b94155ff27e9", "Crypto.CELR/USD"],
  ["0xe5b274b2611143df055d6e7cd8d93fe1961716bcd4dca1cad87a83bc1e78c1ef", "Crypto.CETUS/USD"],
  ["0x8879170230c9603342f3837cf9a8e76c61791198fb1271bb2552c9af7b33c933", "Crypto.CFX/USD"],
  ["0xbd4dbcbfd90e6bc6c583e07ffcb5cb6d09a0c7b1221805211ace08c837859627", "Crypto.CHR/USD"],
  ["0xe799f456b358a2534aa1b45141d454ac04b444ed23b1440b778549bb758f2b5c", "Crypto.CHZ/USD"],
  ["0x9c479b12a2b2c1051715d4d462dd7a6abbb6dccabf3af31a53f6130a1cd88efc", "Crypto.CITY/USD"],
  ["0x4a8e42861cabc5ecb50996f92e7cfa2bce3fd0a2423b0c44c9b423fb2bd25478", "Crypto.COMP/USD"],
  ["0x5cc87aaa7df22e5ac77f6a4bc50569129eb00396fd9fd68569e748e7e96fdf90", "Crypto.COQ/USD"],
  ["0x9b4503710cc8c53f75c30e6e4fda1a7064680ef2e0ee97acd2e3a7c37b3c830c", "Crypto.CORE/USD"],
  ["0x4e53c6ef1f2f9952facdcf64551edb6d2a550985484ccce6a0477cae4c1bca3e", "Crypto.COW/USD"],
  ["0x23199c2bcb1303f667e733b9934db9eca5991e765b45f5ed18bc4b231415f2fe", "Crypto.CRO/USD"],
  ["0xa19d04ac696c7a6616d291c7e5d1377cc8be437c327b75adb5dc1bad745fcae8", "Crypto.CRV/USD"],
  ["0x4871d73dd24d2c92a531ce571d48da9a5f22ff946bd5b37bc38c6f479c7df158", "Crypto.CSPR/USD"],
  ["0x14eb6f846b84f37c841ce7a52a38706e54966df84b3a09cc40499b164af05672", "Crypto.CTSI/USD"],
  ["0x8f218655050a1476b780185e89f19d2b1e1f49e9bd629efad6ac547a946bf6ab", "Crypto.CUSD/USD"],
  ["0x6aac625e125ada0d2a6b98316493256ca733a5808cd34ccef79b0e28c64d1e76", "Crypto.CVX/USD"],
  ["0xb0948a5e5313200c632b51bb5ca32f6de0d36e9950a942d19751e833f70dabfd", "Crypto.DAI/USD"],
  ["0xd57d90cd8554ea0cf8268de30d5ad67fed9a8f11cce5132a49eb687aed832ea6", "Crypto.DAR/USD"],
  ["0x6147ae2020c6ff95f7c961f79660020f36fa72cea06452a866d5788cbedf61f3", "Crypto.DASH/USD"],
  ["0x9c93e4a22c56885af427ac4277437e756e7ec403fbc892f975d497383bb33560", "Crypto.DEGEN/USD"],
  ["0x688aa41b26a19db08855aaf87723a0eda91b8a830b782c3215bca3b208fad81a", "Crypto.DODO/USD"],
  ["0xdcef50dd0a4cd2dcc17e45df1676dcb336a11a61c69df7a0299b0150c672d25c", "Crypto.DOGE/USD"],
  ["0xca3eed9b267293f6595901c734c7525ce8ef49adafe8284606ceb307afa2ca5b", "Crypto.DOT/USD"],
  ["0x5c1690b27bb02446db17cdda13ccc2c1d609ad6d2ef5bf4983a85ea8b6f19d07", "Crypto.DRIFT/USD"],
  ["0x6489800bb8974169adfe35937bf6736507097d13c190d760c557108c7e93a81b", "Crypto.DYDX/USD"],
  ["0xa9f3b2a89c6f85a6c20a9518abde39b944e839ca49a0c92307c65974d3f14a57", "Crypto.DYM/USD"],
  ["0xc8593010ca5b82738a061887d22d42cd0b85861fa9d1677835070a43958090d0", "Crypto.EDU/USD"],
  ["0x4e150e9d44d18f9cf715f1ae90f836b69623a8aa9a71df0afde69e01776984d0", "Crypto.EETH/USD"],
  ["0xee326a761a4b53629a29fc64bf47dda18cb2eea0bef22da7144dbdc130d112fc", "Crypto.EGLD/USD"],
  ["0xc65db025687356496e8653d0d6608eec64ce2d96e2e28c530e574f0e4f712380", "Crypto.EIGEN/USD"],
  ["0xc9cf25cd0df326b7fb3548b37d38e1e5c6ba202188a44ad98b79335c2b202f7b", "Crypto.ELON/USD"],
  ["0xb7910ba7322db020416fcac28b48c01212fd9cc8fbcbaf7d30477ed8605f6bd4", "Crypto.ENA/USD"],
  ["0x5cc254b7cb9532df39952aee2a6d5497b42ec2d2330c7b76147f695138dbd9f3", "Crypto.ENJ/USD"],
  ["0xb98ab6023650bd2edc026b983fb7c2f8fa1020286f1ba6ecf3f4322cd83b72a6", "Crypto.ENS/USD"],
  ["0x06ade621dbc31ed0fc9255caaab984a468abe84164fb2ccc76f02a4636d97e31", "Crypto.EOS/USD"],
  ["0xd0798c1e23efe9eb484de00a342948080343971d08a7b5725b12cb54fc5a89c7", "Crypto.ERN/USD"],
  ["0x7f5cc8d963fc5b3d2ae41fe5685ada89fd4f14b435f8050f28c7fd409f40c2d8", "Crypto.ETC/USD"],
  ["0xc96458d393fe9deb7a7d63a0ac41e2898a67a7750dbd166673279e06c868df0a", "Crypto.ETH/BTC"],
  ["0xff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace", "Crypto.ETH/USD"],
  ["0xb27578a9654246cb0a2950842b92330e9ace141c52b63829cc72d5c45a5a595a", "Crypto.ETHFI/USD"],
  ["0x76fa85158bf14ede77087fe3ae472f66213f6ea2f5b411cb2de472794990fa5c", "Crypto.EURC/USD"],
  ["0xf2fc1dfcf51867abfa70874c929e920edc649e4997cbac88f280094df8c72bcd", "Crypto.EUROE/USD"],
  ["0x14a8d834594165c7870a785b4feffcfb688b4f723e79579a6dc98cae6a8204f3", "Crypto.EURS/USD"],
  ["0xc19405e4c8bdcbf2a66c37ae05a27d385c8309e9d648ed20dc6ee717e7d30e17", "Crypto.EVMOS/USD"],
  ["0x06c217a791f5c4f988b36629af4cb88fad827b2485400a358f3b02886b54de92", "Crypto.EZETH/USD"],
  ["0xccdc1a08923e2e4f4b1e6ea89de6acbc5fe1948e9706f5604b8cb50bc1ed3979", "Crypto.FDUSD/USD"],
  ["0xc80657b7f6f3eac27218d09d5a4e54e47b25768d9f5e10ac15fe2cf900881400", "Crypto.FIDA/USD"],
  ["0x150ac9b959aee0051e4091f0ef5216d941f590e1c5e7f91cf7635b5c11628c0e", "Crypto.FIL/USD"],
  ["0x6b1381ce7e874dc5410b197ac8348162c0dd6c0d4c9cd6322672d6c2b1d58293", "Crypto.FLOKI/USD"],
  ["0x2fb245b9a84554a0f15aa123cbb5f64cd263b59e9a87d80148cbffab50c69f30", "Crypto.FLOW/USD"],
  ["0xc3d5d8d6d17081b3d0bbca6e2fa3a6704bb9a9561d9f9e1dc52db47629f862ad", "Crypto.FRAX/USD"],
  ["0x6f1c117484f1ab1c387c23fd72fbd2478c4e1b1842fb0c85a4a56ad99e9de5c4", "Crypto.FRIEND/USD"],
  ["0x29240ee3a9024d107888eb1d4c527216f06bd64cee030c6b5575b1a8d77cb659", "Crypto.FRXETH/USD"],
  ["0x5c6c0d2386e3352356c3ab84434fafb5ea067ac2678a38a338c4a69ddc4bdb0c", "Crypto.FTM/USD"],
  ["0x6c75e52531ec5fd3ef253f6062956a8508a2f03fa0a209fb7fbc51efd9d35f88", "Crypto.FTT/USD"],
  ["0x6a4090703da959247727f2b490eb21aea95c8684ecfac675f432008830890c75", "Crypto.FUD/USD"],
  ["0x735f591e4fed988cd38df74d8fcedecf2fe8d9111664e0fd500db9aa78b316b1", "Crypto.FXS/USD"],
  ["0x301377b122716cee1a498e7930a1836c0b1db84667cc78bbbcbad6c330ea6afb", "Crypto.GAL/USD"],
  ["0x0781209c28fda797616212b7f94d77af3a01f3e94a5d421760aef020cf2bcb51", "Crypto.GALA/USD"],
  ["0x2a0e948f637a8c251d9f06055e72eb4b3880dd57848bbdb02993c8165d7df4ee", "Crypto.GHO/USD"],
  ["0x309d39a65343d45824f63dc6caa75dbf864834f48cfaa6deb122c62239e06474", "Crypto.GLMR/USD"],
  ["0xbaa284eaf23edf975b371ba2818772f93dbae72836bbdea28b07d40f3cf8b485", "Crypto.GMT/USD"],
  ["0xb962539d0fcb272a494d65ea56f94851c2bcf8823935da05bd628916e2e9edbf", "Crypto.GMX/USD"],
  ["0xc5f60d00d926ee369ded32a38a6bd5c1e0faa936f91b987a5d0dcf3c5d8afab0", "Crypto.GNO/USD"],
  ["0x5a5d5f7fb72cc84b579d74d1c06d258d751962e9a010c0b1cce7e6023aacb71b", "Crypto.GNS/USD"],
  ["0x6034b1f68b9363dff2cf9d53b1a88fb4d0929c65f34d532db53738853efc00ad", "Crypto.GOFX/USD"],
  ["0x48f3736d94693aa73c11214c4176ba7f997a8329f4dbc3854c4b2686861132ce", "Crypto.GRAIL/USD"],
  ["0x4d1f8dae0d96236fb98e8f47471a366ec3b1732b47041781934ca3a9bb2f35e7", "Crypto.GRT/USD"],
  ["0x051ee6cdd581106d0291dfd9b0ee13e6b4dde8fb251afd262c2ba5444257daa8", "Crypto.GT/USD"],
  ["0x69427f5d5a15c3c597f0268a7782b0f2cc553df75486ba7a3119f8d47d54d8b8", "Crypto.GUI/USD"],
  ["0xe186e116f2c7642d0d8aa89c32345d83ebeb350242b2274c46a19ea82e04fb8d", "Crypto.GUSD/USD"],
  ["0x6120ffcf96395c70aa77e72dcb900bf9d40dccab228efca59a17b90ce423d5e8", "Crypto.HASUI/USD"],
  ["0x3728e591097635310e6341af53db8b7ee42da9b3a8d918f9463ce9cca886dfbd", "Crypto.HBAR/USD"],
  ["0xfa2d39b681f3cef5fa87432a8dbd05113917fffb1b6829a37395c88396522a4e", "Crypto.HFT/USD"],
  ["0x649fdd7ec08e8e2a20f425729854e90293dcbe2376abc47197a14da6ff339756", "Crypto.HNT/USD"],
  ["0x38e91ba416e6010735d7580472784a3e0821ab559aacdf73f5aba9d661e687ab", "Crypto.HT/USD"],
  ["0x95609d32c98a467a72ac419f2e64bb2b8dbd5b00b74f3a0fd72f42343af1743d", "Crypto.HXRO/USD"],
  ["0xc9907d786c5821547777780a1e4f89484f3417cb14dd244f2b0a34ea7a554d67", "Crypto.ICP/USD"],
  ["0x6fdf9f1b31f6212aad9125dbc9d85ae6cfac3939fd914f6a8c397f01272eca8f", "Crypto.IDEX/USD"],
  ["0xe1cb28de6139b40cf03e15f42a89921c0650fb1c75cabfc94877830c28de30cb", "Crypto.ILV/USD"],
  ["0x941320a8989414874de5aa2fc340a75d5ed91fdff1613dd55f83844d52ea63a2", "Crypto.IMX/USD"],
  ["0xf51570985c642c49c2d6e50156390fdba80bb6d5f7fa389d2f012ced4f7d208f", "Crypto.INF/USD"],
  ["0x7a5bc1d2b56ad029048cd63964b3ad2776eadf812edc1a43a31406cb54bff592", "Crypto.INJ/USD"],
  ["0xa4702f0f5818258783a1e47f453cb20b0fbec32ca67260e1d19dfcdd6a4d0ebb", "Crypto.INTER/USD"],
  ["0x82595d1509b770fa52681e260af4dda9752b87316d7c048535d8ead3fa856eb1", "Crypto.IO/USD"],
  ["0x6b701e292e0836d18a5904a08fe94534f9ab5c3d4ff37dc02c74dd0f4901944d", "Crypto.IOT/USD"],
  ["0xc7b72e5d860034288c9335d4d325da4272fe50c92ab72249d58f6cbba30e4c44", "Crypto.IOTA/USD"],
  ["0xa83103141916013b5679001e273281303a6c05f4cebd94da00a785bd74d1e6d8", "Crypto.IOTX/USD"],
  ["0xa5eb88d3ea93f6240d7e54b4466bc1857f7bfc1658d49a07f68096ebc0fdde3b", "Crypto.ITA/USD"],
  ["0xb3bd2a89c026fe7873da91b39bf9347fdea24e5b588330b4899788cf48878133", "Crypto.Index.GMCI30/USD"],
  ["0x67be9f519b95cf24338801051f9a808eff0a578ccb388db73b7f6fe1de019ffb", "Crypto.JITOSOL/USD"],
  ["0xc811abc82b4bad1f9bd711a2773ccaa935b03ecef974236942cec5e0eb845a3a", "Crypto.JLP/USD"],
  ["0xa3f37baf54dbd24e1d67040d566a762e62be3edbf8ef423038b091afc1722915", "Crypto.JOE/USD"],
  ["0xb43660a5f790c69354b0729a5ef9d50d68f1df92107540210b9cccba1f947cc2", "Crypto.JTO/USD"],
  ["0x0a0408d619e9380abad35060f9192039ed5042fa6f82301d0e48bb52be830996", "Crypto.JUP/USD"],
  ["0xabe4f2b264560a397f38eec024369356e5c1ea4f7aab94729369f144b3d97779", "Crypto.JUV/USD"],
  ["0xdfd3cb51a9d39fde35a3ff6177b426def03ed48d45008248f22827d8bf50cab4", "Crypto.KAS/USD"],
  ["0xa6e905d4e85ab66046def2ef0ce66a7ea2a60871e68ae54aed50ec2fd96d8584", "Crypto.KAVA/USD"],
  ["0xc8acad81438490d4ebcac23b3e93f31cdbcb893fcba746ea1c66b89684faae2f", "Crypto.KCS/USD"],
  ["0xde5e6ef09931fecc7fdd8aaa97844e981f3e7bb1c86a6ffc68e9166bb0db3743", "Crypto.KLAY/USD"],
  ["0xb17e5bc5de742a8a378b54c9c75442b7d51e30ada63f28d9bd28d3c0e26511a0", "Crypto.KMNO/USD"],
  ["0xb9ccc817bfeded3926af791f09f76c5ffbc9b789cac6e9699ec333a79cacbe2a", "Crypto.KNC/USD"],
  ["0xdedebc9e4d916d10b76cfbc21ccaacaf622ab1fc7f7ba586a0de0eba76f12f3f", "Crypto.KSM/USD"],
  ["0xd1d95644ffc11ca502f21e067a7814144c56b37018515ced4335a886a827a305", "Crypto.LAZIO/USD"],
  ["0xc63e2a7f37a04e5e614c07238bedb25dcc38927fba8fe890597a593c0b2fa4ad", "Crypto.LDO/USD"],
  ["0x19e4e2b451406cf99311bb5127b12a948db17f30b69c323c8657d71119a58619", "Crypto.LEO/USD"],
  ["0x8ac0c70fff57e9aefdf5edf44b51d62c2d433653cbb2cf5cc06bb115af04d221", "Crypto.LINK/USD"],
  ["0x9279583bcedabec7a42625093fc9a7b6466b62b839cadae469b4b75a72f49723", "Crypto.LIS/USD"],
  ["0x2805c8894235111024c54253267f2b325be23763d534d2051742e39234b5835a", "Crypto.LL/USD"],
  ["0xacecdd9ac741a1f6dad0fd6ade5354e9523bd0c864b955307cea3643fdfe8ff5", "Crypto.LOOKS/USD"],
  ["0x5e8b35b0da37ede980d8f4ddaa7988af73d8c3d110e3eddd2a56977beb839b63", "Crypto.LQTY/USD"],
  ["0x20311405c2fc648cf5733197e95c03512af9cf64f2260aea7e212a8c8b7bdcfa", "Crypto.LRC/USD"],
  ["0x12fb674ee496045b1d9cf7d5e65379acb026133c2ad69f3ed996fb9fe68e3a37", "Crypto.LST/USD"],
  ["0x6e3f3fa8253588df9326580180233eb791e03b443a3ba7a1d892e73874e19a54", "Crypto.LTC/USD"],
  ["0xe6ccd3f878cf338e6732bf59f60943e8ca2c28402fc4d9c258503b2edbe74a31", "Crypto.LUNA/USD"],
  ["0x4456d442a152fd1f972b18459263ef467d3c29fb9d667e30c463b086691fbc79", "Crypto.LUNC/USD"],
  ["0xc9dc99720306ef43fd301396a6f8522c8be89c6c77e8c27d87966918a943fd20", "Crypto.LUSD/USD"],
  ["0xdef609c9b59a13cabb8dfb90df5ee85ab21629dc10724e411a7dc5e8345dabc0", "Crypto.LYVE/USD"],
  ["0xa80e97f70f6a4a8a0273822fb86d51b2bdb9a16ce0edb7ea8c8b84cbaecb5ce5", "Crypto.MAGA/USD"],
  ["0x1dfffdcbc958d732750f53ff7f06d24bb01364b3f62abea511a390c74b8d16a5", "Crypto.MANA/USD"],
  ["0xc63de9f502c78c206b1c85920dfa0a4494e080a2ebb38e73899eca656b6b1bfa", "Crypto.MANEKI/USD"],
  ["0xc3883bcf1101c111e9fcfe2465703c47f2b638e21fef2cce0502e6c8f416e0e2", "Crypto.MANTA/USD"],
  ["0xb97d9aa5c9ea258252456963c3a9547d53e4848cb66ce342a3155520741a28d4", "Crypto.MASK/USD"],
  ["0x5de33a9112c2b700b8d30b8a3402c103578ccfa2765696471cc672bd5cf6ac52", "Crypto.MATIC/USD"],
  ["0x5b131ede5d017511cf5280b9ebf20708af299266a033752b64180c4201363b11", "Crypto.MAV/USD"],
  ["0x1888f463c27997174f97d2a36af29bf4648b61a5f69e67c45505a80f826bb785", "Crypto.MBOX/USD"],
  ["0x6665073f5bc307b97e68654ff11f3d8875abd6181855814d23ab01b8085c0906", "Crypto.MBTC/USD"],
  ["0x27d108eb764c912f49d3453a21dd95516619b1c45d0b607ee58a137ac8a6f32d", "Crypto.MEAN/USD"],
  ["0xcd2cee36951a571e035db0dfad138e6ecdb06b517cc3373cd7db5d3609b7927c", "Crypto.MEME/USD"],
  ["0x03e8dbf3e8f02edf5ca898dc7afbbac3f06c7d91c02986c3a8c6ce1a99e90355", "Crypto.MERL/USD"],
  ["0xfbc9c3a716650b6e24ab22ab85b1c0ef4141b18f4590cc0b986e2f9064cf73d6", "Crypto.METH/USD"],
  ["0xc22aa7943f65c9b1bb8d765bf4d5136590c48508f61912314f23bb730325b159", "Crypto.METIS/USD"],
  ["0x514aed52ca5294177f20187ae883cec4a018619772ddce41efcc36a6448f5d5d", "Crypto.MEW/USD"],
  ["0x7aa41f6ee464616f3cbc469fddfd7e63d8db319b7bd585cc95b24c29c9172916", "Crypto.MIM/USD"],
  ["0xe322f437708e16b033d785fceb5c7d61c94700364281a10fabc77ca20ef64bf1", "Crypto.MINA/USD"],
  ["0x0b46c1c04e9c914037cc4e0561a7e6787f6db0b89b7b65281f0f6fea1ce45a74", "Crypto.MIR/USD"],
  ["0x9375299e31c0deb9c6bc378e6329aab44cb48ec655552a70d4b9050346a30378", "Crypto.MKR/USD"],
  ["0x3607bf4d7b78666bd3736c7aacaf2fd2bc56caa8667d3224971ebe3c0623292a", "Crypto.MNDE/USD"],
  ["0x5b70af49d639eefe11f20df47a0c0760123291bb5bc55053faf797d1ff905983", "Crypto.MNGO/USD"],
  ["0x4e3037c822d852d79af3ac80e35eb420ee3b870dca49f9344a38ef4773fb0585", "Crypto.MNT/USD"],
  ["0xff4c53361e36a9b837433c87d290c229e1f01aec5ef98d9f3f70953a20a629ce", "Crypto.MOBILE/USD"],
  ["0x9a2a116d85a31d6f1bed19771105557276457094e31791a892758148aa54023d", "Crypto.MOD/USD"],
  ["0x0386e113cc716a7c6a55decd97b19c90ce080d9f2f5255ac78a0e26889446d1e", "Crypto.MODE/USD"],
  ["0x17894b9fff49cd07efeab94a0d02db16f158efe04e0dee1db6af5f069082ce83", "Crypto.MOG/USD"],
  ["0xc2289a6a43d2ce91c6f55caec370f4acc38a2ed477f58813334c6d03749ff2a4", "Crypto.MSOL/USD"],
  ["0x8cdc9b2118d2ce55a299f8f1d700d0127cf4036d1aa666a8cd51dcab4254284f", "Crypto.MTR/USD"],
  ["0x20d096e088a9b85f8cf09278965b77aeb05c00769e2ddeda5ea2d07ea554b283", "Crypto.MTRG/USD"],
  ["0x89015ee913508637167dd4ab8ae902d4835b2a340876fadcfbfc963221bb3dea", "Crypto.MUSD/USD"],
  ["0x6c19a9df349e8951d6bbae02f11ce54a025cd549b482403a0d897bb0bdbfd424", "Crypto.MYRO/USD"],
  ["0x88250f854c019ef4f88a5c073d52a18bb1c6ac437033f5932cd017d24917ab46", "Crypto.NAVX/USD"],
  ["0xc415de8d2eba7db216527dff4b60e8f3a5311c740dadb233e13e12547e226750", "Crypto.NEAR/USD"],
  ["0xd82183dd487bef3208a227bb25d748930db58862c5121198e723ed0976eb92b7", "Crypto.NEON/USD"],
  ["0x75ec6f04d4bded6afdc1440689be4402dd1e23d2ff2c21e081871eb2739ceb36", "Crypto.NOT/USD"],
  ["0xa8e6517966a52cb1df864b2764f3629fde3f21d2b640b5c572fcd654cbccd65e", "Crypto.NTRN/USD"],
  ["0x05934526b94a9fbe4c4ce0c3792213032f086ee4bf58f2168a7085361af9bdc1", "Crypto.OG/USD"],
  ["0xd6f83dfeaff95d596ddec26af2ee32f391c206a183b161b7980821860eeef2f5", "Crypto.OKB/USD"],
  ["0x3b4e266cfd796c642603073a8471f1bdb876a9c03ded525e4472a722298c4219", "Crypto.OMG/USD"],
  ["0x06d9fa501fd2bef47265361ca0eaf6e0a97c3b226cea5ab760240f70818581ad", "Crypto.OMI/USD"],
  ["0xd40472610abe56d36d065a0cf889fc8f1dd9f3b7f2a478231a5fc6df07ea5ce3", "Crypto.ONDO/USD"],
  ["0xc572690504b42b57a3f7aed6bd4aae08cbeeebdadcf130646a692fe73ec1e009", "Crypto.ONE/USD"],
  ["0x385f64d993f7b77d8182ed5003d97c60aa3361f3cecfe711544d2d59165e9bdf", "Crypto.OP/USD"],
  ["0x37505261e557e251290b8c8899453064e8d760ed5c65a779726f2490980da74c", "Crypto.ORCA/USD"],
  ["0x193c739db502aadcef37c2589738b1e37bdb257d58cf1ab3c7ebc8e6df4e3ec0", "Crypto.ORDI/USD"],
  ["0x5867f5683c757393a0670ef0f701490950fe93fdb006d181c8265a831ac0c5c6", "Crypto.OSMO/USD"],
  ["0xbfaf61069ca9164aba41935fa16488ce7c39b313e7faaa02fb4655b99caada05", "Crypto.OUSD/USD"],
  ["0x273717b49430906f4b0c230e99aa1007f83758e3199edbc887c0d06c3e332494", "Crypto.PAXG/USD"],
  ["0x9a4df90b25497f66b1afb012467e316e801ca3d839456db028892fe8c70c8016", "Crypto.PENDLE/USD"],
  ["0xb7fe919d83815ca6074c82a3286b1cd6ffb7d3136e323cd2b1ef706cfc7e5945", "Crypto.PEOPLE/USD"],
  ["0xd69731a2e74ac1ce884fc3890f7ee324b6deb66147055249568869ed700882e4", "Crypto.PEPE/USD"],
  ["0x944f2f908c5166e0732ea5b610599116cd8e1c41f47452697c1e84138b7184d6", "Crypto.PERP/USD"],
  ["0xffd11c5a1cfd42f80afb2df4d9f264c15f956d68153335374ec10722edd70472", "Crypto.POL/USD"],
  ["0xb9312a7ee50e189ef045aa3c7842e099b061bd9bdc99ac645956c3b660dc8cce", "Crypto.POPCAT/USD"],
  ["0x701223c92a39dbab065c4a7997fef9c41c8de26ca2bf1f808ce0a4ea1cfd421f", "Crypto.POR/USD"],
  ["0x0afa3199e0899270a74ddcf5cc960d3c6c4414b4ca71024af1a62786dd24f52a", "Crypto.PORT/USD"],
  ["0x88e2d5cbd2474766abffb2a67a58755a2cc19beb3b309e1ded1e357253aa3623", "Crypto.PORTO/USD"],
  ["0x5bbd1ce617792b476c55991c27cdfd89794f9f13356babc9c92405f5f0079683", "Crypto.PRCL/USD"],
  ["0xe417fb7d1edcfe70283c608fa9f14d11ebf4d1b3ecf2e97e42a110f7fb649843", "Crypto.PRIME/USD"],
  ["0x3d253019d38099c0fe918291bd08c9b887f4306a44d7d472c8031529141f275a", "Crypto.PSG/USD"],
  ["0xe5801530292c348f322b7b4a48c1c0d59ab629846cce1c816fc27aee2054b560", "Crypto.PUFETH/USD"],
  ["0x834be8951394714988606b3a1ac299c48bd07d68e5abb02766bcf881fdc1e69c", "Crypto.PXETH/USD"],
  ["0x0bbf28e9a841a1cc788f6a361b17ca072d0ea3098a1e5df1c3922d06719579ff", "Crypto.PYTH/USD"],
  ["0xc1da1b73d7f01e7ddd54b3766cf7fcd644395ad14f70aa706ec5384c59e76692", "Crypto.PYUSD/USD"],
  ["0x19ab139032007c8bd7d1fd3842ef392a5434569a72b555504a5aee47df2a0a35", "Crypto.QNT/USD"],
  ["0xb17096e28039ccc2b84e330c27e29706cf6779c3c6f2853527f516509f9819f6", "Crypto.QTUM/USD"],
  ["0xd28fd418fef97f1b21f72a6bc39687b52ab368d291a5ee8f16e6033ec81c81d8", "Crypto.QUICK/USD"],
  ["0xfd0690232b0fae5efdc402c1b9aac74176383ff7daf87d021554bda24a38e0ec", "Crypto.RACA/USD"],
  ["0x91568baa8beb53db23eb3fb7f22c6e8bd303d103919e19733f2bb642d3e7987a", "Crypto.RAY/USD"],
  ["0xc8cf45412be4268bef8f76a8b0d60971c6e57ab57919083b8e9f12ba72adeeb6", "Crypto.RDNT/USD"],
  ["0x3d4a2bd9535be6ce8059d75eadeba507b043257321aa544717c56fa19b49e35d", "Crypto.RENDER/USD"],
  ["0xa0255134973f4fdf2f8f7808354274a3b1ebc6ee438be898d045e8b56ba1fe13", "Crypto.RETH/USD"],
  ["0x9df307038f76e26ba0f9aaa1d5eefce919bf5b7b282d0ad247d4f77ffb506ede", "Crypto.REZ/USD"],
  ["0x2f2d17abbc1e781bd87b4a5d52c8b2856886f5c482fa3593cebf6795040ab0b6", "Crypto.RLB/USD"],
  ["0xab7347771135fc733f8f38db462ba085ed3309955f42554a14fa13e855ac0e2f", "Crypto.RNDR/USD"],
  ["0x97cfe19da9153ef7d647b011c5e355142280ddb16004378573e6494e499879f3", "Crypto.RON/USD"],
  ["0x488f59877d3950ca12c5529d3ec6d4904666b2ec2d37616e61ecc88e3d23d51c", "Crypto.ROSE/USD"],
  ["0x24f94ac0fd8638e3fc41aab2e4df933e63f763351b640bf336a6ec70651c4503", "Crypto.RPL/USD"],
  ["0x0caec284d34d836ca325cf7b3256c078c597bc052fbd3c0283d52b581d68d71f", "Crypto.RSETH/USD"],
  ["0xfb7565b77267ba3f6ef770bed5d7f9b22b8542db676dbd9b934a2fcf945f4371", "Crypto.RSR/USD"],
  ["0x17e349391a4d8362706ec4126c2fa42047601cb71c1063e38ca305fab9b0ec4d", "Crypto.RSWETH/USD"],
  ["0x5fcf71143bb70d41af4fa9aa1287e2efd3c5911cee59f909f915c9f61baacb1e", "Crypto.RUNE/USD"],
  ["0x7b3576858506a94fad3a9cc55e32934f0c3931150fe3a3c7b83558dbae5b8e38", "Crypto.SAFE/USD"],
  ["0x49601625e1a342c1f90c3fe6a03ae0251991a1d76e480d2741524c29037be28a", "Crypto.SAMO/USD"],
  ["0xcb7a1d45139117f8d3da0a4b67264579aa905e3b124efede272634f094e1e9d1", "Crypto.SAND/USD"],
  ["0x26d53c97247ec18d576bbd23f88078acc22b42168dcb1d29a76501a956e26bad", "Crypto.SANTOS/USD"],
  ["0x40440d18fb5ad809e2825ce7dfc035cfa57135c13062a04addafe0c7f54425e0", "Crypto.SATS/USD"],
  ["0xeb47556122595bbe614fccd5adbf0c504849131962bc244d43887db13135e52d", "Crypto.SAUCE/USD"],
  ["0x6ed3c7c4427ae2f91707495fc5a891b30795d93dbb3931782ddd77a5d8cb6db7", "Crypto.SBR/USD"],
  ["0x7e17f0ac105abe9214deb9944c30264f5986bf292869c6bd8e8da3ccd92d79bc", "Crypto.SCA/USD"],
  ["0xac5a498aa407c3642257dc8bd8b92efda656e708b22be9b96febcb77878d6bfa", "Crypto.SCRT/USD"],
  ["0x83aac6fae150e8850204ef5dce696c05ae2efa335a41c7e5c112bc73e5cbae35", "Crypto.SD/USD"],
  ["0x710659c5a68e2416ce4264ca8d50d34acc20041d91289110eea152c52ff3dc39", "Crypto.SDAI/USD"],
  ["0x5edd9fffc06909b69ec04c2391e5b6148941bbecbebdcb3ab3f9ead9ff7ec991", "Crypto.SEAM/USD"],
  ["0x53614f1cb0c031d4af66c04cb9c756234adad0e1cee85303795091499a4084eb", "Crypto.SEI/USD"],
  ["0xbd72041b2d8fc342693b70012010db5398b032cba2dbe78d672a7e31c2be8de8", "Crypto.SEIYAN/USD"],
  ["0xc9e9d228f565c226dfb8ed5f5c9c4f57ab32b7ade7226c3239ff20911a9c3a7b", "Crypto.SFP/USD"],
  ["0xb2bb466ff5386a63c18aa7c3bc953cb540c755e2aa99dafb13bc4c177692bed0", "Crypto.SFRXETH/USD"],
  ["0x823df7874b35e0a6ad4f1f3a8298e1ec8bf3c20d188edbc1e2b56886adb73d38", "Crypto.SHDW/USD"],
  ["0xf0d57deca57b3da2fe63a493f4c25925fdfd8edf834b20f93e1f84dbd1504d4a", "Crypto.SHIB/USD"],
  ["0x597d2ae7e4b92165d40f03ae57895e3e8245762a177b6db3274e4322b78f5b82", "Crypto.SKL/USD"],
  ["0x1a483c4a63876d286991ac0d6e090298db42e88c3826b6e0cff89daca498eed5", "Crypto.SLERF/USD"],
  ["0xebdf9652e12bfd7701ac6e72452cf5fcb9e796d463e983579bf6e7a26d834880", "Crypto.SLISBNB/USD"],
  ["0xf8d030e4ef460b91ad23eabbbb27aec463e3c30ecc8d5c4b71e92f54a36ccdbd", "Crypto.SLND/USD"],
  ["0xfba17701be318087db58d9797d5f1e89dcf5b95773ae2227c8a8eb4cf1d4e554", "Crypto.SLP/USD"],
  ["0xaf5b9ac426ae79591fde6816bc3f043b5e06d5e442f52112f76249320df22449", "Crypto.SMR/USD"],
  ["0x39d020f60982ed892abbcd4a06a276a9f9b7bfbce003204c110b6e488f502da3", "Crypto.SNX/USD"],
  ["0xef0d8b6fda2ceba41da15d4095d1da392a0d2f8ed0c6c7bc0f4cfac8c280b56d", "Crypto.SOL/USD"],
  ["0xcdaf63079d7abee0f54344fb19bf4e23d1e6c8ff7d8e820c86ce119b0ddc14cd", "Crypto.SPA/USD"],
  ["0x1dcf38b0206d27849b0fcb8d2df21aff4f95873cce223f49d7c1ea3c5145ec63", "Crypto.SPELL/USD"],
  ["0x7e18fca6a28d8a48098ed7af96dff749b80bc0c9653ec4aeaf937ba598bb65fc", "Crypto.STAPT/USD"],
  ["0xe58c1e39b5d79f16a1bdf707e336310dda93884270b84f40a2b01bf74d75f671", "Crypto.STATOM/USD"],
  ["0xf2c7700bf7f242cedee0ef14316c8f5846c10f596cb5deb2a6e7d5638d660fc7", "Crypto.STBT/USD"],
  ["0x3af6a3098c56f58ff47cc46dee4a5b1910e5c157f7f0b665952445867470d61f", "Crypto.STETH/ETH"],
  ["0x846ae1bdb6300b817cee5fdee2a6da192775030db5615b94a465f53bd40850b5", "Crypto.STETH/USD"],
  ["0x008546b175392b878c5c7ff0b6327b1cb12669be012fc2935c09a16fc8f6c58f", "Crypto.STG/USD"],
  ["0x2cbc7b44319b2e1b42932248ca32f00f75eb78e6cc14cff4036e2ab3490f845b", "Crypto.STHAPT/USD"],
  ["0xe6b1ad40466b5f9dbe36098beb280cf22c311899ee7731b17230e7e54e7cbc19", "Crypto.STKBNB/USD"],
  ["0x956740a4e169e90bb141abfe93652ae3434693bc7ca43cbcea6471408f19ab90", "Crypto.STNEAR/USD"],
  ["0x4dcc2fb96fb89a802ef9712f6bd2246d3607cf95ca5540cb24490d37003f8c46", "Crypto.STONE/USD"],
  ["0x21776e4ed1e763d580071fd6394d71e582672c788f64f4a279e60ec1497e27c4", "Crypto.STORJ/USD"],
  ["0x1ae76ce538326a90bf3b4f7e37082ce605585e30932e82d112b023ce8c33e01c", "Crypto.STRD/USD"],
  ["0x6a182399ff70ccf3e06024898942028204125a819e519a335ffa4579e66cd870", "Crypto.STRK/USD"],
  ["0xa1a6465f4c2ebf244c31d80bc95c27345a3424e428c2def33eced9e90d3f701b", "Crypto.STSOL/USD"],
  ["0xa4d617ccf05ffb84700b0fadff45abb4a508e122fa6fc4d7b7c478a7306aaecd", "Crypto.STTIA/USD"],
  ["0xec7a775f46379b5e943c3526b1c8d54cd49749176b0b98e02dde68d1bd335c17", "Crypto.STX/USD"],
  ["0x23d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc65744", "Crypto.SUI/USD"],
  ["0xca3ba9a619a4b3755c10ac7d5e760275aa95e9823d38a84fedd416856cdba37c", "Crypto.SUSDE/USD"],
  ["0x26e4f737fde0263a9eea10ae63ac36dcedab2aaf629261a994e1eeb6ee0afe53", "Crypto.SUSHI/USD"],
  ["0x432a52bde005a010dc32c47733e4595fea0ea04df3b5aaa1c45153a527d646f0", "Crypto.SWEAT/USD"],
  ["0x2fd8f34e9e6cb5c1a757e1aeb919136da3ae6d0d2243b2ad93d661e590578cd1", "Crypto.SWETH/USD"],
  ["0x13b82e2a3f97f39504638b45aeab690ab47fd975f9a2e689cac3c77089f26f4d", "Crypto.SXP/USD"],
  ["0x0afa62dff138fe0ea24e54bb875a634cc729675dab9f84462c964b2bb14c0349", "Crypto.SYN/USD"],
  ["0xd878b9766566a87675421e9b11992c1f2ca2438d5b7d841cb147308e1bd6bb99", "Crypto.TAIKO/USD"],
  ["0x410f41de235f2db824e562ea7ab2d3d3d4ff048316c61d629c0b93f58584e1af", "Crypto.TAO/USD"],
  ["0x5c2416ad4b5fe25c38ea2078927d59dad6a1d4110480c0c96c9b4421744f7507", "Crypto.TAPT/USD"],
  ["0x56a3121958b01f99fdc4e1fd01e81050602c7ace3a571918bb55c6a96657cca9", "Crypto.TBTC/USD"],
  ["0x29429344e993184204b4d484a8322c7bd221a7e4aebf354ddf6c3d230e141822", "Crypto.TENET/USD"],
  ["0xb29276972267db5d64ae718fb7f107ad9e72a79cabf9992f0e9bc75ad451a7f6", "Crypto.THAPT/USD"],
  ["0xee70804471fe22d029ac2d2b00ea18bbf4fb062958d425e5830fd25bed430345", "Crypto.THETA/USD"],
  ["0x74e3fbb0d33e0ed8c0078b56134dcebdae38852f0858a8ea4de4c5ea7474bd42", "Crypto.THL/USD"],
  ["0x09f7c1d7dfbb7df2b8fe3d3d87ee94a2259d212da4f30c1f0540d066dfa44723", "Crypto.TIA/USD"],
  ["0x05ecd4597cd48fe13d6cc3596c62af4f9675aee06e2e0b94c06d8bee2b659e05", "Crypto.TNSR/USD"],
  ["0x12d65f1ff0624e4fe2cb450040cc7ba1db91914ad29e4c1a1d339494f078a92b", "Crypto.TOKEN/USD"],
  ["0x8963217838ab4cf5cadc172203c1f0b763fbaa45f346d8ee50ba994bbcac3026", "Crypto.TON/USD"],
  ["0xddcd037c2de8dbf2a0f6eebf1c039924baf7ebf0e7eb3b44bf421af69cc1b06d", "Crypto.TRB/USD"],
  ["0xbfaca10c7f35ca09191ebac4e1c0adfe852ea8aef2b202ac6b4e71bddb350473", "Crypto.TRUMATIC/USD"],
  ["0x67aed5a24fdad045475e7195c98a98aea119c763f272d4523f5bac93a4f33c2b", "Crypto.TRX/USD"],
  ["0xf9c2e890443dd995d0baafc08eea3358be1ffb874f93f99c30b3816c460bbac3", "Crypto.TURBOS/USD"],
  ["0x433faaa801ecdb6618e3897177a118b273a8e18cc3ff545aadfc207d58d028f7", "Crypto.TUSD/USD"],
  ["0x35f1e0d9248599d276111821c0fd636b43eef18737c3bb61c7c5c47059787a32", "Crypto.TWT/USD"],
  ["0x4b78d251770732f6304b1f41e9bebaabc3b256985ef18988f6de8d6562dd254c", "Crypto.UMA/USD"],
  ["0x78d185a741d07edb3412b09008b7c5cfb9bbbd7d568bf00ba737b456ba171501", "Crypto.UNI/USD"],
  ["0x62e158019396bf8405824b858452a1d7cc6dbb95f2e54c5641b60bb94d1f614a", "Crypto.UNIBOT/USD"],
  ["0x3a1050a3c03354c94ed44acf808327f05b7f9d610f38644684f5ce4796cce27b", "Crypto.USDA/USD"],
  ["0x41283d3f78ccb459a24e5f1f1b9f5a72a415a26ff9ce0391a6878f4cda6b477b", "Crypto.USDB/USD"],
  ["0xeaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a", "Crypto.USDC/USD"],
  ["0x6d20210495d6518787b72e4ad06bc4df21e68d89a802cf6bced2fca6c29652a6", "Crypto.USDD/USD"],
  ["0x6ec879b1e9963de5ee97e9c8710b742d6228252a5e2ca12d4ae81d7fe5ee8c5d", "Crypto.USDE/USD"],
  ["0xa6a0dfa49b6b3a93510658245618099f5e842514970f596cf64fad9e0d658193", "Crypto.USDM/USD"],
  ["0xa6c8eca9aea31d6bb81fd6576638f30692d4afaa73237c097c193477aa5003b3", "Crypto.USDP/USD"],
  ["0x2b89b9dc8fdf9f34709a5b106b472f0f39bb6ca9ce04b0fd7f2e971688e2e53b", "Crypto.USDT/USD"],
  ["0x8ca288964980494c8ed2cb944d8a28f158a30e513d483fdfbe30fbe3719a14e4", "Crypto.USDV/USD"],
  ["0xe393449f6aff8a4b6d3e1165a7c9ebec103685f3b41e60db4277b5b6d10e7326", "Crypto.USDY/USD"],
  ["0xef94acc2fb09eb976c6eb3000bab898cab891d5b800702cd1dc88e61d7c3c5e6", "Crypto.USTC/USD"],
  ["0x680cb2773b2103ecb26e4eda5f4b00990594e7d9ee075a96f79c4265bd28515a", "Crypto.UXD/USD"],
  ["0x2a03e3402d02699db71c2a31dda58f990ba2de0eb3f8b62829b7eec198aa5292", "Crypto.VCHF/USD"],
  ["0x4b1ddc065d08214eb06878d6130a66665febc3fd201733e9bb481094b5de8a32", "Crypto.VELA/USD"],
  ["0x1722176f738aa1aafea170f8b27724042c5ac6d8cb9cf8ae02d692b0927e0681", "Crypto.VET/USD"],
  ["0x56242a7a4075c921a5fccded628b99beef9c34366090dbdd7cb0d87db7cdb9a2", "Crypto.VEUR/USD"],
  ["0xf80ba6864e3f1b36c873bcb2767079d5fb86cf04855e714b2a0f30d7e0830a24", "Crypto.VIC/USD"],
  ["0x57ff7100a282e4af0c91154679c5dae2e5dcacb93fd467ea9cb7e58afdcfde27", "Crypto.VSUI/USD"],
  ["0xeff7446475e218517566ea99e72a4abec2e1bd8498b43b7d8331e29dcb059389", "Crypto.W/USD"],
  ["0x70dddcb074263ce201ea9a1be5b3537e59ed5b9060d309e12d61762cfe59fb7e", "Crypto.WAVES/USD"],
  ["0xc9d8b075a5c69303365ae23633d4e085199bf5c520a3b90fed1322a0342ffc33", "Crypto.WBTC/USD"],
  ["0x9ee4e7c60b940440a261eb54b6d8149c23b580ed7da3139f7f08f4ea29dad395", "Crypto.WEETH/USD"],
  ["0xf63f008474fad630207a1cfa49207d59bca2593ea64fc0a6da9bf3337485791c", "Crypto.WEMIX/USD"],
  ["0x5169491cd7e2a44c98353b779d5eb612e4ac32e073f5cc534303d86307c2f1bc", "Crypto.WEN/USD"],
  ["0x9d4294bbcd1174d6f2003ec365831e64cc31d9f6f15a2b85399db8d5000960f6", "Crypto.WETH/USD"],
  ["0x4ca4beeca86f0d164160323817a4e42b10010a724c2217c6ee41b54cd4cc61fc", "Crypto.WIF/USD"],
  ["0xd6835ad1f773de4a378115eb6824bd0c0e42d84d1c84d9750e853fb6b6c7794a", "Crypto.WLD/USD"],
  ["0x6e89dbed2351e3c85a9ce1c782ca1e34b6ef2c4775f1cb691739bbe6d0697e86", "Crypto.WOJAK/USD"],
  ["0x43cddc3e1d0b17fec1cf2a230f46e9319887a037dcee56e053af44d8259fb042", "Crypto.WOM/USD"],
  ["0xb82449fd728133488d2d41131cffe763f9c1693b73c544d9ef6aaa371060dd25", "Crypto.WOO/USD"],
  ["0x6df640f3b8963d8f8358f791f352b8364513f6ab1cca5ed3f1f7b5448980e784", "Crypto.WSTETH/USD"],
  ["0xf7ac0d8fdf22640d39de13816cd0942aa6cf3874b95028d9a602056e1dc95e96", "Crypto.XAI/USD"],
  ["0x44465e17d2e9d390e70c999d5a11fda4f092847fcd2e3e5aa089d96c98a30e67", "Crypto.XAUT/USD"],
  ["0xf689a76211f3505826357e49ddd683221d9632735e2b27fd07fb1805c47cdace", "Crypto.XDC/USD"],
  ["0x44622616f246ce5fc46cf9ebdb879b0c0157275510744cea824ad206e48390b3", "Crypto.XEC/USD"],
  ["0xb7a8eba68a997cd0210c2e1e4ee811ad2d174b3611c22d9ebf16f4cb7e9ba850", "Crypto.XLM/USD"],
  ["0x46b8cc9347f04391764a0361e0b17c3ba394b001e7c304f7650f6376e37c321d", "Crypto.XMR/USD"],
  ["0x9f520bbc39aad043e3bbb46b05079222d63bd94c150205f2a8889b6b36a0f376", "Crypto.XPRT/USD"],
  ["0x816c6604beb161d3ad9c3b584f06c682e6299516165d756a68c7660b073b7072", "Crypto.XRD/USD"],
  ["0xec5d399846a9209f3fe5881d70aae9268c94339ff9817e8d18ff19fa05eea1c8", "Crypto.XRP/USD"],
  ["0x0affd4b8ad136a21d79bc82450a325ee12ff55a235abc242666e423b8bcffd03", "Crypto.XTZ/USD"],
  ["0x831624f51c7bd4499fe5e0f16dfa2fd22584ae4bdc496bbbbe9ba831b2d9bce9", "Crypto.XVS/USD"],
  ["0x246db9051be6bdfdbbd75eb7dfbeaa23bf343456843d4cc878e930250fc17582", "Crypto.YES/USD"],
  ["0x425f4b198ab2504936886c1e93511bb6720fbcf2045a4f3c0723bb213846022f", "Crypto.YFI/USD"],
  ["0xbe9b59d178f0d6a97ab4c343bff2aa69caa1eaae3e9048a65788c529b125bb24", "Crypto.ZEC/USD"],
  ["0xd183ffe0155e8a55e7274155a14ea2e8b54059cef471f88fa3f7eb4b5d8dbc24", "Crypto.ZEN/USD"],
  ["0x9a11b5c6c8d6d266444459316c3aee7684aaa5a5434b189a173d8cddbb3deaae", "Crypto.ZERO/USD"],
  ["0xb70656181007f487e392bf0d92e55358e9f0da5da6531c7c4ce7828aa11277fe", "Crypto.ZETA/USD"],
  ["0x31558e9ccb18c151af6c52bf78afd03098a7aca1b9cf171a65b693b464c2f066", "Crypto.ZEUS/USD"],
  ["0x609722f3b6dc10fee07907fe86781d55eb9121cd0705b480954c00695d78f0cb", "Crypto.ZIL/USD"],
  ["0x61198c533c5753f457904edc603b315f1eec0dddb71a8f8ac8ffadb644e7cfd2", "Crypto.ZKF/USD"],
  ["0x7d17b9fe4ea7103be16b6836984fabbc889386d700ca5e5b3d34b7f92e449268", "Crypto.ZRX/USD"],
  ["0x5372f717fd6845e363b0268d0a0bee8f479c3aa23f1152a507557d9f2b2d0546", "Equity.FR.C3M/EUR"],
  ["0x6d881ecf489bb24aa10468ca332e3ea262a9bf3a8fb9db1eadac9cce544b16b1", "Equity.GB.CSPX/USD"],
  ["0x45b05d03edb6081e7ae536b94b450a42f43e6342791c560a481030b41f9b945d", "Equity.GB.IB01/USD"],
  ["0x8086320540b3d7b9b4b564e6756a29a9cb91a7cd97d5fafff63841959d3a09a0", "Equity.GB.IBTA/USD"],
  ["0xdd08f0a40e21ce42178b25bdd9461a2beebccbaa2a781a6e02b323576c4072ab", "Equity.IE.EUE/EUR"],
  ["0xb9721b762f3cc58b68222092d35d540dd7418d9c4deea0c3fa6f14fb98ee7ed4", "Equity.NL.BCOIN/USD"],
  ["0x49f6b65cb1de6b10eaf75e7c03ca029c306d0357e91b5311b175084a5ad55688", "Equity.US.AAPL/USD"],
  ["0xafb12c5ccf50495c7a7b04447410d7feb4b3218a663ecbd96aa82e676d3c4f1e", "Equity.US.AI/USD"],
  ["0x5b1703d7eb9dc8662a61556a2ca2f9861747c3fc803e01ba5a8ce35cb50a13a1", "Equity.US.AMC/USD"],
  ["0x10946973bfcc936b423d52ee2c5a538d96427626fe6d1a7dae14b1c401d1e794", "Equity.US.AMGN/USD"],
  ["0xb5d0e0fa58a1f8b81498ae670ce93c872d14434b72c364885d4fa1b257cbb07a", "Equity.US.AMZN/USD"],
  ["0x8f1c7775f51f7b7990953ad43c336778b8aa1bc3be8d8c1db68a020e078e8a2c", "Equity.US.ARKB/USD"],
  ["0xb2fe0af6c828efefda3ffda664f919825a535aa28a0f19fc238945c7aff540b1", "Equity.US.ARKK/USD"],
  ["0x9ff7b9a93df40f6d7edc8184173c50f4ae72152c6142f001e8202a26f951d710", "Equity.US.AXP/USD"],
  ["0x8419416ba640c8bbbcf2d464561ed7dd860db1e38e51cec9baf1e34c4be839ae", "Equity.US.BA/USD"],
  ["0xb2f5fb947fb6846c9d9860159179f206193a47bab3cd7ade2d3754c25051c0e1", "Equity.US.BITB/USD"],
  ["0xc5676e71c8c76379bb2298934b26e2e848b196716362ea32d66dbcc228607027", "Equity.US.BITS/USD"],
  ["0x68d038affb5895f357d7b3527a6d3cd6a54edd0fe754a1248fb3462e47828b08", "Equity.US.BLK/USD"],
  ["0xb40b427690447a6fd5f75aa4b35dca20ed9b2e42d8eaa80ecf4d81406db68cd8", "Equity.US.BRRR/USD"],
  ["0xf8a4a02d7b060a41879eaaab1f729bc2d68a4da491fb66d3446ba9dd6606e97d", "Equity.US.BTCO/USD"],
  ["0x7e9582ecb9f1cb90400e897fb364ea35ed4193b47ce19a7eff8e392f695550be", "Equity.US.BTCW/USD"],
  ["0x5d72edffd1b1f72506018204afe1cdf9f31b97e6a30ba1d079bcb242c874529c", "Equity.US.BTF/USD"],
  ["0xad04597ba688c350a97265fcb60585d6a80ebd37e147b817c94f101a32e58b4c", "Equity.US.CAT/USD"],
  ["0xfee33f2a978bf32dd6b662b65ba8083c6773b494f8401194ec1870c640860245", "Equity.US.COIN/USD"],
  ["0x5557d206aa0dd037fc082f03bbd78653f01465d280ea930bc93251f0eb60c707", "Equity.US.CPNG/USD"],
  ["0xfeff234600320f4d6bb5a01d02570a9725c1e424977f2b823f7231e6857bdae8", "Equity.US.CRM/USD"],
  ["0x3f4b77dd904e849f70e1e812b7811de57202b49bc47c56391275c0f45f2ec481", "Equity.US.CSCO/USD"],
  ["0xf464e36fd4ef2f1c3dc30801a9ab470dcdaaa0af14dd3cf6ae17a7fca9e051c5", "Equity.US.CVX/USD"],
  ["0x78c13ca4415e910dcb9516b811e630e6fa8f98999615eb66955cbef4337c1d3f", "Equity.US.DEFI/USD"],
  ["0x57cff3a9a4d4c87b595a2d1bd1bac0240400a84677366d632ab838bbbe56f763", "Equity.US.DIA/USD"],
  ["0x703e36203020ae6761e6298975764e266fb869210db9b35dd4e4225fa68217d0", "Equity.US.DIS/USD"],
  ["0xf3b50961ff387a3d68217e2715637d0add6013e7ecb83c36ae8062f97c46929e", "Equity.US.DOW/USD"],
  ["0xd407e68cec58205be82a6140a668dc42f8d9079bcf3be4aa4b41f41f7b983035", "Equity.US.EEM/USD"],
  ["0x3b7ef6c95ceedbffbb66bff3d6135a200c5d0a0466b0c90812510ceaedebaf04", "Equity.US.EFA/USD"],
  ["0x337611acbeb14ef4ea0d754226bc8b900ff5fd2e469e762a4b135034c3ed9897", "Equity.US.EZBC/USD"],
  ["0xb3a76e70a55517e0405cc90a2545de4c30413c13c532caf96a734103ec4259e9", "Equity.US.FBTC/USD"],
  ["0xdc1498a077fef2b6e139e6212da2849c6c64a60f3ce9e13634aea9cf7ff7cae5", "Equity.US.GBTC/USD"],
  ["0xe1d3115c6e7ac649faca875b3102f1000ab5e06b03f6903e0d699f0f5315ba86", "Equity.US.GE/USD"],
  ["0xe190f467043db04548200354889dfe0d9d314c08b8d4e62fabf4d5a3140fecca", "Equity.US.GLD/USD"],
  ["0x6f9cd89ef1b7fd39f667101a91ad578b6c6ace4579d5f7f285a4b06aa4504be6", "Equity.US.GME/USD"],
  ["0xe65ff435be42630439c96396653a342829e877e2aafaeaf1a10d0ee5fd2cf3f2", "Equity.US.GOOG/USD"],
  ["0xe0f87bbde799f33615b83a601b66415e850788000cd7286a3e7295f23c1bb353", "Equity.US.GOVT/USD"],
  ["0x9c68c0c6999765cf6e27adf75ed551b34403126d3b0d5b686a2addb147ed4554", "Equity.US.GS/USD"],
  ["0xb3a83dbe70b62241b0f916212e097465a1b31085fa30da3342dd35468ca17ca5", "Equity.US.HD/USD"],
  ["0x69f766aa85e9273ab49eaafcfbf054dc12fdba781e4029ebd1c3993d5d5246c2", "Equity.US.HODL/USD"],
  ["0x107918baaaafb79cd9df1c8369e44ac21136d95f3ca33f2373b78f24ba1e3e6a", "Equity.US.HON/USD"],
  ["0x2077043ee3b67b9a70949c8396c110f6cf43de8e6d9e6efdcbd557a152cf2c6e", "Equity.US.HYG/USD"],
  ["0x9db6bc1e6e9e5e60f6884e1cd8e4399cca9d0454c6e7234ad79680cf139748f5", "Equity.US.IBIT/USD"],
  ["0xcfd44471407f4da89d469242546bb56f5c626d5bef9bd8b9327783065b43c3ef", "Equity.US.IBM/USD"],
  ["0xc1751e085ee292b8b3b9dd122a135614485a201c35dfc653553f0e28c1baf3ff", "Equity.US.INTC/USD"],
  ["0x5967c196ca33171a0b2d140ddc6334b998dd71c2ddd85ba7920c35fd6ed20fe9", "Equity.US.IVV/USD"],
  ["0xeff690a187797aa225723345d4612abec0bf0cec1ae62347c0e7b1905d730879", "Equity.US.IWM/USD"],
  ["0x12848738d5db3aef52f51d78d98fc8b8b8450ffb19fb3aeeb67d38f8c147ff63", "Equity.US.JNJ/USD"],
  ["0x7f4f157e57bfcccd934c566df536f34933e74338fe241a5425ce561acdab164e", "Equity.US.JPM/USD"],
  ["0x9aa471dccea36b90703325225ac76189baf7e0cc286b8843de1de4f31f9caa7d", "Equity.US.KO/USD"],
  ["0x0fc2ad77a9ab75bcbc3ebd7a9ff60facd08c517309e2d684baa979c910a0e43e", "Equity.US.MARA/USD"],
  ["0xd3178156b7c0f6ce10d6da7d347952a672467b51708baaf1a57ffe1fb005824a", "Equity.US.MCD/USD"],
  ["0x78a3e3b8e676a8f73c439f5d749737034b139bbbe899ba5775216fba596607fe", "Equity.US.META/USD"],
  ["0x58f4ee3a0fc4de834a2e96274a696d0f3d8ec45fc76131a6a49fcd18d3ca9812", "Equity.US.MINT/USD"],
  ["0xfd05a384ba19863cbdfc6575bed584f041ef50554bab3ab482eabe4ea58d9f81", "Equity.US.MMM/USD"],
  ["0xc81114e16ec3cbcdf20197ac974aed5a254b941773971260ce09e7caebd6af46", "Equity.US.MRK/USD"],
  ["0xd0ca23c1cc005e004ccf1db5bf76aeb6a49218f43dac3d4b275e92de12ded4d1", "Equity.US.MSFT/USD"],
  ["0xe1e80251e5f5184f2195008382538e847fafc36f751896889dd3d1b1f6111f09", "Equity.US.MSTR/USD"],
  ["0x8376cfd7ca8bcdf372ced05307b24dced1f15b1afafdeff715664598f15a3dd2", "Equity.US.NFLX/USD"],
  ["0x67649450b4ca4bfff97cbaf96d2fd9e40f6db148cb65999140154415e4378e14", "Equity.US.NKE/USD"],
  ["0xb1073854ed24cbc755dc527418f52b7d271f6cc967bbf8d8129112b18860a593", "Equity.US.NVDA/USD"],
  ["0xad2fda41998f4e7be99a2a7b27273bd16f183d9adfc014a4f5e5d3d6cd519bf4", "Equity.US.PG/USD"],
  ["0x9695e2b96ea7b3859da9ed25b7a46a920a776e2fdae19a7bcfdf2b219230452d", "Equity.US.QQQ/USD"],
  ["0x46417522a59b245c5af35c33c13426d991b36514c4c85aaefe1cf787e7daad90", "Equity.US.RIOT/USD"],
  ["0x765f416f2d676848b5016428bc9295fda3e71d5e97b16df75179a378cef040ec", "Equity.US.SHV/USD"],
  ["0x19e09bb805456ada3979a7d1cbb4b6d63babc3a0f8e8a9509f68afa5c4c11cd5", "Equity.US.SPY/USD"],
  ["0x9f383d612ac09c7e6ffda24deca1502fce72e0ba58ff473fea411d9727401cc1", "Equity.US.TLT/USD"],
  ["0xd45392f678a1287b8412ed2aaa326def204a5c234df7cb5552d756c332283d81", "Equity.US.TRV/USD"],
  ["0x16dad506d7db8da01c87581c87ca897a012a153557d4d578c3b9c9e1bc0632f1", "Equity.US.TSLA/USD"],
  ["0x05380f8817eb1316c0b35ac19c3caa92c9aa9ea6be1555986c46dce97fed6afd", "Equity.US.UNH/USD"],
  ["0x98b3bc80a9e8ea755e29ef29575c3de9d5ae8213450c66e8f0759d5a7c0d8aad", "Equity.US.USFR/USD"],
  ["0xd00bd77d97dc5769de77f96d0e1a79cbf1364e14d0dbf046e221bce2e89710dd", "Equity.US.USO/USD"],
  ["0xc719eb7bab9b2bc060167f1d1680eb34a29c490919072513b545b9785b73ee90", "Equity.US.V/USD"],
  ["0x236b30dd09a9c00dfeec156c7b1efd646c0f01825a1758e3e4a0679e3bdff179", "Equity.US.VOO/USD"],
  ["0x6672325a220c0ee1166add709d5ba2e51c185888360c01edc76293257ef68b58", "Equity.US.VZ/USD"],
  ["0xed5c2a2711e2a638573add9a8aded37028aea4ac69f1431a1ced9d9db61b2225", "Equity.US.WBA/USD"],
  ["0x327ae981719058e6fb44e132fb4adbf1bd5978b43db0661bfdaefd9bea0c82dc", "Equity.US.WMT/USD"],
  ["0x8bf649e08e5a86129c57990556c8eec30e296069b524f4639549282bc5c07bb4", "Equity.US.XLE/USD"],
  ["0x67a6f93030420c1c9e3fe37c1ab6b77966af82f995944a9fefce357a22854a80", "FX.AUD/USD"],
  ["0xa995d00bb36a63cef7fd2c287dc105fc8f3d93779f062f09551b0af3e81ec30b", "FX.EUR/USD"],
  ["0x84c2dde9633d93d1bcad84e7dc41c9d56578b7ec52fabedc1f335d673df0a7c1", "FX.GBP/USD"],
  ["0x92eea8ba1b00078cdc2ef6f64f091f262e8c7d0576ee4677572f314ebfafa4c7", "FX.NZD/USD"],
  ["0xd2db4dbf1aea74e0f666b0e8f73b9580d407f5e5cf931940b06dc633d7a95906", "FX.USD/BRL"],
  ["0x3112b03a41c910ed446852aacf67118cb1bec67b2cd0b9a214c58cc0eaa2ecca", "FX.USD/CAD"],
  ["0x0b1e3297e69f162877b577b0d6a47a0d63b2392bc8499e6540da4187a63e28f8", "FX.USD/CHF"],
  ["0xeef52e09c878ad41f6a81803e3640fe04dceea727de894edd4ea117e2e332e66", "FX.USD/CNH"],
  ["0x19d75fde7fee50fe67753fdc825e583594eb2f51ae84e114a5246c4ab23aff4c", "FX.USD/HKD"],
  ["0xef2c98c804ba503c6a707e38be4dfbb16683775f195b091252bf24693042fd52", "FX.USD/JPY"],
  ["0xe13b1c1ffb32f34e1be9545583f01ef385fde7f42ee66049d30570dc866b77ca", "FX.USD/MXN"],
  ["0x235ddea9f40e9af5814dbcc83a418b98e3ee8df1e34e1ae4d45cf5de596023a3", "FX.USD/NOK"],
  ["0x8ccb376aa871517e807358d4e3cf0bc7fe4950474dbe6c9ffc21ef64e43fc676", "FX.USD/SEK"],
  ["0x396a969a9c1480fa15ed50bc59149e2c0075a72fe8f458ed941ddec48bdb4918", "FX.USD/SGD"],
  ["0x389d889017db82bf42141f23b61b8de938a4e2d156e36312175bebf797f493f1", "FX.USD/ZAR"],
  ["0xf2fb02c32b055c805e7238d628e5e9dadef274376114eb1f012337cabe93871e", "Metal.XAG/USD"],
  ["0x765d2ba906dbc32ca17cc11f5310a89e9ee1f6420508c63861f2f8ba4ee34bb2", "Metal.XAU/USD"],
  ["0x9c196541230ba421baa2a499214564312a46bb47fb6b61ef63db2f70d3ce34c1", "Rates.US10Y"],
  ["0x60076f4fc0dfd634a88b5c3f41e7f8af80b403ca365442b81e582ceb8fc421a2", "Rates.US1M"],
  ["0x7d01ec0cb9d38918cd497f97b24cb6cea5552993f5da05863886e6a2d33ee0aa", "Rates.US2Y"],
  ["0x424c69939fc52a459f6dde758d80f74a3628c0e9b48bfc142df1270c9b9131be", "Rates.US30Y"],
  ["0x5f112a41dc65a8d2b37c533a2fc6f5efed3a385a03c1fb33e534a3857a90c97b", "Rates.US3M"],
  ["0x7d220b081152db0d74a93d3ce383c61d0ec5250c6dd2b2cdb2d1e4b8919e1a6e", "Rates.US5Y"],
  ["0x2400f68d24f1320272d82dd4ac99395166ed7ce172c6c5cd6cf775a697f2dacc", "Rates.US6M"],
  ["0x2087a47ebf7bb31aee61ffd003a71efe2bed0dda16746ddde63f498f68ece6ce", "Rates.US7Y"]
]);

// src/aptos.ts
var import_sdk2 = require("@sentio/sdk");

// node_modules/lru-cache/index.mjs
var perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
var hasAbortController = typeof AbortController === "function";
var AC = hasAbortController ? AbortController : class AbortController2 {
  constructor() {
    this.signal = new AS();
  }
  abort(reason = new Error("This operation was aborted")) {
    this.signal.reason = this.signal.reason || reason;
    this.signal.aborted = true;
    this.signal.dispatchEvent({
      type: "abort",
      target: this.signal
    });
  }
};
var hasAbortSignal = typeof AbortSignal === "function";
var hasACAbortSignal = typeof AC.AbortSignal === "function";
var AS = hasAbortSignal ? AbortSignal : hasACAbortSignal ? AC.AbortController : class AbortSignal2 {
  constructor() {
    this.reason = void 0;
    this.aborted = false;
    this._listeners = [];
  }
  dispatchEvent(e) {
    if (e.type === "abort") {
      this.aborted = true;
      this.onabort(e);
      this._listeners.forEach((f) => f(e), this);
    }
  }
  onabort() {
  }
  addEventListener(ev, fn) {
    if (ev === "abort") {
      this._listeners.push(fn);
    }
  }
  removeEventListener(ev, fn) {
    if (ev === "abort") {
      this._listeners = this._listeners.filter((f) => f !== fn);
    }
  }
};
var warned = /* @__PURE__ */ new Set();
var deprecatedOption = (opt, instead) => {
  const code = `LRU_CACHE_OPTION_${opt}`;
  if (shouldWarn(code)) {
    warn(code, `${opt} option`, `options.${instead}`, LRUCache);
  }
};
var deprecatedMethod = (method, instead) => {
  const code = `LRU_CACHE_METHOD_${method}`;
  if (shouldWarn(code)) {
    const { prototype } = LRUCache;
    const { get } = Object.getOwnPropertyDescriptor(prototype, method);
    warn(code, `${method} method`, `cache.${instead}()`, get);
  }
};
var deprecatedProperty = (field, instead) => {
  const code = `LRU_CACHE_PROPERTY_${field}`;
  if (shouldWarn(code)) {
    const { prototype } = LRUCache;
    const { get } = Object.getOwnPropertyDescriptor(prototype, field);
    warn(code, `${field} property`, `cache.${instead}`, get);
  }
};
var emitWarning = (...a) => {
  typeof process === "object" && process && typeof process.emitWarning === "function" ? process.emitWarning(...a) : console.error(...a);
};
var shouldWarn = (code) => !warned.has(code);
var warn = (code, what, instead, fn) => {
  warned.add(code);
  const msg = `The ${what} is deprecated. Please use ${instead} instead.`;
  emitWarning(msg, "DeprecationWarning", code, fn);
};
var isPosInt = (n2) => n2 && n2 === Math.floor(n2) && n2 > 0 && isFinite(n2);
var getUintArray = (max) => !isPosInt(max) ? null : max <= Math.pow(2, 8) ? Uint8Array : max <= Math.pow(2, 16) ? Uint16Array : max <= Math.pow(2, 32) ? Uint32Array : max <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
var ZeroArray = class extends Array {
  constructor(size) {
    super(size);
    this.fill(0);
  }
};
var Stack = class {
  constructor(max) {
    if (max === 0) {
      return [];
    }
    const UintArray = getUintArray(max);
    this.heap = new UintArray(max);
    this.length = 0;
  }
  push(n2) {
    this.heap[this.length++] = n2;
  }
  pop() {
    return this.heap[--this.length];
  }
};
var LRUCache = class _LRUCache {
  constructor(options = {}) {
    const {
      max = 0,
      ttl,
      ttlResolution = 1,
      ttlAutopurge,
      updateAgeOnGet,
      updateAgeOnHas,
      allowStale,
      dispose,
      disposeAfter,
      noDisposeOnSet,
      noUpdateTTL,
      maxSize = 0,
      maxEntrySize = 0,
      sizeCalculation,
      fetchMethod,
      fetchContext,
      noDeleteOnFetchRejection,
      noDeleteOnStaleGet,
      allowStaleOnFetchRejection,
      allowStaleOnFetchAbort,
      ignoreFetchAbort
    } = options;
    const { length, maxAge, stale } = options instanceof _LRUCache ? {} : options;
    if (max !== 0 && !isPosInt(max)) {
      throw new TypeError("max option must be a nonnegative integer");
    }
    const UintArray = max ? getUintArray(max) : Array;
    if (!UintArray) {
      throw new Error("invalid max value: " + max);
    }
    this.max = max;
    this.maxSize = maxSize;
    this.maxEntrySize = maxEntrySize || this.maxSize;
    this.sizeCalculation = sizeCalculation || length;
    if (this.sizeCalculation) {
      if (!this.maxSize && !this.maxEntrySize) {
        throw new TypeError(
          "cannot set sizeCalculation without setting maxSize or maxEntrySize"
        );
      }
      if (typeof this.sizeCalculation !== "function") {
        throw new TypeError("sizeCalculation set to non-function");
      }
    }
    this.fetchMethod = fetchMethod || null;
    if (this.fetchMethod && typeof this.fetchMethod !== "function") {
      throw new TypeError(
        "fetchMethod must be a function if specified"
      );
    }
    this.fetchContext = fetchContext;
    if (!this.fetchMethod && fetchContext !== void 0) {
      throw new TypeError(
        "cannot set fetchContext without fetchMethod"
      );
    }
    this.keyMap = /* @__PURE__ */ new Map();
    this.keyList = new Array(max).fill(null);
    this.valList = new Array(max).fill(null);
    this.next = new UintArray(max);
    this.prev = new UintArray(max);
    this.head = 0;
    this.tail = 0;
    this.free = new Stack(max);
    this.initialFill = 1;
    this.size = 0;
    if (typeof dispose === "function") {
      this.dispose = dispose;
    }
    if (typeof disposeAfter === "function") {
      this.disposeAfter = disposeAfter;
      this.disposed = [];
    } else {
      this.disposeAfter = null;
      this.disposed = null;
    }
    this.noDisposeOnSet = !!noDisposeOnSet;
    this.noUpdateTTL = !!noUpdateTTL;
    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
    this.ignoreFetchAbort = !!ignoreFetchAbort;
    if (this.maxEntrySize !== 0) {
      if (this.maxSize !== 0) {
        if (!isPosInt(this.maxSize)) {
          throw new TypeError(
            "maxSize must be a positive integer if specified"
          );
        }
      }
      if (!isPosInt(this.maxEntrySize)) {
        throw new TypeError(
          "maxEntrySize must be a positive integer if specified"
        );
      }
      this.initializeSizeTracking();
    }
    this.allowStale = !!allowStale || !!stale;
    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
    this.updateAgeOnGet = !!updateAgeOnGet;
    this.updateAgeOnHas = !!updateAgeOnHas;
    this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
    this.ttlAutopurge = !!ttlAutopurge;
    this.ttl = ttl || maxAge || 0;
    if (this.ttl) {
      if (!isPosInt(this.ttl)) {
        throw new TypeError(
          "ttl must be a positive integer if specified"
        );
      }
      this.initializeTTLTracking();
    }
    if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {
      throw new TypeError(
        "At least one of max, maxSize, or ttl is required"
      );
    }
    if (!this.ttlAutopurge && !this.max && !this.maxSize) {
      const code = "LRU_CACHE_UNBOUNDED";
      if (shouldWarn(code)) {
        warned.add(code);
        const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
        emitWarning(msg, "UnboundedCacheWarning", code, _LRUCache);
      }
    }
    if (stale) {
      deprecatedOption("stale", "allowStale");
    }
    if (maxAge) {
      deprecatedOption("maxAge", "ttl");
    }
    if (length) {
      deprecatedOption("length", "sizeCalculation");
    }
  }
  getRemainingTTL(key) {
    return this.has(key, { updateAgeOnHas: false }) ? Infinity : 0;
  }
  initializeTTLTracking() {
    this.ttls = new ZeroArray(this.max);
    this.starts = new ZeroArray(this.max);
    this.setItemTTL = (index, ttl, start = perf.now()) => {
      this.starts[index] = ttl !== 0 ? start : 0;
      this.ttls[index] = ttl;
      if (ttl !== 0 && this.ttlAutopurge) {
        const t = setTimeout(() => {
          if (this.isStale(index)) {
            this.delete(this.keyList[index]);
          }
        }, ttl + 1);
        if (t.unref) {
          t.unref();
        }
      }
    };
    this.updateItemAge = (index) => {
      this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0;
    };
    this.statusTTL = (status, index) => {
      if (status) {
        status.ttl = this.ttls[index];
        status.start = this.starts[index];
        status.now = cachedNow || getNow();
        status.remainingTTL = status.now + status.ttl - status.start;
      }
    };
    let cachedNow = 0;
    const getNow = () => {
      const n2 = perf.now();
      if (this.ttlResolution > 0) {
        cachedNow = n2;
        const t = setTimeout(
          () => cachedNow = 0,
          this.ttlResolution
        );
        if (t.unref) {
          t.unref();
        }
      }
      return n2;
    };
    this.getRemainingTTL = (key) => {
      const index = this.keyMap.get(key);
      if (index === void 0) {
        return 0;
      }
      return this.ttls[index] === 0 || this.starts[index] === 0 ? Infinity : this.starts[index] + this.ttls[index] - (cachedNow || getNow());
    };
    this.isStale = (index) => {
      return this.ttls[index] !== 0 && this.starts[index] !== 0 && (cachedNow || getNow()) - this.starts[index] > this.ttls[index];
    };
  }
  updateItemAge(_index) {
  }
  statusTTL(_status, _index) {
  }
  setItemTTL(_index, _ttl, _start) {
  }
  isStale(_index) {
    return false;
  }
  initializeSizeTracking() {
    this.calculatedSize = 0;
    this.sizes = new ZeroArray(this.max);
    this.removeItemSize = (index) => {
      this.calculatedSize -= this.sizes[index];
      this.sizes[index] = 0;
    };
    this.requireSize = (k, v, size, sizeCalculation) => {
      if (this.isBackgroundFetch(v)) {
        return 0;
      }
      if (!isPosInt(size)) {
        if (sizeCalculation) {
          if (typeof sizeCalculation !== "function") {
            throw new TypeError("sizeCalculation must be a function");
          }
          size = sizeCalculation(v, k);
          if (!isPosInt(size)) {
            throw new TypeError(
              "sizeCalculation return invalid (expect positive integer)"
            );
          }
        } else {
          throw new TypeError(
            "invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set."
          );
        }
      }
      return size;
    };
    this.addItemSize = (index, size, status) => {
      this.sizes[index] = size;
      if (this.maxSize) {
        const maxSize = this.maxSize - this.sizes[index];
        while (this.calculatedSize > maxSize) {
          this.evict(true);
        }
      }
      this.calculatedSize += this.sizes[index];
      if (status) {
        status.entrySize = size;
        status.totalCalculatedSize = this.calculatedSize;
      }
    };
  }
  removeItemSize(_index) {
  }
  addItemSize(_index, _size) {
  }
  requireSize(_k, _v, size, sizeCalculation) {
    if (size || sizeCalculation) {
      throw new TypeError(
        "cannot set size without setting maxSize or maxEntrySize on cache"
      );
    }
  }
  *indexes({ allowStale = this.allowStale } = {}) {
    if (this.size) {
      for (let i = this.tail; true; ) {
        if (!this.isValidIndex(i)) {
          break;
        }
        if (allowStale || !this.isStale(i)) {
          yield i;
        }
        if (i === this.head) {
          break;
        } else {
          i = this.prev[i];
        }
      }
    }
  }
  *rindexes({ allowStale = this.allowStale } = {}) {
    if (this.size) {
      for (let i = this.head; true; ) {
        if (!this.isValidIndex(i)) {
          break;
        }
        if (allowStale || !this.isStale(i)) {
          yield i;
        }
        if (i === this.tail) {
          break;
        } else {
          i = this.next[i];
        }
      }
    }
  }
  isValidIndex(index) {
    return index !== void 0 && this.keyMap.get(this.keyList[index]) === index;
  }
  *entries() {
    for (const i of this.indexes()) {
      if (this.valList[i] !== void 0 && this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield [this.keyList[i], this.valList[i]];
      }
    }
  }
  *rentries() {
    for (const i of this.rindexes()) {
      if (this.valList[i] !== void 0 && this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield [this.keyList[i], this.valList[i]];
      }
    }
  }
  *keys() {
    for (const i of this.indexes()) {
      if (this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield this.keyList[i];
      }
    }
  }
  *rkeys() {
    for (const i of this.rindexes()) {
      if (this.keyList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield this.keyList[i];
      }
    }
  }
  *values() {
    for (const i of this.indexes()) {
      if (this.valList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield this.valList[i];
      }
    }
  }
  *rvalues() {
    for (const i of this.rindexes()) {
      if (this.valList[i] !== void 0 && !this.isBackgroundFetch(this.valList[i])) {
        yield this.valList[i];
      }
    }
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  find(fn, getOptions) {
    for (const i of this.indexes()) {
      const v = this.valList[i];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0) continue;
      if (fn(value, this.keyList[i], this)) {
        return this.get(this.keyList[i], getOptions);
      }
    }
  }
  forEach(fn, thisp = this) {
    for (const i of this.indexes()) {
      const v = this.valList[i];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0) continue;
      fn.call(thisp, value, this.keyList[i], this);
    }
  }
  rforEach(fn, thisp = this) {
    for (const i of this.rindexes()) {
      const v = this.valList[i];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0) continue;
      fn.call(thisp, value, this.keyList[i], this);
    }
  }
  get prune() {
    deprecatedMethod("prune", "purgeStale");
    return this.purgeStale;
  }
  purgeStale() {
    let deleted = false;
    for (const i of this.rindexes({ allowStale: true })) {
      if (this.isStale(i)) {
        this.delete(this.keyList[i]);
        deleted = true;
      }
    }
    return deleted;
  }
  dump() {
    const arr = [];
    for (const i of this.indexes({ allowStale: true })) {
      const key = this.keyList[i];
      const v = this.valList[i];
      const value = this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      if (value === void 0) continue;
      const entry = { value };
      if (this.ttls) {
        entry.ttl = this.ttls[i];
        const age = perf.now() - this.starts[i];
        entry.start = Math.floor(Date.now() - age);
      }
      if (this.sizes) {
        entry.size = this.sizes[i];
      }
      arr.unshift([key, entry]);
    }
    return arr;
  }
  load(arr) {
    this.clear();
    for (const [key, entry] of arr) {
      if (entry.start) {
        const age = Date.now() - entry.start;
        entry.start = perf.now() - age;
      }
      this.set(key, entry.value, entry);
    }
  }
  dispose(_v, _k, _reason) {
  }
  set(k, v, {
    ttl = this.ttl,
    start,
    noDisposeOnSet = this.noDisposeOnSet,
    size = 0,
    sizeCalculation = this.sizeCalculation,
    noUpdateTTL = this.noUpdateTTL,
    status
  } = {}) {
    size = this.requireSize(k, v, size, sizeCalculation);
    if (this.maxEntrySize && size > this.maxEntrySize) {
      if (status) {
        status.set = "miss";
        status.maxEntrySizeExceeded = true;
      }
      this.delete(k);
      return this;
    }
    let index = this.size === 0 ? void 0 : this.keyMap.get(k);
    if (index === void 0) {
      index = this.newIndex();
      this.keyList[index] = k;
      this.valList[index] = v;
      this.keyMap.set(k, index);
      this.next[this.tail] = index;
      this.prev[index] = this.tail;
      this.tail = index;
      this.size++;
      this.addItemSize(index, size, status);
      if (status) {
        status.set = "add";
      }
      noUpdateTTL = false;
    } else {
      this.moveToTail(index);
      const oldVal = this.valList[index];
      if (v !== oldVal) {
        if (this.isBackgroundFetch(oldVal)) {
          oldVal.__abortController.abort(new Error("replaced"));
        } else {
          if (!noDisposeOnSet) {
            this.dispose(oldVal, k, "set");
            if (this.disposeAfter) {
              this.disposed.push([oldVal, k, "set"]);
            }
          }
        }
        this.removeItemSize(index);
        this.valList[index] = v;
        this.addItemSize(index, size, status);
        if (status) {
          status.set = "replace";
          const oldValue = oldVal && this.isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
          if (oldValue !== void 0) status.oldValue = oldValue;
        }
      } else if (status) {
        status.set = "update";
      }
    }
    if (ttl !== 0 && this.ttl === 0 && !this.ttls) {
      this.initializeTTLTracking();
    }
    if (!noUpdateTTL) {
      this.setItemTTL(index, ttl, start);
    }
    this.statusTTL(status, index);
    if (this.disposeAfter) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift());
      }
    }
    return this;
  }
  newIndex() {
    if (this.size === 0) {
      return this.tail;
    }
    if (this.size === this.max && this.max !== 0) {
      return this.evict(false);
    }
    if (this.free.length !== 0) {
      return this.free.pop();
    }
    return this.initialFill++;
  }
  pop() {
    if (this.size) {
      const val = this.valList[this.head];
      this.evict(true);
      return val;
    }
  }
  evict(free) {
    const head = this.head;
    const k = this.keyList[head];
    const v = this.valList[head];
    if (this.isBackgroundFetch(v)) {
      v.__abortController.abort(new Error("evicted"));
    } else {
      this.dispose(v, k, "evict");
      if (this.disposeAfter) {
        this.disposed.push([v, k, "evict"]);
      }
    }
    this.removeItemSize(head);
    if (free) {
      this.keyList[head] = null;
      this.valList[head] = null;
      this.free.push(head);
    }
    this.head = this.next[head];
    this.keyMap.delete(k);
    this.size--;
    return head;
  }
  has(k, { updateAgeOnHas = this.updateAgeOnHas, status } = {}) {
    const index = this.keyMap.get(k);
    if (index !== void 0) {
      if (!this.isStale(index)) {
        if (updateAgeOnHas) {
          this.updateItemAge(index);
        }
        if (status) status.has = "hit";
        this.statusTTL(status, index);
        return true;
      } else if (status) {
        status.has = "stale";
        this.statusTTL(status, index);
      }
    } else if (status) {
      status.has = "miss";
    }
    return false;
  }
  // like get(), but without any LRU updating or TTL expiration
  peek(k, { allowStale = this.allowStale } = {}) {
    const index = this.keyMap.get(k);
    if (index !== void 0 && (allowStale || !this.isStale(index))) {
      const v = this.valList[index];
      return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v;
    }
  }
  backgroundFetch(k, index, options, context) {
    const v = index === void 0 ? void 0 : this.valList[index];
    if (this.isBackgroundFetch(v)) {
      return v;
    }
    const ac = new AC();
    if (options.signal) {
      options.signal.addEventListener(
        "abort",
        () => ac.abort(options.signal.reason)
      );
    }
    const fetchOpts = {
      signal: ac.signal,
      options,
      context
    };
    const cb = (v2, updateCache = false) => {
      const { aborted } = ac.signal;
      const ignoreAbort = options.ignoreFetchAbort && v2 !== void 0;
      if (options.status) {
        if (aborted && !updateCache) {
          options.status.fetchAborted = true;
          options.status.fetchError = ac.signal.reason;
          if (ignoreAbort) options.status.fetchAbortIgnored = true;
        } else {
          options.status.fetchResolved = true;
        }
      }
      if (aborted && !ignoreAbort && !updateCache) {
        return fetchFail(ac.signal.reason);
      }
      if (this.valList[index] === p) {
        if (v2 === void 0) {
          if (p.__staleWhileFetching) {
            this.valList[index] = p.__staleWhileFetching;
          } else {
            this.delete(k);
          }
        } else {
          if (options.status) options.status.fetchUpdated = true;
          this.set(k, v2, fetchOpts.options);
        }
      }
      return v2;
    };
    const eb = (er) => {
      if (options.status) {
        options.status.fetchRejected = true;
        options.status.fetchError = er;
      }
      return fetchFail(er);
    };
    const fetchFail = (er) => {
      const { aborted } = ac.signal;
      const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
      const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
      const noDelete = allowStale || options.noDeleteOnFetchRejection;
      if (this.valList[index] === p) {
        const del = !noDelete || p.__staleWhileFetching === void 0;
        if (del) {
          this.delete(k);
        } else if (!allowStaleAborted) {
          this.valList[index] = p.__staleWhileFetching;
        }
      }
      if (allowStale) {
        if (options.status && p.__staleWhileFetching !== void 0) {
          options.status.returnedStale = true;
        }
        return p.__staleWhileFetching;
      } else if (p.__returned === p) {
        throw er;
      }
    };
    const pcall = (res, rej) => {
      this.fetchMethod(k, v, fetchOpts).then((v2) => res(v2), rej);
      ac.signal.addEventListener("abort", () => {
        if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
          res();
          if (options.allowStaleOnFetchAbort) {
            res = (v2) => cb(v2, true);
          }
        }
      });
    };
    if (options.status) options.status.fetchDispatched = true;
    const p = new Promise(pcall).then(cb, eb);
    p.__abortController = ac;
    p.__staleWhileFetching = v;
    p.__returned = null;
    if (index === void 0) {
      this.set(k, p, { ...fetchOpts.options, status: void 0 });
      index = this.keyMap.get(k);
    } else {
      this.valList[index] = p;
    }
    return p;
  }
  isBackgroundFetch(p) {
    return p && typeof p === "object" && typeof p.then === "function" && Object.prototype.hasOwnProperty.call(
      p,
      "__staleWhileFetching"
    ) && Object.prototype.hasOwnProperty.call(p, "__returned") && (p.__returned === p || p.__returned === null);
  }
  // this takes the union of get() and set() opts, because it does both
  async fetch(k, {
    // get options
    allowStale = this.allowStale,
    updateAgeOnGet = this.updateAgeOnGet,
    noDeleteOnStaleGet = this.noDeleteOnStaleGet,
    // set options
    ttl = this.ttl,
    noDisposeOnSet = this.noDisposeOnSet,
    size = 0,
    sizeCalculation = this.sizeCalculation,
    noUpdateTTL = this.noUpdateTTL,
    // fetch exclusive options
    noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
    allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
    ignoreFetchAbort = this.ignoreFetchAbort,
    allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
    fetchContext = this.fetchContext,
    forceRefresh = false,
    status,
    signal
  } = {}) {
    if (!this.fetchMethod) {
      if (status) status.fetch = "get";
      return this.get(k, {
        allowStale,
        updateAgeOnGet,
        noDeleteOnStaleGet,
        status
      });
    }
    const options = {
      allowStale,
      updateAgeOnGet,
      noDeleteOnStaleGet,
      ttl,
      noDisposeOnSet,
      size,
      sizeCalculation,
      noUpdateTTL,
      noDeleteOnFetchRejection,
      allowStaleOnFetchRejection,
      allowStaleOnFetchAbort,
      ignoreFetchAbort,
      status,
      signal
    };
    let index = this.keyMap.get(k);
    if (index === void 0) {
      if (status) status.fetch = "miss";
      const p = this.backgroundFetch(k, index, options, fetchContext);
      return p.__returned = p;
    } else {
      const v = this.valList[index];
      if (this.isBackgroundFetch(v)) {
        const stale = allowStale && v.__staleWhileFetching !== void 0;
        if (status) {
          status.fetch = "inflight";
          if (stale) status.returnedStale = true;
        }
        return stale ? v.__staleWhileFetching : v.__returned = v;
      }
      const isStale = this.isStale(index);
      if (!forceRefresh && !isStale) {
        if (status) status.fetch = "hit";
        this.moveToTail(index);
        if (updateAgeOnGet) {
          this.updateItemAge(index);
        }
        this.statusTTL(status, index);
        return v;
      }
      const p = this.backgroundFetch(k, index, options, fetchContext);
      const hasStale = p.__staleWhileFetching !== void 0;
      const staleVal = hasStale && allowStale;
      if (status) {
        status.fetch = hasStale && isStale ? "stale" : "refresh";
        if (staleVal && isStale) status.returnedStale = true;
      }
      return staleVal ? p.__staleWhileFetching : p.__returned = p;
    }
  }
  get(k, {
    allowStale = this.allowStale,
    updateAgeOnGet = this.updateAgeOnGet,
    noDeleteOnStaleGet = this.noDeleteOnStaleGet,
    status
  } = {}) {
    const index = this.keyMap.get(k);
    if (index !== void 0) {
      const value = this.valList[index];
      const fetching = this.isBackgroundFetch(value);
      this.statusTTL(status, index);
      if (this.isStale(index)) {
        if (status) status.get = "stale";
        if (!fetching) {
          if (!noDeleteOnStaleGet) {
            this.delete(k);
          }
          if (status) status.returnedStale = allowStale;
          return allowStale ? value : void 0;
        } else {
          if (status) {
            status.returnedStale = allowStale && value.__staleWhileFetching !== void 0;
          }
          return allowStale ? value.__staleWhileFetching : void 0;
        }
      } else {
        if (status) status.get = "hit";
        if (fetching) {
          return value.__staleWhileFetching;
        }
        this.moveToTail(index);
        if (updateAgeOnGet) {
          this.updateItemAge(index);
        }
        return value;
      }
    } else if (status) {
      status.get = "miss";
    }
  }
  connect(p, n2) {
    this.prev[n2] = p;
    this.next[p] = n2;
  }
  moveToTail(index) {
    if (index !== this.tail) {
      if (index === this.head) {
        this.head = this.next[index];
      } else {
        this.connect(this.prev[index], this.next[index]);
      }
      this.connect(this.tail, index);
      this.tail = index;
    }
  }
  get del() {
    deprecatedMethod("del", "delete");
    return this.delete;
  }
  delete(k) {
    let deleted = false;
    if (this.size !== 0) {
      const index = this.keyMap.get(k);
      if (index !== void 0) {
        deleted = true;
        if (this.size === 1) {
          this.clear();
        } else {
          this.removeItemSize(index);
          const v = this.valList[index];
          if (this.isBackgroundFetch(v)) {
            v.__abortController.abort(new Error("deleted"));
          } else {
            this.dispose(v, k, "delete");
            if (this.disposeAfter) {
              this.disposed.push([v, k, "delete"]);
            }
          }
          this.keyMap.delete(k);
          this.keyList[index] = null;
          this.valList[index] = null;
          if (index === this.tail) {
            this.tail = this.prev[index];
          } else if (index === this.head) {
            this.head = this.next[index];
          } else {
            this.next[this.prev[index]] = this.next[index];
            this.prev[this.next[index]] = this.prev[index];
          }
          this.size--;
          this.free.push(index);
        }
      }
    }
    if (this.disposed) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift());
      }
    }
    return deleted;
  }
  clear() {
    for (const index of this.rindexes({ allowStale: true })) {
      const v = this.valList[index];
      if (this.isBackgroundFetch(v)) {
        v.__abortController.abort(new Error("deleted"));
      } else {
        const k = this.keyList[index];
        this.dispose(v, k, "delete");
        if (this.disposeAfter) {
          this.disposed.push([v, k, "delete"]);
        }
      }
    }
    this.keyMap.clear();
    this.valList.fill(null);
    this.keyList.fill(null);
    if (this.ttls) {
      this.ttls.fill(0);
      this.starts.fill(0);
    }
    if (this.sizes) {
      this.sizes.fill(0);
    }
    this.head = 0;
    this.tail = 0;
    this.initialFill = 1;
    this.free.length = 0;
    this.calculatedSize = 0;
    this.size = 0;
    if (this.disposed) {
      while (this.disposed.length) {
        this.disposeAfter(...this.disposed.shift());
      }
    }
  }
  get reset() {
    deprecatedMethod("reset", "clear");
    return this.clear;
  }
  get length() {
    deprecatedProperty("length", "size");
    return this.size;
  }
  static get AbortController() {
    return AC;
  }
  static get AbortSignal() {
    return AS;
  }
};
var lru_cache_default = LRUCache;

// src/aptos.ts
var commonOptions = { sparse: true };
var priceGauage = import_sdk.Gauge.register("price", commonOptions);
var priceEMAGauage = import_sdk.Gauge.register("price_ema", commonOptions);
var updates = import_sdk.Counter.register("update");
var updateWithFunder = import_sdk.Counter.register("update_price_feeds_with_funder");
var message = import_sdk.Counter.register("message");
var messages2 = import_sdk.Counter.register("mint_with_pyth_and_price");
var evmPriceGauage = import_sdk.Gauge.register("evm_price_unsafe", commonOptions);
var price_update_occur = import_sdk.Gauge.register("price_update_occur", commonOptions);
var price_update_counter = import_sdk.Counter.register("price_update_counter", {
  resolutionConfig: {
    intervalInMinutes: 1
  }
});
var cache = new lru_cache_default({
  maxSize: 5e3,
  sizeCalculation: (value, key) => {
    return 1;
  }
});
event.bind().onEventPriceFeedUpdate((evt, ctx) => {
  if (!cache.has(ctx.version)) {
    message.add(ctx, 1);
    cache.set(ctx.version, {});
  }
  const priceId = evt.data_decoded.price_feed.price_identifier.bytes;
  const symbol = PRICE_MAP.get(priceId) || "not listed";
  var isNative;
  if (priceId == "0x03ae4db29ed4ae33d323568895aa00337e658e348b37509f5372ae51f0af00d5") {
    isNative = "true";
  } else {
    isNative = "false";
  }
  const labels = { priceId, symbol, isNative };
  priceGauage.record(ctx, getPrice(evt.data_decoded.price_feed.price), labels);
  evmPriceGauage.record(ctx, getPrice(evt.data_decoded.price_feed.price), labels);
  priceEMAGauage.record(ctx, getPrice(evt.data_decoded.price_feed.ema_price), labels);
  updates.add(ctx, 1, labels);
  price_update_counter.add(ctx, 1, labels);
  price_update_occur.record(ctx, 1, labels);
});
function getPrice(p) {
  let expo = p.expo.magnitude.asBigDecimal();
  if (p.expo.negative) {
    expo = expo.negated();
  }
  let base2 = p.price.magnitude.asBigDecimal();
  if (p.price.negative) {
    base2 = base2.negated();
  }
  return base2.multipliedBy((0, import_sdk2.BigDecimal)(10).exponentiatedBy(expo));
}

// src/types/eth/internal/pythevm-processor.ts
var import_eth = require("@sentio/sdk/eth");

// ../../node_modules/ethers/lib.esm/_version.js
var version = "6.12.2";

// ../../node_modules/ethers/lib.esm/utils/properties.js
function checkType(value, type, name) {
  const types = type.split("|").map((t) => t.trim());
  for (let i = 0; i < types.length; i++) {
    switch (type) {
      case "any":
        return;
      case "bigint":
      case "boolean":
      case "number":
      case "string":
        if (typeof value === type) {
          return;
        }
    }
  }
  const error = new Error(`invalid value for type ${type}`);
  error.code = "INVALID_ARGUMENT";
  error.argument = `value.${name}`;
  error.value = value;
  throw error;
}
async function resolveProperties(value) {
  const keys = Object.keys(value);
  const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));
  return results.reduce((accum, v, index) => {
    accum[keys[index]] = v;
    return accum;
  }, {});
}
function defineProperties(target, values, types) {
  for (let key in values) {
    let value = values[key];
    const type = types ? types[key] : null;
    if (type) {
      checkType(value, type, key);
    }
    Object.defineProperty(target, key, { enumerable: true, value, writable: false });
  }
}

// ../../node_modules/ethers/lib.esm/utils/errors.js
function stringify(value) {
  if (value == null) {
    return "null";
  }
  if (Array.isArray(value)) {
    return "[ " + value.map(stringify).join(", ") + " ]";
  }
  if (value instanceof Uint8Array) {
    const HEX = "0123456789abcdef";
    let result = "0x";
    for (let i = 0; i < value.length; i++) {
      result += HEX[value[i] >> 4];
      result += HEX[value[i] & 15];
    }
    return result;
  }
  if (typeof value === "object" && typeof value.toJSON === "function") {
    return stringify(value.toJSON());
  }
  switch (typeof value) {
    case "boolean":
    case "symbol":
      return value.toString();
    case "bigint":
      return BigInt(value).toString();
    case "number":
      return value.toString();
    case "string":
      return JSON.stringify(value);
    case "object": {
      const keys = Object.keys(value);
      keys.sort();
      return "{ " + keys.map((k) => `${stringify(k)}: ${stringify(value[k])}`).join(", ") + " }";
    }
  }
  return `[ COULD NOT SERIALIZE ]`;
}
function isError(error, code) {
  return error && error.code === code;
}
function isCallException(error) {
  return isError(error, "CALL_EXCEPTION");
}
function makeError(message2, code, info) {
  let shortMessage = message2;
  {
    const details = [];
    if (info) {
      if ("message" in info || "code" in info || "name" in info) {
        throw new Error(`value will overwrite populated values: ${stringify(info)}`);
      }
      for (const key in info) {
        if (key === "shortMessage") {
          continue;
        }
        const value = info[key];
        details.push(key + "=" + stringify(value));
      }
    }
    details.push(`code=${code}`);
    details.push(`version=${version}`);
    if (details.length) {
      message2 += " (" + details.join(", ") + ")";
    }
  }
  let error;
  switch (code) {
    case "INVALID_ARGUMENT":
      error = new TypeError(message2);
      break;
    case "NUMERIC_FAULT":
    case "BUFFER_OVERRUN":
      error = new RangeError(message2);
      break;
    default:
      error = new Error(message2);
  }
  defineProperties(error, { code });
  if (info) {
    Object.assign(error, info);
  }
  if (error.shortMessage == null) {
    defineProperties(error, { shortMessage });
  }
  return error;
}
function assert(check2, message2, code, info) {
  if (!check2) {
    throw makeError(message2, code, info);
  }
}
function assertArgument(check2, message2, name, value) {
  assert(check2, message2, "INVALID_ARGUMENT", { argument: name, value });
}
function assertArgumentCount(count, expectedCount, message2) {
  if (message2 == null) {
    message2 = "";
  }
  if (message2) {
    message2 = ": " + message2;
  }
  assert(count >= expectedCount, "missing arguemnt" + message2, "MISSING_ARGUMENT", {
    count,
    expectedCount
  });
  assert(count <= expectedCount, "too many arguments" + message2, "UNEXPECTED_ARGUMENT", {
    count,
    expectedCount
  });
}
var _normalizeForms = ["NFD", "NFC", "NFKD", "NFKC"].reduce((accum, form) => {
  try {
    if ("test".normalize(form) !== "test") {
      throw new Error("bad");
    }
    ;
    if (form === "NFD") {
      const check2 = String.fromCharCode(233).normalize("NFD");
      const expected = String.fromCharCode(101, 769);
      if (check2 !== expected) {
        throw new Error("broken");
      }
    }
    accum.push(form);
  } catch (error) {
  }
  return accum;
}, []);
function assertNormalize(form) {
  assert(_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
    operation: "String.prototype.normalize",
    info: { form }
  });
}
function assertPrivate(givenGuard, guard, className) {
  if (className == null) {
    className = "";
  }
  if (givenGuard !== guard) {
    let method = className, operation = "new";
    if (className) {
      method += ".";
      operation += " " + className;
    }
    assert(false, `private constructor; use ${method}from* methods`, "UNSUPPORTED_OPERATION", {
      operation
    });
  }
}

// ../../node_modules/ethers/lib.esm/utils/data.js
function _getBytes(value, name, copy) {
  if (value instanceof Uint8Array) {
    if (copy) {
      return new Uint8Array(value);
    }
    return value;
  }
  if (typeof value === "string" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {
    const result = new Uint8Array((value.length - 2) / 2);
    let offset = 2;
    for (let i = 0; i < result.length; i++) {
      result[i] = parseInt(value.substring(offset, offset + 2), 16);
      offset += 2;
    }
    return result;
  }
  assertArgument(false, "invalid BytesLike value", name || "value", value);
}
function getBytes(value, name) {
  return _getBytes(value, name, false);
}
function getBytesCopy(value, name) {
  return _getBytes(value, name, true);
}
function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (typeof length === "number" && value.length !== 2 + 2 * length) {
    return false;
  }
  if (length === true && value.length % 2 !== 0) {
    return false;
  }
  return true;
}
function isBytesLike(value) {
  return isHexString(value, true) || value instanceof Uint8Array;
}
var HexCharacters = "0123456789abcdef";
function hexlify(data) {
  const bytes4 = getBytes(data);
  let result = "0x";
  for (let i = 0; i < bytes4.length; i++) {
    const v = bytes4[i];
    result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
  }
  return result;
}
function concat(datas) {
  return "0x" + datas.map((d) => hexlify(d).substring(2)).join("");
}
function dataSlice(data, start, end) {
  const bytes4 = getBytes(data);
  if (end != null && end > bytes4.length) {
    assert(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
      buffer: bytes4,
      length: bytes4.length,
      offset: end
    });
  }
  return hexlify(bytes4.slice(start == null ? 0 : start, end == null ? bytes4.length : end));
}
function zeroPad(data, length, left) {
  const bytes4 = getBytes(data);
  assert(length >= bytes4.length, "padding exceeds data length", "BUFFER_OVERRUN", {
    buffer: new Uint8Array(bytes4),
    length,
    offset: length + 1
  });
  const result = new Uint8Array(length);
  result.fill(0);
  if (left) {
    result.set(bytes4, length - bytes4.length);
  } else {
    result.set(bytes4, 0);
  }
  return hexlify(result);
}
function zeroPadValue(data, length) {
  return zeroPad(data, length, true);
}
function zeroPadBytes(data, length) {
  return zeroPad(data, length, false);
}

// ../../node_modules/ethers/lib.esm/utils/maths.js
var BN_0 = BigInt(0);
var BN_1 = BigInt(1);
var maxValue = 9007199254740991;
function fromTwos(_value, _width) {
  const value = getUint(_value, "value");
  const width = BigInt(getNumber(_width, "width"));
  assert(value >> width === BN_0, "overflow", "NUMERIC_FAULT", {
    operation: "fromTwos",
    fault: "overflow",
    value: _value
  });
  if (value >> width - BN_1) {
    const mask2 = (BN_1 << width) - BN_1;
    return -((~value & mask2) + BN_1);
  }
  return value;
}
function toTwos(_value, _width) {
  let value = getBigInt(_value, "value");
  const width = BigInt(getNumber(_width, "width"));
  const limit = BN_1 << width - BN_1;
  if (value < BN_0) {
    value = -value;
    assert(value <= limit, "too low", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: _value
    });
    const mask2 = (BN_1 << width) - BN_1;
    return (~value & mask2) + BN_1;
  } else {
    assert(value < limit, "too high", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: _value
    });
  }
  return value;
}
function mask(_value, _bits) {
  const value = getUint(_value, "value");
  const bits = BigInt(getNumber(_bits, "bits"));
  return value & (BN_1 << bits) - BN_1;
}
function getBigInt(value, name) {
  switch (typeof value) {
    case "bigint":
      return value;
    case "number":
      assertArgument(Number.isInteger(value), "underflow", name || "value", value);
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return BigInt(value);
    case "string":
      try {
        if (value === "") {
          throw new Error("empty string");
        }
        if (value[0] === "-" && value[1] !== "-") {
          return -BigInt(value.substring(1));
        }
        return BigInt(value);
      } catch (e) {
        assertArgument(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
      }
  }
  assertArgument(false, "invalid BigNumberish value", name || "value", value);
}
function getUint(value, name) {
  const result = getBigInt(value, name);
  assert(result >= BN_0, "unsigned value cannot be negative", "NUMERIC_FAULT", {
    fault: "overflow",
    operation: "getUint",
    value
  });
  return result;
}
var Nibbles = "0123456789abcdef";
function toBigInt(value) {
  if (value instanceof Uint8Array) {
    let result = "0x0";
    for (const v of value) {
      result += Nibbles[v >> 4];
      result += Nibbles[v & 15];
    }
    return BigInt(result);
  }
  return getBigInt(value);
}
function getNumber(value, name) {
  switch (typeof value) {
    case "bigint":
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return Number(value);
    case "number":
      assertArgument(Number.isInteger(value), "underflow", name || "value", value);
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return value;
    case "string":
      try {
        if (value === "") {
          throw new Error("empty string");
        }
        return getNumber(BigInt(value), name);
      } catch (e) {
        assertArgument(false, `invalid numeric string: ${e.message}`, name || "value", value);
      }
  }
  assertArgument(false, "invalid numeric value", name || "value", value);
}
function toNumber(value) {
  return getNumber(toBigInt(value));
}
function toBeHex(_value, _width) {
  const value = getUint(_value, "value");
  let result = value.toString(16);
  if (_width == null) {
    if (result.length % 2) {
      result = "0" + result;
    }
  } else {
    const width = getNumber(_width, "width");
    assert(width * 2 >= result.length, `value exceeds width (${width} bytes)`, "NUMERIC_FAULT", {
      operation: "toBeHex",
      fault: "overflow",
      value: _value
    });
    while (result.length < width * 2) {
      result = "0" + result;
    }
  }
  return "0x" + result;
}
function toBeArray(_value) {
  const value = getUint(_value, "value");
  if (value === BN_0) {
    return new Uint8Array([]);
  }
  let hex = value.toString(16);
  if (hex.length % 2) {
    hex = "0" + hex;
  }
  const result = new Uint8Array(hex.length / 2);
  for (let i = 0; i < result.length; i++) {
    const offset = i * 2;
    result[i] = parseInt(hex.substring(offset, offset + 2), 16);
  }
  return result;
}

// ../../node_modules/ethers/lib.esm/utils/events.js
var EventPayload = class {
  /**
   *  The event filter.
   */
  filter;
  /**
   *  The **EventEmitterable**.
   */
  emitter;
  #listener;
  /**
   *  Create a new **EventPayload** for %%emitter%% with
   *  the %%listener%% and for %%filter%%.
   */
  constructor(emitter3, listener, filter) {
    this.#listener = listener;
    defineProperties(this, { emitter: emitter3, filter });
  }
  /**
   *  Unregister the triggered listener for future events.
   */
  async removeListener() {
    if (this.#listener == null) {
      return;
    }
    await this.emitter.off(this.filter, this.#listener);
  }
};

// ../../node_modules/ethers/lib.esm/utils/utf8.js
function errorFunc(reason, offset, bytes4, output3, badCodepoint) {
  assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes4);
}
function ignoreFunc(reason, offset, bytes4, output3, badCodepoint) {
  if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
    let i = 0;
    for (let o = offset + 1; o < bytes4.length; o++) {
      if (bytes4[o] >> 6 !== 2) {
        break;
      }
      i++;
    }
    return i;
  }
  if (reason === "OVERRUN") {
    return bytes4.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes4, output3, badCodepoint) {
  if (reason === "OVERLONG") {
    assertArgument(typeof badCodepoint === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
    output3.push(badCodepoint);
    return 0;
  }
  output3.push(65533);
  return ignoreFunc(reason, offset, bytes4, output3, badCodepoint);
}
var Utf8ErrorFuncs = Object.freeze({
  error: errorFunc,
  ignore: ignoreFunc,
  replace: replaceFunc
});
function getUtf8CodePoints(_bytes2, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }
  const bytes4 = getBytes(_bytes2, "bytes");
  const result = [];
  let i = 0;
  while (i < bytes4.length) {
    const c = bytes4[i++];
    if (c >> 7 === 0) {
      result.push(c);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c & 192) === 128) {
        i += onError("UNEXPECTED_CONTINUE", i - 1, bytes4, result);
      } else {
        i += onError("BAD_PREFIX", i - 1, bytes4, result);
      }
      continue;
    }
    if (i - 1 + extraLength >= bytes4.length) {
      i += onError("OVERRUN", i - 1, bytes4, result);
      continue;
    }
    let res = c & (1 << 8 - extraLength - 1) - 1;
    for (let j = 0; j < extraLength; j++) {
      let nextChar = bytes4[i];
      if ((nextChar & 192) != 128) {
        i += onError("MISSING_CONTINUE", i, bytes4, result);
        res = null;
        break;
      }
      ;
      res = res << 6 | nextChar & 63;
      i++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes4, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes4, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i += onError("OVERLONG", i - 1 - extraLength, bytes4, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes(str, form) {
  assertArgument(typeof str === "string", "invalid string value", "str", str);
  if (form != null) {
    assertNormalize(form);
    str = str.normalize(form);
  }
  let result = [];
  for (let i = 0; i < str.length; i++) {
    const c = str.charCodeAt(i);
    if (c < 128) {
      result.push(c);
    } else if (c < 2048) {
      result.push(c >> 6 | 192);
      result.push(c & 63 | 128);
    } else if ((c & 64512) == 55296) {
      i++;
      const c2 = str.charCodeAt(i);
      assertArgument(i < str.length && (c2 & 64512) === 56320, "invalid surrogate pair", "str", str);
      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c >> 12 | 224);
      result.push(c >> 6 & 63 | 128);
      result.push(c & 63 | 128);
    }
  }
  return new Uint8Array(result);
}
function _toUtf8String(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String(bytes4, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes4, onError));
}

// ../../node_modules/ethers/lib.esm/abi/coders/abstract-coder.js
var WordSize = 32;
var Padding = new Uint8Array(WordSize);
var passProperties = ["then"];
var _guard = {};
function throwError(name, error) {
  const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
  wrapped.error = error;
  throw wrapped;
}
var Result = class _Result extends Array {
  #names;
  /**
   *  @private
   */
  constructor(...args) {
    const guard = args[0];
    let items = args[1];
    let names = (args[2] || []).slice();
    let wrap = true;
    if (guard !== _guard) {
      items = args;
      names = [];
      wrap = false;
    }
    super(items.length);
    items.forEach((item, index) => {
      this[index] = item;
    });
    const nameCounts = names.reduce((accum, name) => {
      if (typeof name === "string") {
        accum.set(name, (accum.get(name) || 0) + 1);
      }
      return accum;
    }, /* @__PURE__ */ new Map());
    this.#names = Object.freeze(items.map((item, index) => {
      const name = names[index];
      if (name != null && nameCounts.get(name) === 1) {
        return name;
      }
      return null;
    }));
    if (!wrap) {
      return;
    }
    Object.freeze(this);
    return new Proxy(this, {
      get: (target, prop, receiver) => {
        if (typeof prop === "string") {
          if (prop.match(/^[0-9]+$/)) {
            const index = getNumber(prop, "%index");
            if (index < 0 || index >= this.length) {
              throw new RangeError("out of result range");
            }
            const item = target[index];
            if (item instanceof Error) {
              throwError(`index ${index}`, item);
            }
            return item;
          }
          if (passProperties.indexOf(prop) >= 0) {
            return Reflect.get(target, prop, receiver);
          }
          const value = target[prop];
          if (value instanceof Function) {
            return function(...args2) {
              return value.apply(this === receiver ? target : this, args2);
            };
          } else if (!(prop in target)) {
            return target.getValue.apply(this === receiver ? target : this, [prop]);
          }
        }
        return Reflect.get(target, prop, receiver);
      }
    });
  }
  /**
   *  Returns the Result as a normal Array. If %%deep%%, any children
   *  which are Result objects are also converted to a normal Array.
   *
   *  This will throw if there are any outstanding deferred
   *  errors.
   */
  toArray(deep) {
    const result = [];
    this.forEach((item, index) => {
      if (item instanceof Error) {
        throwError(`index ${index}`, item);
      }
      if (deep && item instanceof _Result) {
        item = item.toArray(deep);
      }
      result.push(item);
    });
    return result;
  }
  /**
   *  Returns the Result as an Object with each name-value pair. If
   *  %%deep%%, any children which are Result objects are also
   *  converted to an Object.
   *
   *  This will throw if any value is unnamed, or if there are
   *  any outstanding deferred errors.
   */
  toObject(deep) {
    return this.#names.reduce((accum, name, index) => {
      assert(name != null, "value at index ${ index } unnamed", "UNSUPPORTED_OPERATION", {
        operation: "toObject()"
      });
      if (!(name in accum)) {
        let child = this.getValue(name);
        if (deep && child instanceof _Result) {
          child = child.toObject(deep);
        }
        accum[name] = child;
      }
      return accum;
    }, {});
  }
  /**
   *  @_ignore
   */
  slice(start, end) {
    if (start == null) {
      start = 0;
    }
    if (start < 0) {
      start += this.length;
      if (start < 0) {
        start = 0;
      }
    }
    if (end == null) {
      end = this.length;
    }
    if (end < 0) {
      end += this.length;
      if (end < 0) {
        end = 0;
      }
    }
    if (end > this.length) {
      end = this.length;
    }
    const result = [], names = [];
    for (let i = start; i < end; i++) {
      result.push(this[i]);
      names.push(this.#names[i]);
    }
    return new _Result(_guard, result, names);
  }
  /**
   *  @_ignore
   */
  filter(callback, thisArg) {
    const result = [], names = [];
    for (let i = 0; i < this.length; i++) {
      const item = this[i];
      if (item instanceof Error) {
        throwError(`index ${i}`, item);
      }
      if (callback.call(thisArg, item, i, this)) {
        result.push(item);
        names.push(this.#names[i]);
      }
    }
    return new _Result(_guard, result, names);
  }
  /**
   *  @_ignore
   */
  map(callback, thisArg) {
    const result = [];
    for (let i = 0; i < this.length; i++) {
      const item = this[i];
      if (item instanceof Error) {
        throwError(`index ${i}`, item);
      }
      result.push(callback.call(thisArg, item, i, this));
    }
    return result;
  }
  /**
   *  Returns the value for %%name%%.
   *
   *  Since it is possible to have a key whose name conflicts with
   *  a method on a [[Result]] or its superclass Array, or any
   *  JavaScript keyword, this ensures all named values are still
   *  accessible by name.
   */
  getValue(name) {
    const index = this.#names.indexOf(name);
    if (index === -1) {
      return void 0;
    }
    const value = this[index];
    if (value instanceof Error) {
      throwError(`property ${JSON.stringify(name)}`, value.error);
    }
    return value;
  }
  /**
   *  Creates a new [[Result]] for %%items%% with each entry
   *  also accessible by its corresponding name in %%keys%%.
   */
  static fromItems(items, keys) {
    return new _Result(_guard, items, keys);
  }
};
function getValue(value) {
  let bytes4 = toBeArray(value);
  assert(bytes4.length <= WordSize, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: bytes4, length: WordSize, offset: bytes4.length });
  if (bytes4.length !== WordSize) {
    bytes4 = getBytesCopy(concat([Padding.slice(bytes4.length % WordSize), bytes4]));
  }
  return bytes4;
}
var Coder = class {
  // The coder name:
  //   - address, uint256, tuple, array, etc.
  name;
  // The fully expanded type, including composite types:
  //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
  type;
  // The localName bound in the signature, in this example it is "baz":
  //   - tuple(address foo, uint bar) baz
  localName;
  // Whether this type is dynamic:
  //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
  //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
  dynamic;
  constructor(name, type, localName, dynamic) {
    defineProperties(this, { name, type, localName, dynamic }, {
      name: "string",
      type: "string",
      localName: "string",
      dynamic: "boolean"
    });
  }
  _throwError(message2, value) {
    assertArgument(false, message2, this.localName, value);
  }
};
var Writer = class {
  // An array of WordSize lengthed objects to concatenation
  #data;
  #dataLength;
  constructor() {
    this.#data = [];
    this.#dataLength = 0;
  }
  get data() {
    return concat(this.#data);
  }
  get length() {
    return this.#dataLength;
  }
  #writeData(data) {
    this.#data.push(data);
    this.#dataLength += data.length;
    return data.length;
  }
  appendWriter(writer) {
    return this.#writeData(getBytesCopy(writer.data));
  }
  // Arrayish item; pad on the right to *nearest* WordSize
  writeBytes(value) {
    let bytes4 = getBytesCopy(value);
    const paddingOffset = bytes4.length % WordSize;
    if (paddingOffset) {
      bytes4 = getBytesCopy(concat([bytes4, Padding.slice(paddingOffset)]));
    }
    return this.#writeData(bytes4);
  }
  // Numeric item; pad on the left *to* WordSize
  writeValue(value) {
    return this.#writeData(getValue(value));
  }
  // Inserts a numeric place-holder, returning a callback that can
  // be used to asjust the value later
  writeUpdatableValue() {
    const offset = this.#data.length;
    this.#data.push(Padding);
    this.#dataLength += WordSize;
    return (value) => {
      this.#data[offset] = getValue(value);
    };
  }
};
var Reader = class _Reader {
  // Allows incomplete unpadded data to be read; otherwise an error
  // is raised if attempting to overrun the buffer. This is required
  // to deal with an old Solidity bug, in which event data for
  // external (not public thoguh) was tightly packed.
  allowLoose;
  #data;
  #offset;
  #bytesRead;
  #parent;
  #maxInflation;
  constructor(data, allowLoose, maxInflation) {
    defineProperties(this, { allowLoose: !!allowLoose });
    this.#data = getBytesCopy(data);
    this.#bytesRead = 0;
    this.#parent = null;
    this.#maxInflation = maxInflation != null ? maxInflation : 1024;
    this.#offset = 0;
  }
  get data() {
    return hexlify(this.#data);
  }
  get dataLength() {
    return this.#data.length;
  }
  get consumed() {
    return this.#offset;
  }
  get bytes() {
    return new Uint8Array(this.#data);
  }
  #incrementBytesRead(count) {
    if (this.#parent) {
      return this.#parent.#incrementBytesRead(count);
    }
    this.#bytesRead += count;
    assert(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${this.#maxInflation} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
      buffer: getBytesCopy(this.#data),
      offset: this.#offset,
      length: count,
      info: {
        bytesRead: this.#bytesRead,
        dataLength: this.dataLength
      }
    });
  }
  #peekBytes(offset, length, loose) {
    let alignedLength = Math.ceil(length / WordSize) * WordSize;
    if (this.#offset + alignedLength > this.#data.length) {
      if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {
        alignedLength = length;
      } else {
        assert(false, "data out-of-bounds", "BUFFER_OVERRUN", {
          buffer: getBytesCopy(this.#data),
          length: this.#data.length,
          offset: this.#offset + alignedLength
        });
      }
    }
    return this.#data.slice(this.#offset, this.#offset + alignedLength);
  }
  // Create a sub-reader with the same underlying data, but offset
  subReader(offset) {
    const reader = new _Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);
    reader.#parent = this;
    return reader;
  }
  // Read bytes
  readBytes(length, loose) {
    let bytes4 = this.#peekBytes(0, length, !!loose);
    this.#incrementBytesRead(length);
    this.#offset += bytes4.length;
    return bytes4.slice(0, length);
  }
  // Read a numeric values
  readValue() {
    return toBigInt(this.readBytes(WordSize));
  }
  readIndex() {
    return toNumber(this.readBytes(WordSize));
  }
};

// ../../node_modules/ethers/node_modules/@noble/hashes/esm/_assert.js
function number(n2) {
  if (!Number.isSafeInteger(n2) || n2 < 0)
    throw new Error(`Wrong positive integer: ${n2}`);
}
function bytes(b2, ...lengths) {
  if (!(b2 instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (lengths.length > 0 && !lengths.includes(b2.length))
    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b2.length}`);
}
function exists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function output(out, instance) {
  bytes(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error(`digestInto() expects output buffer of length at least ${min}`);
  }
}

// ../../node_modules/ethers/node_modules/@noble/hashes/esm/_u64.js
var U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
var _32n = /* @__PURE__ */ BigInt(32);
function fromBig(n2, le = false) {
  if (le)
    return { h: Number(n2 & U32_MASK64), l: Number(n2 >> _32n & U32_MASK64) };
  return { h: Number(n2 >> _32n & U32_MASK64) | 0, l: Number(n2 & U32_MASK64) | 0 };
}
function split(lst, le = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i = 0; i < lst.length; i++) {
    const { h, l } = fromBig(lst[i], le);
    [Ah[i], Al[i]] = [h, l];
  }
  return [Ah, Al];
}
var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;

// ../../node_modules/ethers/node_modules/@noble/hashes/esm/utils.js
var u8a = (a) => a instanceof Uint8Array;
var u322 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE)
  throw new Error("Non little-endian hardware is not supported");
function utf8ToBytes(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  if (!u8a(data))
    throw new Error(`expected Uint8Array, got ${typeof data}`);
  return data;
}
var Hash = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
var toStr = {}.toString;
function wrapConstructor(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function wrapXOFConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}

// ../../node_modules/ethers/node_modules/@noble/hashes/esm/sha3.js
var [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
var _0n = /* @__PURE__ */ BigInt(0);
var _1n = /* @__PURE__ */ BigInt(1);
var _2n = /* @__PURE__ */ BigInt(2);
var _7n = /* @__PURE__ */ BigInt(7);
var _256n = /* @__PURE__ */ BigInt(256);
var _0x71n = /* @__PURE__ */ BigInt(113);
for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
  [x, y] = [y, (2 * x + 3 * y) % 5];
  SHA3_PI.push(2 * (5 * y + x));
  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
  let t = _0n;
  for (let j = 0; j < 7; j++) {
    R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
    if (R & _2n)
      t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
  }
  _SHA3_IOTA.push(t);
}
var [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);
var rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);
var rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);
function keccakP(s, rounds = 24) {
  const B = new Uint32Array(5 * 2);
  for (let round = 24 - rounds; round < 24; round++) {
    for (let x = 0; x < 10; x++)
      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
    for (let x = 0; x < 10; x += 2) {
      const idx1 = (x + 8) % 10;
      const idx0 = (x + 2) % 10;
      const B0 = B[idx0];
      const B1 = B[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
      for (let y = 0; y < 50; y += 10) {
        s[x + y] ^= Th;
        s[x + y + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL[t];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y = 0; y < 50; y += 10) {
      for (let x = 0; x < 10; x++)
        B[x] = s[y + x];
      for (let x = 0; x < 10; x++)
        s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H[round];
    s[1] ^= SHA3_IOTA_L[round];
  }
  B.fill(0);
}
var Keccak = class _Keccak extends Hash {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    number(outputLen);
    if (0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200);
    this.state32 = u322(this.state);
  }
  keccak() {
    keccakP(this.state32, this.rounds);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    exists(this);
    const { blockLen, state: state6 } = this;
    data = toBytes(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      for (let i = 0; i < take; i++)
        state6[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state: state6, suffix, pos, blockLen } = this;
    state6[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state6[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    exists(this, false);
    bytes(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
      this.posOut += take;
      pos += take;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes4) {
    number(bytes4);
    return this.xofInto(new Uint8Array(bytes4));
  }
  digestInto(out) {
    output(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    this.state.fill(0);
  }
  _cloneInto(to) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to.state32.set(this.state32);
    to.pos = this.pos;
    to.posOut = this.posOut;
    to.finished = this.finished;
    to.rounds = rounds;
    to.suffix = suffix;
    to.outputLen = outputLen;
    to.enableXOF = enableXOF;
    to.destroyed = this.destroyed;
    return to;
  }
};
var gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
var sha3_224 = /* @__PURE__ */ gen(6, 144, 224 / 8);
var sha3_256 = /* @__PURE__ */ gen(6, 136, 256 / 8);
var sha3_384 = /* @__PURE__ */ gen(6, 104, 384 / 8);
var sha3_512 = /* @__PURE__ */ gen(6, 72, 512 / 8);
var keccak_224 = /* @__PURE__ */ gen(1, 144, 224 / 8);
var keccak_256 = /* @__PURE__ */ gen(1, 136, 256 / 8);
var keccak_384 = /* @__PURE__ */ gen(1, 104, 384 / 8);
var keccak_512 = /* @__PURE__ */ gen(1, 72, 512 / 8);
var genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake128 = /* @__PURE__ */ genShake(31, 168, 128 / 8);
var shake256 = /* @__PURE__ */ genShake(31, 136, 256 / 8);

// ../../node_modules/ethers/lib.esm/crypto/keccak.js
var locked = false;
var _keccak256 = function(data) {
  return keccak_256(data);
};
var __keccak256 = _keccak256;
function keccak256(_data2) {
  const data = getBytes(_data2, "data");
  return hexlify(__keccak256(data));
}
keccak256._ = _keccak256;
keccak256.lock = function() {
  locked = true;
};
keccak256.register = function(func) {
  if (locked) {
    throw new TypeError("keccak256 is locked");
  }
  __keccak256 = func;
};
Object.freeze(keccak256);

// ../../node_modules/ethers/lib.esm/address/address.js
var BN_02 = BigInt(0);
var BN_36 = BigInt(36);
function getChecksumAddress(address) {
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i = 0; i < 40; i++) {
    expanded[i] = chars[i].charCodeAt(0);
  }
  const hashed = getBytes(keccak256(expanded));
  for (let i = 0; i < 40; i += 2) {
    if (hashed[i >> 1] >> 4 >= 8) {
      chars[i] = chars[i].toUpperCase();
    }
    if ((hashed[i >> 1] & 15) >= 8) {
      chars[i + 1] = chars[i + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
var ibanLookup = {};
for (let i = 0; i < 10; i++) {
  ibanLookup[String(i)] = String(i);
}
for (let i = 0; i < 26; i++) {
  ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
}
var safeDigits = 15;
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c) => {
    return ibanLookup[c];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
var Base36 = function() {
  ;
  const result = {};
  for (let i = 0; i < 36; i++) {
    const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
    result[key] = BigInt(i);
  }
  return result;
}();
function fromBase36(value) {
  value = value.toLowerCase();
  let result = BN_02;
  for (let i = 0; i < value.length; i++) {
    result = result * BN_36 + Base36[value[i]];
  }
  return result;
}
function getAddress(address) {
  assertArgument(typeof address === "string", "invalid address", "address", address);
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (!address.startsWith("0x")) {
      address = "0x" + address;
    }
    const result = getChecksumAddress(address);
    assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
    return result;
  }
  if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    assertArgument(address.substring(2, 4) === ibanChecksum(address), "bad icap checksum", "address", address);
    let result = fromBase36(address.substring(4)).toString(16);
    while (result.length < 40) {
      result = "0" + result;
    }
    return getChecksumAddress("0x" + result);
  }
  assertArgument(false, "invalid address", "address", address);
}

// ../../node_modules/ethers/lib.esm/address/checks.js
function isAddressable(value) {
  return value && typeof value.getAddress === "function";
}
async function checkAddress(target, promise) {
  const result = await promise;
  if (result == null || result === "0x0000000000000000000000000000000000000000") {
    assert(typeof target !== "string", "unconfigured name", "UNCONFIGURED_NAME", { value: target });
    assertArgument(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
  }
  return getAddress(result);
}
function resolveAddress(target, resolver) {
  if (typeof target === "string") {
    if (target.match(/^0x[0-9a-f]{40}$/i)) {
      return getAddress(target);
    }
    assert(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" });
    return checkAddress(target, resolver.resolveName(target));
  } else if (isAddressable(target)) {
    return checkAddress(target, target.getAddress());
  } else if (target && typeof target.then === "function") {
    return checkAddress(target, target);
  }
  assertArgument(false, "unsupported addressable value", "target", target);
}

// ../../node_modules/ethers/lib.esm/abi/typed.js
var _gaurd = {};
function n(value, width) {
  let signed = false;
  if (width < 0) {
    signed = true;
    width *= -1;
  }
  return new Typed(_gaurd, `${signed ? "" : "u"}int${width}`, value, { signed, width });
}
function b(value, size) {
  return new Typed(_gaurd, `bytes${size ? size : ""}`, value, { size });
}
var _typedSymbol = Symbol.for("_ethers_typed");
var Typed = class _Typed {
  /**
   *  The type, as a Solidity-compatible type.
   */
  type;
  /**
   *  The actual value.
   */
  value;
  #options;
  /**
   *  @_ignore:
   */
  _typedSymbol;
  /**
   *  @_ignore:
   */
  constructor(gaurd, type, value, options) {
    if (options == null) {
      options = null;
    }
    assertPrivate(_gaurd, gaurd, "Typed");
    defineProperties(this, { _typedSymbol, type, value });
    this.#options = options;
    this.format();
  }
  /**
   *  Format the type as a Human-Readable type.
   */
  format() {
    if (this.type === "array") {
      throw new Error("");
    } else if (this.type === "dynamicArray") {
      throw new Error("");
    } else if (this.type === "tuple") {
      return `tuple(${this.value.map((v) => v.format()).join(",")})`;
    }
    return this.type;
  }
  /**
   *  The default value returned by this type.
   */
  defaultValue() {
    return 0;
  }
  /**
   *  The minimum value for numeric types.
   */
  minValue() {
    return 0;
  }
  /**
   *  The maximum value for numeric types.
   */
  maxValue() {
    return 0;
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
   */
  isBigInt() {
    return !!this.type.match(/^u?int[0-9]+$/);
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
   */
  isData() {
    return this.type.startsWith("bytes");
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
   */
  isString() {
    return this.type === "string";
  }
  /**
   *  Returns the tuple name, if this is a tuple. Throws otherwise.
   */
  get tupleName() {
    if (this.type !== "tuple") {
      throw TypeError("not a tuple");
    }
    return this.#options;
  }
  // Returns the length of this type as an array
  // - `null` indicates the length is unforced, it could be dynamic
  // - `-1` indicates the length is dynamic
  // - any other value indicates it is a static array and is its length
  /**
   *  Returns the length of the array type or ``-1`` if it is dynamic.
   *
   *  Throws if the type is not an array.
   */
  get arrayLength() {
    if (this.type !== "array") {
      throw TypeError("not an array");
    }
    if (this.#options === true) {
      return -1;
    }
    if (this.#options === false) {
      return this.value.length;
    }
    return null;
  }
  /**
   *  Returns a new **Typed** of %%type%% with the %%value%%.
   */
  static from(type, value) {
    return new _Typed(_gaurd, type, value);
  }
  /**
   *  Return a new ``uint8`` type for %%v%%.
   */
  static uint8(v) {
    return n(v, 8);
  }
  /**
   *  Return a new ``uint16`` type for %%v%%.
   */
  static uint16(v) {
    return n(v, 16);
  }
  /**
   *  Return a new ``uint24`` type for %%v%%.
   */
  static uint24(v) {
    return n(v, 24);
  }
  /**
   *  Return a new ``uint32`` type for %%v%%.
   */
  static uint32(v) {
    return n(v, 32);
  }
  /**
   *  Return a new ``uint40`` type for %%v%%.
   */
  static uint40(v) {
    return n(v, 40);
  }
  /**
   *  Return a new ``uint48`` type for %%v%%.
   */
  static uint48(v) {
    return n(v, 48);
  }
  /**
   *  Return a new ``uint56`` type for %%v%%.
   */
  static uint56(v) {
    return n(v, 56);
  }
  /**
   *  Return a new ``uint64`` type for %%v%%.
   */
  static uint64(v) {
    return n(v, 64);
  }
  /**
   *  Return a new ``uint72`` type for %%v%%.
   */
  static uint72(v) {
    return n(v, 72);
  }
  /**
   *  Return a new ``uint80`` type for %%v%%.
   */
  static uint80(v) {
    return n(v, 80);
  }
  /**
   *  Return a new ``uint88`` type for %%v%%.
   */
  static uint88(v) {
    return n(v, 88);
  }
  /**
   *  Return a new ``uint96`` type for %%v%%.
   */
  static uint96(v) {
    return n(v, 96);
  }
  /**
   *  Return a new ``uint104`` type for %%v%%.
   */
  static uint104(v) {
    return n(v, 104);
  }
  /**
   *  Return a new ``uint112`` type for %%v%%.
   */
  static uint112(v) {
    return n(v, 112);
  }
  /**
   *  Return a new ``uint120`` type for %%v%%.
   */
  static uint120(v) {
    return n(v, 120);
  }
  /**
   *  Return a new ``uint128`` type for %%v%%.
   */
  static uint128(v) {
    return n(v, 128);
  }
  /**
   *  Return a new ``uint136`` type for %%v%%.
   */
  static uint136(v) {
    return n(v, 136);
  }
  /**
   *  Return a new ``uint144`` type for %%v%%.
   */
  static uint144(v) {
    return n(v, 144);
  }
  /**
   *  Return a new ``uint152`` type for %%v%%.
   */
  static uint152(v) {
    return n(v, 152);
  }
  /**
   *  Return a new ``uint160`` type for %%v%%.
   */
  static uint160(v) {
    return n(v, 160);
  }
  /**
   *  Return a new ``uint168`` type for %%v%%.
   */
  static uint168(v) {
    return n(v, 168);
  }
  /**
   *  Return a new ``uint176`` type for %%v%%.
   */
  static uint176(v) {
    return n(v, 176);
  }
  /**
   *  Return a new ``uint184`` type for %%v%%.
   */
  static uint184(v) {
    return n(v, 184);
  }
  /**
   *  Return a new ``uint192`` type for %%v%%.
   */
  static uint192(v) {
    return n(v, 192);
  }
  /**
   *  Return a new ``uint200`` type for %%v%%.
   */
  static uint200(v) {
    return n(v, 200);
  }
  /**
   *  Return a new ``uint208`` type for %%v%%.
   */
  static uint208(v) {
    return n(v, 208);
  }
  /**
   *  Return a new ``uint216`` type for %%v%%.
   */
  static uint216(v) {
    return n(v, 216);
  }
  /**
   *  Return a new ``uint224`` type for %%v%%.
   */
  static uint224(v) {
    return n(v, 224);
  }
  /**
   *  Return a new ``uint232`` type for %%v%%.
   */
  static uint232(v) {
    return n(v, 232);
  }
  /**
   *  Return a new ``uint240`` type for %%v%%.
   */
  static uint240(v) {
    return n(v, 240);
  }
  /**
   *  Return a new ``uint248`` type for %%v%%.
   */
  static uint248(v) {
    return n(v, 248);
  }
  /**
   *  Return a new ``uint256`` type for %%v%%.
   */
  static uint256(v) {
    return n(v, 256);
  }
  /**
   *  Return a new ``uint256`` type for %%v%%.
   */
  static uint(v) {
    return n(v, 256);
  }
  /**
   *  Return a new ``int8`` type for %%v%%.
   */
  static int8(v) {
    return n(v, -8);
  }
  /**
   *  Return a new ``int16`` type for %%v%%.
   */
  static int16(v) {
    return n(v, -16);
  }
  /**
   *  Return a new ``int24`` type for %%v%%.
   */
  static int24(v) {
    return n(v, -24);
  }
  /**
   *  Return a new ``int32`` type for %%v%%.
   */
  static int32(v) {
    return n(v, -32);
  }
  /**
   *  Return a new ``int40`` type for %%v%%.
   */
  static int40(v) {
    return n(v, -40);
  }
  /**
   *  Return a new ``int48`` type for %%v%%.
   */
  static int48(v) {
    return n(v, -48);
  }
  /**
   *  Return a new ``int56`` type for %%v%%.
   */
  static int56(v) {
    return n(v, -56);
  }
  /**
   *  Return a new ``int64`` type for %%v%%.
   */
  static int64(v) {
    return n(v, -64);
  }
  /**
   *  Return a new ``int72`` type for %%v%%.
   */
  static int72(v) {
    return n(v, -72);
  }
  /**
   *  Return a new ``int80`` type for %%v%%.
   */
  static int80(v) {
    return n(v, -80);
  }
  /**
   *  Return a new ``int88`` type for %%v%%.
   */
  static int88(v) {
    return n(v, -88);
  }
  /**
   *  Return a new ``int96`` type for %%v%%.
   */
  static int96(v) {
    return n(v, -96);
  }
  /**
   *  Return a new ``int104`` type for %%v%%.
   */
  static int104(v) {
    return n(v, -104);
  }
  /**
   *  Return a new ``int112`` type for %%v%%.
   */
  static int112(v) {
    return n(v, -112);
  }
  /**
   *  Return a new ``int120`` type for %%v%%.
   */
  static int120(v) {
    return n(v, -120);
  }
  /**
   *  Return a new ``int128`` type for %%v%%.
   */
  static int128(v) {
    return n(v, -128);
  }
  /**
   *  Return a new ``int136`` type for %%v%%.
   */
  static int136(v) {
    return n(v, -136);
  }
  /**
   *  Return a new ``int144`` type for %%v%%.
   */
  static int144(v) {
    return n(v, -144);
  }
  /**
   *  Return a new ``int52`` type for %%v%%.
   */
  static int152(v) {
    return n(v, -152);
  }
  /**
   *  Return a new ``int160`` type for %%v%%.
   */
  static int160(v) {
    return n(v, -160);
  }
  /**
   *  Return a new ``int168`` type for %%v%%.
   */
  static int168(v) {
    return n(v, -168);
  }
  /**
   *  Return a new ``int176`` type for %%v%%.
   */
  static int176(v) {
    return n(v, -176);
  }
  /**
   *  Return a new ``int184`` type for %%v%%.
   */
  static int184(v) {
    return n(v, -184);
  }
  /**
   *  Return a new ``int92`` type for %%v%%.
   */
  static int192(v) {
    return n(v, -192);
  }
  /**
   *  Return a new ``int200`` type for %%v%%.
   */
  static int200(v) {
    return n(v, -200);
  }
  /**
   *  Return a new ``int208`` type for %%v%%.
   */
  static int208(v) {
    return n(v, -208);
  }
  /**
   *  Return a new ``int216`` type for %%v%%.
   */
  static int216(v) {
    return n(v, -216);
  }
  /**
   *  Return a new ``int224`` type for %%v%%.
   */
  static int224(v) {
    return n(v, -224);
  }
  /**
   *  Return a new ``int232`` type for %%v%%.
   */
  static int232(v) {
    return n(v, -232);
  }
  /**
   *  Return a new ``int240`` type for %%v%%.
   */
  static int240(v) {
    return n(v, -240);
  }
  /**
   *  Return a new ``int248`` type for %%v%%.
   */
  static int248(v) {
    return n(v, -248);
  }
  /**
   *  Return a new ``int256`` type for %%v%%.
   */
  static int256(v) {
    return n(v, -256);
  }
  /**
   *  Return a new ``int256`` type for %%v%%.
   */
  static int(v) {
    return n(v, -256);
  }
  /**
   *  Return a new ``bytes1`` type for %%v%%.
   */
  static bytes1(v) {
    return b(v, 1);
  }
  /**
   *  Return a new ``bytes2`` type for %%v%%.
   */
  static bytes2(v) {
    return b(v, 2);
  }
  /**
   *  Return a new ``bytes3`` type for %%v%%.
   */
  static bytes3(v) {
    return b(v, 3);
  }
  /**
   *  Return a new ``bytes4`` type for %%v%%.
   */
  static bytes4(v) {
    return b(v, 4);
  }
  /**
   *  Return a new ``bytes5`` type for %%v%%.
   */
  static bytes5(v) {
    return b(v, 5);
  }
  /**
   *  Return a new ``bytes6`` type for %%v%%.
   */
  static bytes6(v) {
    return b(v, 6);
  }
  /**
   *  Return a new ``bytes7`` type for %%v%%.
   */
  static bytes7(v) {
    return b(v, 7);
  }
  /**
   *  Return a new ``bytes8`` type for %%v%%.
   */
  static bytes8(v) {
    return b(v, 8);
  }
  /**
   *  Return a new ``bytes9`` type for %%v%%.
   */
  static bytes9(v) {
    return b(v, 9);
  }
  /**
   *  Return a new ``bytes10`` type for %%v%%.
   */
  static bytes10(v) {
    return b(v, 10);
  }
  /**
   *  Return a new ``bytes11`` type for %%v%%.
   */
  static bytes11(v) {
    return b(v, 11);
  }
  /**
   *  Return a new ``bytes12`` type for %%v%%.
   */
  static bytes12(v) {
    return b(v, 12);
  }
  /**
   *  Return a new ``bytes13`` type for %%v%%.
   */
  static bytes13(v) {
    return b(v, 13);
  }
  /**
   *  Return a new ``bytes14`` type for %%v%%.
   */
  static bytes14(v) {
    return b(v, 14);
  }
  /**
   *  Return a new ``bytes15`` type for %%v%%.
   */
  static bytes15(v) {
    return b(v, 15);
  }
  /**
   *  Return a new ``bytes16`` type for %%v%%.
   */
  static bytes16(v) {
    return b(v, 16);
  }
  /**
   *  Return a new ``bytes17`` type for %%v%%.
   */
  static bytes17(v) {
    return b(v, 17);
  }
  /**
   *  Return a new ``bytes18`` type for %%v%%.
   */
  static bytes18(v) {
    return b(v, 18);
  }
  /**
   *  Return a new ``bytes19`` type for %%v%%.
   */
  static bytes19(v) {
    return b(v, 19);
  }
  /**
   *  Return a new ``bytes20`` type for %%v%%.
   */
  static bytes20(v) {
    return b(v, 20);
  }
  /**
   *  Return a new ``bytes21`` type for %%v%%.
   */
  static bytes21(v) {
    return b(v, 21);
  }
  /**
   *  Return a new ``bytes22`` type for %%v%%.
   */
  static bytes22(v) {
    return b(v, 22);
  }
  /**
   *  Return a new ``bytes23`` type for %%v%%.
   */
  static bytes23(v) {
    return b(v, 23);
  }
  /**
   *  Return a new ``bytes24`` type for %%v%%.
   */
  static bytes24(v) {
    return b(v, 24);
  }
  /**
   *  Return a new ``bytes25`` type for %%v%%.
   */
  static bytes25(v) {
    return b(v, 25);
  }
  /**
   *  Return a new ``bytes26`` type for %%v%%.
   */
  static bytes26(v) {
    return b(v, 26);
  }
  /**
   *  Return a new ``bytes27`` type for %%v%%.
   */
  static bytes27(v) {
    return b(v, 27);
  }
  /**
   *  Return a new ``bytes28`` type for %%v%%.
   */
  static bytes28(v) {
    return b(v, 28);
  }
  /**
   *  Return a new ``bytes29`` type for %%v%%.
   */
  static bytes29(v) {
    return b(v, 29);
  }
  /**
   *  Return a new ``bytes30`` type for %%v%%.
   */
  static bytes30(v) {
    return b(v, 30);
  }
  /**
   *  Return a new ``bytes31`` type for %%v%%.
   */
  static bytes31(v) {
    return b(v, 31);
  }
  /**
   *  Return a new ``bytes32`` type for %%v%%.
   */
  static bytes32(v) {
    return b(v, 32);
  }
  /**
   *  Return a new ``address`` type for %%v%%.
   */
  static address(v) {
    return new _Typed(_gaurd, "address", v);
  }
  /**
   *  Return a new ``bool`` type for %%v%%.
   */
  static bool(v) {
    return new _Typed(_gaurd, "bool", !!v);
  }
  /**
   *  Return a new ``bytes`` type for %%v%%.
   */
  static bytes(v) {
    return new _Typed(_gaurd, "bytes", v);
  }
  /**
   *  Return a new ``string`` type for %%v%%.
   */
  static string(v) {
    return new _Typed(_gaurd, "string", v);
  }
  /**
   *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
   */
  static array(v, dynamic) {
    throw new Error("not implemented yet");
    return new _Typed(_gaurd, "array", v, dynamic);
  }
  /**
   *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
   */
  static tuple(v, name) {
    throw new Error("not implemented yet");
    return new _Typed(_gaurd, "tuple", v, name);
  }
  /**
   *  Return a new ``uint8`` type for %%v%%.
   */
  static overrides(v) {
    return new _Typed(_gaurd, "overrides", Object.assign({}, v));
  }
  /**
   *  Returns true only if %%value%% is a [[Typed]] instance.
   */
  static isTyped(value) {
    return value && typeof value === "object" && "_typedSymbol" in value && value._typedSymbol === _typedSymbol;
  }
  /**
   *  If the value is a [[Typed]] instance, validates the underlying value
   *  and returns it, otherwise returns value directly.
   *
   *  This is useful for functions that with to accept either a [[Typed]]
   *  object or values.
   */
  static dereference(value, type) {
    if (_Typed.isTyped(value)) {
      if (value.type !== type) {
        throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);
      }
      return value.value;
    }
    return value;
  }
};

// ../../node_modules/ethers/lib.esm/abi/coders/address.js
var AddressCoder = class extends Coder {
  constructor(localName) {
    super("address", "address", localName, false);
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000";
  }
  encode(writer, _value) {
    let value = Typed.dereference(_value, "string");
    try {
      value = getAddress(value);
    } catch (error) {
      return this._throwError(error.message, _value);
    }
    return writer.writeValue(value);
  }
  decode(reader) {
    return getAddress(toBeHex(reader.readValue(), 20));
  }
};

// ../../node_modules/ethers/lib.esm/abi/coders/anonymous.js
var AnonymousCoder = class extends Coder {
  coder;
  constructor(coder) {
    super(coder.name, coder.type, "_", coder.dynamic);
    this.coder = coder;
  }
  defaultValue() {
    return this.coder.defaultValue();
  }
  encode(writer, value) {
    return this.coder.encode(writer, value);
  }
  decode(reader) {
    return this.coder.decode(reader);
  }
};

// ../../node_modules/ethers/lib.esm/abi/coders/array.js
function pack(writer, coders, values) {
  let arrayValues = [];
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name = coder.localName;
      assert(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
      assert(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
      unique[name] = true;
      return values[name];
    });
  } else {
    assertArgument(false, "invalid tuple value", "tuple", values);
  }
  assertArgument(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
  let staticWriter = new Writer();
  let dynamicWriter = new Writer();
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack(reader, coders) {
  let values = [];
  let keys = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readIndex();
      let offsetReader = baseReader.subReader(offset);
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (isError(error, "BUFFER_OVERRUN")) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (isError(error, "BUFFER_OVERRUN")) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value == void 0) {
      throw new Error("investigate");
    }
    values.push(value);
    keys.push(coder.localName || null);
  });
  return Result.fromItems(values, keys);
}
var ArrayCoder = class extends Coder {
  coder;
  length;
  constructor(coder, length, localName) {
    const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
    const dynamic = length === -1 || coder.dynamic;
    super("array", type, localName, dynamic);
    defineProperties(this, { coder, length });
  }
  defaultValue() {
    const defaultChild = this.coder.defaultValue();
    const result = [];
    for (let i = 0; i < this.length; i++) {
      result.push(defaultChild);
    }
    return result;
  }
  encode(writer, _value) {
    const value = Typed.dereference(_value, "array");
    if (!Array.isArray(value)) {
      this._throwError("expected array value", value);
    }
    let count = this.length;
    if (count === -1) {
      count = value.length;
      writer.writeValue(value.length);
    }
    assertArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
    let coders = [];
    for (let i = 0; i < value.length; i++) {
      coders.push(this.coder);
    }
    return pack(writer, coders, value);
  }
  decode(reader) {
    let count = this.length;
    if (count === -1) {
      count = reader.readIndex();
      assert(count * WordSize <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: reader.bytes, offset: count * WordSize, length: reader.dataLength });
    }
    let coders = [];
    for (let i = 0; i < count; i++) {
      coders.push(new AnonymousCoder(this.coder));
    }
    return unpack(reader, coders);
  }
};

// ../../node_modules/ethers/lib.esm/abi/coders/boolean.js
var BooleanCoder = class extends Coder {
  constructor(localName) {
    super("bool", "bool", localName, false);
  }
  defaultValue() {
    return false;
  }
  encode(writer, _value) {
    const value = Typed.dereference(_value, "bool");
    return writer.writeValue(value ? 1 : 0);
  }
  decode(reader) {
    return !!reader.readValue();
  }
};

// ../../node_modules/ethers/lib.esm/abi/coders/bytes.js
var DynamicBytesCoder = class extends Coder {
  constructor(type, localName) {
    super(type, type, localName, true);
  }
  defaultValue() {
    return "0x";
  }
  encode(writer, value) {
    value = getBytesCopy(value);
    let length = writer.writeValue(value.length);
    length += writer.writeBytes(value);
    return length;
  }
  decode(reader) {
    return reader.readBytes(reader.readIndex(), true);
  }
};
var BytesCoder = class extends DynamicBytesCoder {
  constructor(localName) {
    super("bytes", localName);
  }
  decode(reader) {
    return hexlify(super.decode(reader));
  }
};

// ../../node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js
var FixedBytesCoder = class extends Coder {
  size;
  constructor(size, localName) {
    let name = "bytes" + String(size);
    super(name, name, localName, false);
    defineProperties(this, { size }, { size: "number" });
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
  }
  encode(writer, _value) {
    let data = getBytesCopy(Typed.dereference(_value, this.type));
    if (data.length !== this.size) {
      this._throwError("incorrect data length", _value);
    }
    return writer.writeBytes(data);
  }
  decode(reader) {
    return hexlify(reader.readBytes(this.size));
  }
};

// ../../node_modules/ethers/lib.esm/abi/coders/null.js
var Empty = new Uint8Array([]);
var NullCoder = class extends Coder {
  constructor(localName) {
    super("null", "", localName, false);
  }
  defaultValue() {
    return null;
  }
  encode(writer, value) {
    if (value != null) {
      this._throwError("not null", value);
    }
    return writer.writeBytes(Empty);
  }
  decode(reader) {
    reader.readBytes(0);
    return null;
  }
};

// ../../node_modules/ethers/lib.esm/abi/coders/number.js
var BN_03 = BigInt(0);
var BN_12 = BigInt(1);
var BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var NumberCoder = class extends Coder {
  size;
  signed;
  constructor(size, signed, localName) {
    const name = (signed ? "int" : "uint") + size * 8;
    super(name, name, localName, false);
    defineProperties(this, { size, signed }, { size: "number", signed: "boolean" });
  }
  defaultValue() {
    return 0;
  }
  encode(writer, _value) {
    let value = getBigInt(Typed.dereference(_value, this.type));
    let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);
    if (this.signed) {
      let bounds = mask(maxUintValue, this.size * 8 - 1);
      if (value > bounds || value < -(bounds + BN_12)) {
        this._throwError("value out-of-bounds", _value);
      }
      value = toTwos(value, 8 * WordSize);
    } else if (value < BN_03 || value > mask(maxUintValue, this.size * 8)) {
      this._throwError("value out-of-bounds", _value);
    }
    return writer.writeValue(value);
  }
  decode(reader) {
    let value = mask(reader.readValue(), this.size * 8);
    if (this.signed) {
      value = fromTwos(value, this.size * 8);
    }
    return value;
  }
};

// ../../node_modules/ethers/lib.esm/abi/coders/string.js
var StringCoder = class extends DynamicBytesCoder {
  constructor(localName) {
    super("string", localName);
  }
  defaultValue() {
    return "";
  }
  encode(writer, _value) {
    return super.encode(writer, toUtf8Bytes(Typed.dereference(_value, "string")));
  }
  decode(reader) {
    return toUtf8String(super.decode(reader));
  }
};

// ../../node_modules/ethers/lib.esm/abi/coders/tuple.js
var TupleCoder = class extends Coder {
  coders;
  constructor(coders, localName) {
    let dynamic = false;
    const types = [];
    coders.forEach((coder) => {
      if (coder.dynamic) {
        dynamic = true;
      }
      types.push(coder.type);
    });
    const type = "tuple(" + types.join(",") + ")";
    super("tuple", type, localName, dynamic);
    defineProperties(this, { coders: Object.freeze(coders.slice()) });
  }
  defaultValue() {
    const values = [];
    this.coders.forEach((coder) => {
      values.push(coder.defaultValue());
    });
    const uniqueNames = this.coders.reduce((accum, coder) => {
      const name = coder.localName;
      if (name) {
        if (!accum[name]) {
          accum[name] = 0;
        }
        accum[name]++;
      }
      return accum;
    }, {});
    this.coders.forEach((coder, index) => {
      let name = coder.localName;
      if (!name || uniqueNames[name] !== 1) {
        return;
      }
      if (name === "length") {
        name = "_length";
      }
      if (values[name] != null) {
        return;
      }
      values[name] = values[index];
    });
    return Object.freeze(values);
  }
  encode(writer, _value) {
    const value = Typed.dereference(_value, "tuple");
    return pack(writer, this.coders, value);
  }
  decode(reader) {
    return unpack(reader, this.coders);
  }
};

// ../../node_modules/ethers/lib.esm/hash/id.js
function id(value) {
  return keccak256(toUtf8Bytes(value));
}

// ../../node_modules/ethers/lib.esm/transaction/accesslist.js
function accessSetify(addr, storageKeys) {
  return {
    address: getAddress(addr),
    storageKeys: storageKeys.map((storageKey, index) => {
      assertArgument(isHexString(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
      return storageKey.toLowerCase();
    })
  };
}
function accessListify(value) {
  if (Array.isArray(value)) {
    return value.map((set6, index) => {
      if (Array.isArray(set6)) {
        assertArgument(set6.length === 2, "invalid slot set", `value[${index}]`, set6);
        return accessSetify(set6[0], set6[1]);
      }
      assertArgument(set6 != null && typeof set6 === "object", "invalid address-slot set", "value", value);
      return accessSetify(set6.address, set6.storageKeys);
    });
  }
  assertArgument(value != null && typeof value === "object", "invalid access list", "value", value);
  const result = Object.keys(value).map((addr) => {
    const storageKeys = value[addr].reduce((accum, storageKey) => {
      accum[storageKey] = true;
      return accum;
    }, {});
    return accessSetify(addr, Object.keys(storageKeys).sort());
  });
  result.sort((a, b2) => a.address.localeCompare(b2.address));
  return result;
}

// ../../node_modules/ethers/lib.esm/abi/fragments.js
function setify(items) {
  const result = /* @__PURE__ */ new Set();
  items.forEach((k) => result.add(k));
  return Object.freeze(result);
}
var _kwVisibDeploy = "external public payable override";
var KwVisibDeploy = setify(_kwVisibDeploy.split(" "));
var _kwVisib = "constant external internal payable private public pure view override";
var KwVisib = setify(_kwVisib.split(" "));
var _kwTypes = "constructor error event fallback function receive struct";
var KwTypes = setify(_kwTypes.split(" "));
var _kwModifiers = "calldata memory storage payable indexed";
var KwModifiers = setify(_kwModifiers.split(" "));
var _kwOther = "tuple returns";
var _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(" ");
var Keywords = setify(_keywords.split(" "));
var SimpleTokens = {
  "(": "OPEN_PAREN",
  ")": "CLOSE_PAREN",
  "[": "OPEN_BRACKET",
  "]": "CLOSE_BRACKET",
  ",": "COMMA",
  "@": "AT"
};
var regexWhitespacePrefix = new RegExp("^(\\s*)");
var regexNumberPrefix = new RegExp("^([0-9]+)");
var regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
var regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
var regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
var TokenString = class _TokenString {
  #offset;
  #tokens;
  get offset() {
    return this.#offset;
  }
  get length() {
    return this.#tokens.length - this.#offset;
  }
  constructor(tokens) {
    this.#offset = 0;
    this.#tokens = tokens.slice();
  }
  clone() {
    return new _TokenString(this.#tokens);
  }
  reset() {
    this.#offset = 0;
  }
  #subTokenString(from = 0, to = 0) {
    return new _TokenString(this.#tokens.slice(from, to).map((t) => {
      return Object.freeze(Object.assign({}, t, {
        match: t.match - from,
        linkBack: t.linkBack - from,
        linkNext: t.linkNext - from
      }));
    }));
  }
  // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
  popKeyword(allowed) {
    const top = this.peek();
    if (top.type !== "KEYWORD" || !allowed.has(top.text)) {
      throw new Error(`expected keyword ${top.text}`);
    }
    return this.pop().text;
  }
  // Pops and returns the value of the next token if it is `type`; throws if out of tokens
  popType(type) {
    if (this.peek().type !== type) {
      const top = this.peek();
      throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);
    }
    return this.pop().text;
  }
  // Pops and returns a "(" TOKENS ")"
  popParen() {
    const top = this.peek();
    if (top.type !== "OPEN_PAREN") {
      throw new Error("bad start");
    }
    const result = this.#subTokenString(this.#offset + 1, top.match + 1);
    this.#offset = top.match + 1;
    return result;
  }
  // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
  popParams() {
    const top = this.peek();
    if (top.type !== "OPEN_PAREN") {
      throw new Error("bad start");
    }
    const result = [];
    while (this.#offset < top.match - 1) {
      const link = this.peek().linkNext;
      result.push(this.#subTokenString(this.#offset + 1, link));
      this.#offset = link;
    }
    this.#offset = top.match + 1;
    return result;
  }
  // Returns the top Token, throwing if out of tokens
  peek() {
    if (this.#offset >= this.#tokens.length) {
      throw new Error("out-of-bounds");
    }
    return this.#tokens[this.#offset];
  }
  // Returns the next value, if it is a keyword in `allowed`
  peekKeyword(allowed) {
    const top = this.peekType("KEYWORD");
    return top != null && allowed.has(top) ? top : null;
  }
  // Returns the value of the next token if it is `type`
  peekType(type) {
    if (this.length === 0) {
      return null;
    }
    const top = this.peek();
    return top.type === type ? top.text : null;
  }
  // Returns the next token; throws if out of tokens
  pop() {
    const result = this.peek();
    this.#offset++;
    return result;
  }
  toString() {
    const tokens = [];
    for (let i = this.#offset; i < this.#tokens.length; i++) {
      const token = this.#tokens[i];
      tokens.push(`${token.type}:${token.text}`);
    }
    return `<TokenString ${tokens.join(" ")}>`;
  }
};
function lex(text) {
  const tokens = [];
  const throwError2 = (message2) => {
    const token = offset < text.length ? JSON.stringify(text[offset]) : "$EOI";
    throw new Error(`invalid token ${token} at ${offset}: ${message2}`);
  };
  let brackets = [];
  let commas = [];
  let offset = 0;
  while (offset < text.length) {
    let cur = text.substring(offset);
    let match = cur.match(regexWhitespacePrefix);
    if (match) {
      offset += match[1].length;
      cur = text.substring(offset);
    }
    const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset, value: -1 };
    tokens.push(token);
    let type = SimpleTokens[cur[0]] || "";
    if (type) {
      token.type = type;
      token.text = cur[0];
      offset++;
      if (type === "OPEN_PAREN") {
        brackets.push(tokens.length - 1);
        commas.push(tokens.length - 1);
      } else if (type == "CLOSE_PAREN") {
        if (brackets.length === 0) {
          throwError2("no matching open bracket");
        }
        token.match = brackets.pop();
        tokens[token.match].match = tokens.length - 1;
        token.depth--;
        token.linkBack = commas.pop();
        tokens[token.linkBack].linkNext = tokens.length - 1;
      } else if (type === "COMMA") {
        token.linkBack = commas.pop();
        tokens[token.linkBack].linkNext = tokens.length - 1;
        commas.push(tokens.length - 1);
      } else if (type === "OPEN_BRACKET") {
        token.type = "BRACKET";
      } else if (type === "CLOSE_BRACKET") {
        let suffix = tokens.pop().text;
        if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
          const value = tokens.pop().text;
          suffix = value + suffix;
          tokens[tokens.length - 1].value = getNumber(value);
        }
        if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") {
          throw new Error("missing opening bracket");
        }
        tokens[tokens.length - 1].text += suffix;
      }
      continue;
    }
    match = cur.match(regexIdPrefix);
    if (match) {
      token.text = match[1];
      offset += token.text.length;
      if (Keywords.has(token.text)) {
        token.type = "KEYWORD";
        continue;
      }
      if (token.text.match(regexType)) {
        token.type = "TYPE";
        continue;
      }
      token.type = "ID";
      continue;
    }
    match = cur.match(regexNumberPrefix);
    if (match) {
      token.text = match[1];
      token.type = "NUMBER";
      offset += token.text.length;
      continue;
    }
    throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);
  }
  return new TokenString(tokens.map((t) => Object.freeze(t)));
}
function allowSingle(set6, allowed) {
  let included = [];
  for (const key in allowed.keys()) {
    if (set6.has(key)) {
      included.push(key);
    }
  }
  if (included.length > 1) {
    throw new Error(`conflicting types: ${included.join(", ")}`);
  }
}
function consumeName(type, tokens) {
  if (tokens.peekKeyword(KwTypes)) {
    const keyword = tokens.pop().text;
    if (keyword !== type) {
      throw new Error(`expected ${type}, got ${keyword}`);
    }
  }
  return tokens.popType("ID");
}
function consumeKeywords(tokens, allowed) {
  const keywords = /* @__PURE__ */ new Set();
  while (true) {
    const keyword = tokens.peekType("KEYWORD");
    if (keyword == null || allowed && !allowed.has(keyword)) {
      break;
    }
    tokens.pop();
    if (keywords.has(keyword)) {
      throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
    }
    keywords.add(keyword);
  }
  return Object.freeze(keywords);
}
function consumeMutability(tokens) {
  let modifiers = consumeKeywords(tokens, KwVisib);
  allowSingle(modifiers, setify("constant payable nonpayable".split(" ")));
  allowSingle(modifiers, setify("pure view payable nonpayable".split(" ")));
  if (modifiers.has("view")) {
    return "view";
  }
  if (modifiers.has("pure")) {
    return "pure";
  }
  if (modifiers.has("payable")) {
    return "payable";
  }
  if (modifiers.has("nonpayable")) {
    return "nonpayable";
  }
  if (modifiers.has("constant")) {
    return "view";
  }
  return "nonpayable";
}
function consumeParams(tokens, allowIndexed) {
  return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));
}
function consumeGas(tokens) {
  if (tokens.peekType("AT")) {
    tokens.pop();
    if (tokens.peekType("NUMBER")) {
      return getBigInt(tokens.pop().text);
    }
    throw new Error("invalid gas");
  }
  return null;
}
function consumeEoi(tokens) {
  if (tokens.length) {
    throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);
  }
}
var regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
function verifyBasicType(type) {
  const match = type.match(regexType);
  assertArgument(match, "invalid type", "type", type);
  if (type === "uint") {
    return "uint256";
  }
  if (type === "int") {
    return "int256";
  }
  if (match[2]) {
    const length = parseInt(match[2]);
    assertArgument(length !== 0 && length <= 32, "invalid bytes length", "type", type);
  } else if (match[3]) {
    const size = parseInt(match[3]);
    assertArgument(size !== 0 && size <= 256 && size % 8 === 0, "invalid numeric width", "type", type);
  }
  return type;
}
var _guard2 = {};
var internal = Symbol.for("_ethers_internal");
var ParamTypeInternal = "_ParamTypeInternal";
var ErrorFragmentInternal = "_ErrorInternal";
var EventFragmentInternal = "_EventInternal";
var ConstructorFragmentInternal = "_ConstructorInternal";
var FallbackFragmentInternal = "_FallbackInternal";
var FunctionFragmentInternal = "_FunctionInternal";
var StructFragmentInternal = "_StructInternal";
var ParamType = class _ParamType {
  /**
   *  The local name of the parameter (or ``""`` if unbound)
   */
  name;
  /**
   *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
   *  ``"uint256[3][]"``)
   */
  type;
  /**
   *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
   */
  baseType;
  /**
   *  True if the parameters is indexed.
   *
   *  For non-indexable types this is ``null``.
   */
  indexed;
  /**
   *  The components for the tuple.
   *
   *  For non-tuple types this is ``null``.
   */
  components;
  /**
   *  The array length, or ``-1`` for dynamic-lengthed arrays.
   *
   *  For non-array types this is ``null``.
   */
  arrayLength;
  /**
   *  The type of each child in the array.
   *
   *  For non-array types this is ``null``.
   */
  arrayChildren;
  /**
   *  @private
   */
  constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {
    assertPrivate(guard, _guard2, "ParamType");
    Object.defineProperty(this, internal, { value: ParamTypeInternal });
    if (components) {
      components = Object.freeze(components.slice());
    }
    if (baseType === "array") {
      if (arrayLength == null || arrayChildren == null) {
        throw new Error("");
      }
    } else if (arrayLength != null || arrayChildren != null) {
      throw new Error("");
    }
    if (baseType === "tuple") {
      if (components == null) {
        throw new Error("");
      }
    } else if (components != null) {
      throw new Error("");
    }
    defineProperties(this, {
      name,
      type,
      baseType,
      indexed,
      components,
      arrayLength,
      arrayChildren
    });
  }
  /**
   *  Return a string representation of this type.
   *
   *  For example,
   *
   *  ``sighash" => "(uint256,address)"``
   *
   *  ``"minimal" => "tuple(uint256,address) indexed"``
   *
   *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
   */
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      const name = this.name || "";
      if (this.isArray()) {
        const result3 = JSON.parse(this.arrayChildren.format("json"));
        result3.name = name;
        result3.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
        return JSON.stringify(result3);
      }
      const result2 = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name
      };
      if (typeof this.indexed === "boolean") {
        result2.indexed = this.indexed;
      }
      if (this.isTuple()) {
        result2.components = this.components.map((c) => JSON.parse(c.format(format)));
      }
      return JSON.stringify(result2);
    }
    let result = "";
    if (this.isArray()) {
      result += this.arrayChildren.format(format);
      result += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
    } else {
      if (this.isTuple()) {
        result += "(" + this.components.map((comp) => comp.format(format)).join(format === "full" ? ", " : ",") + ")";
      } else {
        result += this.type;
      }
    }
    if (format !== "sighash") {
      if (this.indexed === true) {
        result += " indexed";
      }
      if (format === "full" && this.name) {
        result += " " + this.name;
      }
    }
    return result;
  }
  /**
   *  Returns true if %%this%% is an Array type.
   *
   *  This provides a type gaurd ensuring that [[arrayChildren]]
   *  and [[arrayLength]] are non-null.
   */
  isArray() {
    return this.baseType === "array";
  }
  /**
   *  Returns true if %%this%% is a Tuple type.
   *
   *  This provides a type gaurd ensuring that [[components]]
   *  is non-null.
   */
  isTuple() {
    return this.baseType === "tuple";
  }
  /**
   *  Returns true if %%this%% is an Indexable type.
   *
   *  This provides a type gaurd ensuring that [[indexed]]
   *  is non-null.
   */
  isIndexable() {
    return this.indexed != null;
  }
  /**
   *  Walks the **ParamType** with %%value%%, calling %%process%%
   *  on each type, destructing the %%value%% recursively.
   */
  walk(value, process2) {
    if (this.isArray()) {
      if (!Array.isArray(value)) {
        throw new Error("invalid array value");
      }
      if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
        throw new Error("array is wrong length");
      }
      const _this = this;
      return value.map((v) => _this.arrayChildren.walk(v, process2));
    }
    if (this.isTuple()) {
      if (!Array.isArray(value)) {
        throw new Error("invalid tuple value");
      }
      if (value.length !== this.components.length) {
        throw new Error("array is wrong length");
      }
      const _this = this;
      return value.map((v, i) => _this.components[i].walk(v, process2));
    }
    return process2(this.type, value);
  }
  #walkAsync(promises, value, process2, setValue) {
    if (this.isArray()) {
      if (!Array.isArray(value)) {
        throw new Error("invalid array value");
      }
      if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
        throw new Error("array is wrong length");
      }
      const childType = this.arrayChildren;
      const result2 = value.slice();
      result2.forEach((value2, index) => {
        childType.#walkAsync(promises, value2, process2, (value3) => {
          result2[index] = value3;
        });
      });
      setValue(result2);
      return;
    }
    if (this.isTuple()) {
      const components = this.components;
      let result2;
      if (Array.isArray(value)) {
        result2 = value.slice();
      } else {
        if (value == null || typeof value !== "object") {
          throw new Error("invalid tuple value");
        }
        result2 = components.map((param) => {
          if (!param.name) {
            throw new Error("cannot use object value with unnamed components");
          }
          if (!(param.name in value)) {
            throw new Error(`missing value for component ${param.name}`);
          }
          return value[param.name];
        });
      }
      if (result2.length !== this.components.length) {
        throw new Error("array is wrong length");
      }
      result2.forEach((value2, index) => {
        components[index].#walkAsync(promises, value2, process2, (value3) => {
          result2[index] = value3;
        });
      });
      setValue(result2);
      return;
    }
    const result = process2(this.type, value);
    if (result.then) {
      promises.push(async function() {
        setValue(await result);
      }());
    } else {
      setValue(result);
    }
  }
  /**
   *  Walks the **ParamType** with %%value%%, asynchronously calling
   *  %%process%% on each type, destructing the %%value%% recursively.
   *
   *  This can be used to resolve ENS names by walking and resolving each
   *  ``"address"`` type.
   */
  async walkAsync(value, process2) {
    const promises = [];
    const result = [value];
    this.#walkAsync(promises, value, process2, (value2) => {
      result[0] = value2;
    });
    if (promises.length) {
      await Promise.all(promises);
    }
    return result[0];
  }
  /**
   *  Creates a new **ParamType** for %%obj%%.
   *
   *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
   *  otherwise the ``indexed`` keyword will throw an error.
   */
  static from(obj, allowIndexed) {
    if (_ParamType.isParamType(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _ParamType.from(lex(obj), allowIndexed);
      } catch (error) {
        assertArgument(false, "invalid param type", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      let type2 = "", baseType = "";
      let comps = null;
      if (consumeKeywords(obj, setify(["tuple"])).has("tuple") || obj.peekType("OPEN_PAREN")) {
        baseType = "tuple";
        comps = obj.popParams().map((t) => _ParamType.from(t));
        type2 = `tuple(${comps.map((c) => c.format()).join(",")})`;
      } else {
        type2 = verifyBasicType(obj.popType("TYPE"));
        baseType = type2;
      }
      let arrayChildren = null;
      let arrayLength = null;
      while (obj.length && obj.peekType("BRACKET")) {
        const bracket = obj.pop();
        arrayChildren = new _ParamType(_guard2, "", type2, baseType, null, comps, arrayLength, arrayChildren);
        arrayLength = bracket.value;
        type2 += bracket.text;
        baseType = "array";
        comps = null;
      }
      let indexed2 = null;
      const keywords = consumeKeywords(obj, KwModifiers);
      if (keywords.has("indexed")) {
        if (!allowIndexed) {
          throw new Error("");
        }
        indexed2 = true;
      }
      const name2 = obj.peekType("ID") ? obj.pop().text : "";
      if (obj.length) {
        throw new Error("leftover tokens");
      }
      return new _ParamType(_guard2, name2, type2, baseType, indexed2, comps, arrayLength, arrayChildren);
    }
    const name = obj.name;
    assertArgument(!name || typeof name === "string" && name.match(regexId), "invalid name", "obj.name", name);
    let indexed = obj.indexed;
    if (indexed == true) {
      assertArgument(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
      indexed = true;
    } else {
      indexed = false;
    }
    let type = obj.type;
    let arrayMatch = type.match(regexArrayType);
    if (arrayMatch) {
      const arrayLength = parseInt(arrayMatch[2] || "-1");
      const arrayChildren = _ParamType.from({
        type: arrayMatch[1],
        components: obj.components
      });
      return new _ParamType(_guard2, name || "", type, "array", indexed, null, arrayLength, arrayChildren);
    }
    if (type === "tuple" || type.startsWith(
      "tuple("
      /* fix: ) */
    ) || type.startsWith(
      "("
      /* fix: ) */
    )) {
      const comps = obj.components != null ? obj.components.map((c) => _ParamType.from(c)) : null;
      const tuple2 = new _ParamType(_guard2, name || "", type, "tuple", indexed, comps, null, null);
      return tuple2;
    }
    type = verifyBasicType(obj.type);
    return new _ParamType(_guard2, name || "", type, type, indexed, null, null, null);
  }
  /**
   *  Returns true if %%value%% is a **ParamType**.
   */
  static isParamType(value) {
    return value && value[internal] === ParamTypeInternal;
  }
};
var Fragment = class _Fragment {
  /**
   *  The type of the fragment.
   */
  type;
  /**
   *  The inputs for the fragment.
   */
  inputs;
  /**
   *  @private
   */
  constructor(guard, type, inputs) {
    assertPrivate(guard, _guard2, "Fragment");
    inputs = Object.freeze(inputs.slice());
    defineProperties(this, { type, inputs });
  }
  /**
   *  Creates a new **Fragment** for %%obj%%, wich can be any supported
   *  ABI frgament type.
   */
  static from(obj) {
    if (typeof obj === "string") {
      try {
        _Fragment.from(JSON.parse(obj));
      } catch (e) {
      }
      return _Fragment.from(lex(obj));
    }
    if (obj instanceof TokenString) {
      const type = obj.peekKeyword(KwTypes);
      switch (type) {
        case "constructor":
          return ConstructorFragment.from(obj);
        case "error":
          return ErrorFragment.from(obj);
        case "event":
          return EventFragment.from(obj);
        case "fallback":
        case "receive":
          return FallbackFragment.from(obj);
        case "function":
          return FunctionFragment.from(obj);
        case "struct":
          return StructFragment.from(obj);
      }
    } else if (typeof obj === "object") {
      switch (obj.type) {
        case "constructor":
          return ConstructorFragment.from(obj);
        case "error":
          return ErrorFragment.from(obj);
        case "event":
          return EventFragment.from(obj);
        case "fallback":
        case "receive":
          return FallbackFragment.from(obj);
        case "function":
          return FunctionFragment.from(obj);
        case "struct":
          return StructFragment.from(obj);
      }
      assert(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
        operation: "Fragment.from"
      });
    }
    assertArgument(false, "unsupported frgament object", "obj", obj);
  }
  /**
   *  Returns true if %%value%% is a [[ConstructorFragment]].
   */
  static isConstructor(value) {
    return ConstructorFragment.isFragment(value);
  }
  /**
   *  Returns true if %%value%% is an [[ErrorFragment]].
   */
  static isError(value) {
    return ErrorFragment.isFragment(value);
  }
  /**
   *  Returns true if %%value%% is an [[EventFragment]].
   */
  static isEvent(value) {
    return EventFragment.isFragment(value);
  }
  /**
   *  Returns true if %%value%% is a [[FunctionFragment]].
   */
  static isFunction(value) {
    return FunctionFragment.isFragment(value);
  }
  /**
   *  Returns true if %%value%% is a [[StructFragment]].
   */
  static isStruct(value) {
    return StructFragment.isFragment(value);
  }
};
var NamedFragment = class extends Fragment {
  /**
   *  The name of the fragment.
   */
  name;
  /**
   *  @private
   */
  constructor(guard, type, name, inputs) {
    super(guard, type, inputs);
    assertArgument(typeof name === "string" && name.match(regexId), "invalid identifier", "name", name);
    inputs = Object.freeze(inputs.slice());
    defineProperties(this, { name });
  }
};
function joinParams(format, params) {
  return "(" + params.map((p) => p.format(format)).join(format === "full" ? ", " : ",") + ")";
}
var ErrorFragment = class _ErrorFragment extends NamedFragment {
  /**
   *  @private
   */
  constructor(guard, name, inputs) {
    super(guard, "error", name, inputs);
    Object.defineProperty(this, internal, { value: ErrorFragmentInternal });
  }
  /**
   *  The Custom Error selector.
   */
  get selector() {
    return id(this.format("sighash")).substring(0, 10);
  }
  /**
   *  Returns a string representation of this fragment as %%format%%.
   */
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      return JSON.stringify({
        type: "error",
        name: this.name,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    const result = [];
    if (format !== "sighash") {
      result.push("error");
    }
    result.push(this.name + joinParams(format, this.inputs));
    return result.join(" ");
  }
  /**
   *  Returns a new **ErrorFragment** for %%obj%%.
   */
  static from(obj) {
    if (_ErrorFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      return _ErrorFragment.from(lex(obj));
    } else if (obj instanceof TokenString) {
      const name = consumeName("error", obj);
      const inputs = consumeParams(obj);
      consumeEoi(obj);
      return new _ErrorFragment(_guard2, name, inputs);
    }
    return new _ErrorFragment(_guard2, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is an
   *  **ErrorFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === ErrorFragmentInternal;
  }
};
var EventFragment = class _EventFragment extends NamedFragment {
  /**
   *  Whether this event is anonymous.
   */
  anonymous;
  /**
   *  @private
   */
  constructor(guard, name, inputs, anonymous) {
    super(guard, "event", name, inputs);
    Object.defineProperty(this, internal, { value: EventFragmentInternal });
    defineProperties(this, { anonymous });
  }
  /**
   *  The Event topic hash.
   */
  get topicHash() {
    return id(this.format("sighash"));
  }
  /**
   *  Returns a string representation of this event as %%format%%.
   */
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      return JSON.stringify({
        type: "event",
        anonymous: this.anonymous,
        name: this.name,
        inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
      });
    }
    const result = [];
    if (format !== "sighash") {
      result.push("event");
    }
    result.push(this.name + joinParams(format, this.inputs));
    if (format !== "sighash" && this.anonymous) {
      result.push("anonymous");
    }
    return result.join(" ");
  }
  /**
   *  Return the topic hash for an event with %%name%% and %%params%%.
   */
  static getTopicHash(name, params) {
    params = (params || []).map((p) => ParamType.from(p));
    const fragment = new _EventFragment(_guard2, name, params, false);
    return fragment.topicHash;
  }
  /**
   *  Returns a new **EventFragment** for %%obj%%.
   */
  static from(obj) {
    if (_EventFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _EventFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid event fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const name = consumeName("event", obj);
      const inputs = consumeParams(obj, true);
      const anonymous = !!consumeKeywords(obj, setify(["anonymous"])).has("anonymous");
      consumeEoi(obj);
      return new _EventFragment(_guard2, name, inputs, anonymous);
    }
    return new _EventFragment(_guard2, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is an
   *  **EventFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === EventFragmentInternal;
  }
};
var ConstructorFragment = class _ConstructorFragment extends Fragment {
  /**
   *  Whether the constructor can receive an endowment.
   */
  payable;
  /**
   *  The recommended gas limit for deployment or ``null``.
   */
  gas;
  /**
   *  @private
   */
  constructor(guard, type, inputs, payable, gas) {
    super(guard, type, inputs);
    Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });
    defineProperties(this, { payable, gas });
  }
  /**
   *  Returns a string representation of this constructor as %%format%%.
   */
  format(format) {
    assert(format != null && format !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" });
    if (format === "json") {
      return JSON.stringify({
        type: "constructor",
        stateMutability: this.payable ? "payable" : "undefined",
        payable: this.payable,
        gas: this.gas != null ? this.gas : void 0,
        inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
      });
    }
    const result = [`constructor${joinParams(format, this.inputs)}`];
    if (this.payable) {
      result.push("payable");
    }
    if (this.gas != null) {
      result.push(`@${this.gas.toString()}`);
    }
    return result.join(" ");
  }
  /**
   *  Returns a new **ConstructorFragment** for %%obj%%.
   */
  static from(obj) {
    if (_ConstructorFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _ConstructorFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid constuctor fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      consumeKeywords(obj, setify(["constructor"]));
      const inputs = consumeParams(obj);
      const payable = !!consumeKeywords(obj, KwVisibDeploy).has("payable");
      const gas = consumeGas(obj);
      consumeEoi(obj);
      return new _ConstructorFragment(_guard2, "constructor", inputs, payable, gas);
    }
    return new _ConstructorFragment(_guard2, "constructor", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **ConstructorFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === ConstructorFragmentInternal;
  }
};
var FallbackFragment = class _FallbackFragment extends Fragment {
  /**
   *  If the function can be sent value during invocation.
   */
  payable;
  constructor(guard, inputs, payable) {
    super(guard, "fallback", inputs);
    Object.defineProperty(this, internal, { value: FallbackFragmentInternal });
    defineProperties(this, { payable });
  }
  /**
   *  Returns a string representation of this fallback as %%format%%.
   */
  format(format) {
    const type = this.inputs.length === 0 ? "receive" : "fallback";
    if (format === "json") {
      const stateMutability = this.payable ? "payable" : "nonpayable";
      return JSON.stringify({ type, stateMutability });
    }
    return `${type}()${this.payable ? " payable" : ""}`;
  }
  /**
   *  Returns a new **FallbackFragment** for %%obj%%.
   */
  static from(obj) {
    if (_FallbackFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _FallbackFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid fallback fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const errorObj = obj.toString();
      const topIsValid = obj.peekKeyword(setify(["fallback", "receive"]));
      assertArgument(topIsValid, "type must be fallback or receive", "obj", errorObj);
      const type = obj.popKeyword(setify(["fallback", "receive"]));
      if (type === "receive") {
        const inputs2 = consumeParams(obj);
        assertArgument(inputs2.length === 0, `receive cannot have arguments`, "obj.inputs", inputs2);
        consumeKeywords(obj, setify(["payable"]));
        consumeEoi(obj);
        return new _FallbackFragment(_guard2, [], true);
      }
      let inputs = consumeParams(obj);
      if (inputs.length) {
        assertArgument(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i) => i.format("minimal")).join(", "));
      } else {
        inputs = [ParamType.from("bytes")];
      }
      const mutability = consumeMutability(obj);
      assertArgument(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
      if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
        const outputs = consumeParams(obj);
        assertArgument(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i) => i.format("minimal")).join(", "));
      }
      consumeEoi(obj);
      return new _FallbackFragment(_guard2, inputs, mutability === "payable");
    }
    if (obj.type === "receive") {
      return new _FallbackFragment(_guard2, [], true);
    }
    if (obj.type === "fallback") {
      const inputs = [ParamType.from("bytes")];
      const payable = obj.stateMutability === "payable";
      return new _FallbackFragment(_guard2, inputs, payable);
    }
    assertArgument(false, "invalid fallback description", "obj", obj);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **FallbackFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === FallbackFragmentInternal;
  }
};
var FunctionFragment = class _FunctionFragment extends NamedFragment {
  /**
   *  If the function is constant (e.g. ``pure`` or ``view`` functions).
   */
  constant;
  /**
   *  The returned types for the result of calling this function.
   */
  outputs;
  /**
   *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
   *  or ``pure``)
   */
  stateMutability;
  /**
   *  If the function can be sent value during invocation.
   */
  payable;
  /**
   *  The recommended gas limit to send when calling this function.
   */
  gas;
  /**
   *  @private
   */
  constructor(guard, name, stateMutability, inputs, outputs, gas) {
    super(guard, "function", name, inputs);
    Object.defineProperty(this, internal, { value: FunctionFragmentInternal });
    outputs = Object.freeze(outputs.slice());
    const constant = stateMutability === "view" || stateMutability === "pure";
    const payable = stateMutability === "payable";
    defineProperties(this, { constant, gas, outputs, payable, stateMutability });
  }
  /**
   *  The Function selector.
   */
  get selector() {
    return id(this.format("sighash")).substring(0, 10);
  }
  /**
   *  Returns a string representation of this function as %%format%%.
   */
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      return JSON.stringify({
        type: "function",
        name: this.name,
        constant: this.constant,
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas != null ? this.gas : void 0,
        inputs: this.inputs.map((i) => JSON.parse(i.format(format))),
        outputs: this.outputs.map((o) => JSON.parse(o.format(format)))
      });
    }
    const result = [];
    if (format !== "sighash") {
      result.push("function");
    }
    result.push(this.name + joinParams(format, this.inputs));
    if (format !== "sighash") {
      if (this.stateMutability !== "nonpayable") {
        result.push(this.stateMutability);
      }
      if (this.outputs && this.outputs.length) {
        result.push("returns");
        result.push(joinParams(format, this.outputs));
      }
      if (this.gas != null) {
        result.push(`@${this.gas.toString()}`);
      }
    }
    return result.join(" ");
  }
  /**
   *  Return the selector for a function with %%name%% and %%params%%.
   */
  static getSelector(name, params) {
    params = (params || []).map((p) => ParamType.from(p));
    const fragment = new _FunctionFragment(_guard2, name, "view", params, [], null);
    return fragment.selector;
  }
  /**
   *  Returns a new **FunctionFragment** for %%obj%%.
   */
  static from(obj) {
    if (_FunctionFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _FunctionFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid function fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const name = consumeName("function", obj);
      const inputs = consumeParams(obj);
      const mutability = consumeMutability(obj);
      let outputs = [];
      if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
        outputs = consumeParams(obj);
      }
      const gas = consumeGas(obj);
      consumeEoi(obj);
      return new _FunctionFragment(_guard2, name, mutability, inputs, outputs, gas);
    }
    let stateMutability = obj.stateMutability;
    if (stateMutability == null) {
      stateMutability = "payable";
      if (typeof obj.constant === "boolean") {
        stateMutability = "view";
        if (!obj.constant) {
          stateMutability = "payable";
          if (typeof obj.payable === "boolean" && !obj.payable) {
            stateMutability = "nonpayable";
          }
        }
      } else if (typeof obj.payable === "boolean" && !obj.payable) {
        stateMutability = "nonpayable";
      }
    }
    return new _FunctionFragment(_guard2, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **FunctionFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === FunctionFragmentInternal;
  }
};
var StructFragment = class _StructFragment extends NamedFragment {
  /**
   *  @private
   */
  constructor(guard, name, inputs) {
    super(guard, "struct", name, inputs);
    Object.defineProperty(this, internal, { value: StructFragmentInternal });
  }
  /**
   *  Returns a string representation of this struct as %%format%%.
   */
  format() {
    throw new Error("@TODO");
  }
  /**
   *  Returns a new **StructFragment** for %%obj%%.
   */
  static from(obj) {
    if (typeof obj === "string") {
      try {
        return _StructFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid struct fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const name = consumeName("struct", obj);
      const inputs = consumeParams(obj);
      consumeEoi(obj);
      return new _StructFragment(_guard2, name, inputs);
    }
    return new _StructFragment(_guard2, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
  }
  // @TODO: fix this return type
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **StructFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === StructFragmentInternal;
  }
};

// ../../node_modules/ethers/lib.esm/abi/abi-coder.js
var PanicReasons = /* @__PURE__ */ new Map();
PanicReasons.set(0, "GENERIC_PANIC");
PanicReasons.set(1, "ASSERT_FALSE");
PanicReasons.set(17, "OVERFLOW");
PanicReasons.set(18, "DIVIDE_BY_ZERO");
PanicReasons.set(33, "ENUM_RANGE_ERROR");
PanicReasons.set(34, "BAD_STORAGE_DATA");
PanicReasons.set(49, "STACK_UNDERFLOW");
PanicReasons.set(50, "ARRAY_RANGE_ERROR");
PanicReasons.set(65, "OUT_OF_MEMORY");
PanicReasons.set(81, "UNINITIALIZED_FUNCTION_CALL");
var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
var defaultCoder = null;
var defaultMaxInflation = 1024;
function getBuiltinCallException(action, tx, data, abiCoder) {
  let message2 = "missing revert data";
  let reason = null;
  const invocation = null;
  let revert = null;
  if (data) {
    message2 = "execution reverted";
    const bytes4 = getBytes(data);
    data = hexlify(data);
    if (bytes4.length === 0) {
      message2 += " (no data present; likely require(false) occurred";
      reason = "require(false)";
    } else if (bytes4.length % 32 !== 4) {
      message2 += " (could not decode reason; invalid data length)";
    } else if (hexlify(bytes4.slice(0, 4)) === "0x08c379a0") {
      try {
        reason = abiCoder.decode(["string"], bytes4.slice(4))[0];
        revert = {
          signature: "Error(string)",
          name: "Error",
          args: [reason]
        };
        message2 += `: ${JSON.stringify(reason)}`;
      } catch (error) {
        message2 += " (could not decode reason; invalid string data)";
      }
    } else if (hexlify(bytes4.slice(0, 4)) === "0x4e487b71") {
      try {
        const code = Number(abiCoder.decode(["uint256"], bytes4.slice(4))[0]);
        revert = {
          signature: "Panic(uint256)",
          name: "Panic",
          args: [code]
        };
        reason = `Panic due to ${PanicReasons.get(code) || "UNKNOWN"}(${code})`;
        message2 += `: ${reason}`;
      } catch (error) {
        message2 += " (could not decode panic code)";
      }
    } else {
      message2 += " (unknown custom error)";
    }
  }
  const transaction = {
    to: tx.to ? getAddress(tx.to) : null,
    data: tx.data || "0x"
  };
  if (tx.from) {
    transaction.from = getAddress(tx.from);
  }
  return makeError(message2, "CALL_EXCEPTION", {
    action,
    data,
    reason,
    transaction,
    invocation,
    revert
  });
}
var AbiCoder = class _AbiCoder {
  #getCoder(param) {
    if (param.isArray()) {
      return new ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);
    }
    if (param.isTuple()) {
      return new TupleCoder(param.components.map((c) => this.#getCoder(c)), param.name);
    }
    switch (param.baseType) {
      case "address":
        return new AddressCoder(param.name);
      case "bool":
        return new BooleanCoder(param.name);
      case "string":
        return new StringCoder(param.name);
      case "bytes":
        return new BytesCoder(param.name);
      case "":
        return new NullCoder(param.name);
    }
    let match = param.type.match(paramTypeNumber);
    if (match) {
      let size = parseInt(match[2] || "256");
      assertArgument(size !== 0 && size <= 256 && size % 8 === 0, "invalid " + match[1] + " bit length", "param", param);
      return new NumberCoder(size / 8, match[1] === "int", param.name);
    }
    match = param.type.match(paramTypeBytes);
    if (match) {
      let size = parseInt(match[1]);
      assertArgument(size !== 0 && size <= 32, "invalid bytes length", "param", param);
      return new FixedBytesCoder(size, param.name);
    }
    assertArgument(false, "invalid type", "type", param.type);
  }
  /**
   *  Get the default values for the given %%types%%.
   *
   *  For example, a ``uint`` is by default ``0`` and ``bool``
   *  is by default ``false``.
   */
  getDefaultValue(types) {
    const coders = types.map((type) => this.#getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.defaultValue();
  }
  /**
   *  Encode the %%values%% as the %%types%% into ABI data.
   *
   *  @returns DataHexstring
   */
  encode(types, values) {
    assertArgumentCount(values.length, types.length, "types/values length mismatch");
    const coders = types.map((type) => this.#getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    const writer = new Writer();
    coder.encode(writer, values);
    return writer.data;
  }
  /**
   *  Decode the ABI %%data%% as the %%types%% into values.
   *
   *  If %%loose%% decoding is enabled, then strict padding is
   *  not enforced. Some older versions of Solidity incorrectly
   *  padded event data emitted from ``external`` functions.
   */
  decode(types, data, loose) {
    const coders = types.map((type) => this.#getCoder(ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.decode(new Reader(data, loose, defaultMaxInflation));
  }
  static _setDefaultMaxInflation(value) {
    assertArgument(typeof value === "number" && Number.isInteger(value), "invalid defaultMaxInflation factor", "value", value);
    defaultMaxInflation = value;
  }
  /**
   *  Returns the shared singleton instance of a default [[AbiCoder]].
   *
   *  On the first call, the instance is created internally.
   */
  static defaultAbiCoder() {
    if (defaultCoder == null) {
      defaultCoder = new _AbiCoder();
    }
    return defaultCoder;
  }
  /**
   *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
   *  result %%data%% for the [[CallExceptionAction]] %%action%% against
   *  the Transaction %%tx%%.
   */
  static getBuiltinCallException(action, tx, data) {
    return getBuiltinCallException(action, tx, data, _AbiCoder.defaultAbiCoder());
  }
};

// ../../node_modules/ethers/lib.esm/abi/interface.js
var LogDescription = class {
  /**
   *  The matching fragment for the ``topic0``.
   */
  fragment;
  /**
   *  The name of the Event.
   */
  name;
  /**
   *  The full Event signature.
   */
  signature;
  /**
   *  The topic hash for the Event.
   */
  topic;
  /**
   *  The arguments passed into the Event with ``emit``.
   */
  args;
  /**
   *  @_ignore:
   */
  constructor(fragment, topic, args) {
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      signature,
      topic,
      args
    });
  }
};
var TransactionDescription = class {
  /**
   *  The matching fragment from the transaction ``data``.
   */
  fragment;
  /**
   *  The name of the Function from the transaction ``data``.
   */
  name;
  /**
   *  The arguments passed to the Function from the transaction ``data``.
   */
  args;
  /**
   *  The full Function signature from the transaction ``data``.
   */
  signature;
  /**
   *  The selector for the Function from the transaction ``data``.
   */
  selector;
  /**
   *  The ``value`` (in wei) from the transaction.
   */
  value;
  /**
   *  @_ignore:
   */
  constructor(fragment, selector, args, value) {
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      args,
      signature,
      selector,
      value
    });
  }
};
var ErrorDescription = class {
  /**
   *  The matching fragment.
   */
  fragment;
  /**
   *  The name of the Error.
   */
  name;
  /**
   *  The arguments passed to the Error with ``revert``.
   */
  args;
  /**
   *  The full Error signature.
   */
  signature;
  /**
   *  The selector for the Error.
   */
  selector;
  /**
   *  @_ignore:
   */
  constructor(fragment, selector, args) {
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      args,
      signature,
      selector
    });
  }
};
var Indexed = class {
  /**
   *  The ``keccak256`` of the value logged.
   */
  hash;
  /**
   *  @_ignore:
   */
  _isIndexed;
  /**
   *  Returns ``true`` if %%value%% is an **Indexed**.
   *
   *  This provides a Type Guard for property access.
   */
  static isIndexed(value) {
    return !!(value && value._isIndexed);
  }
  /**
   *  @_ignore:
   */
  constructor(hash) {
    defineProperties(this, { hash, _isIndexed: true });
  }
};
var PanicReasons2 = {
  "0": "generic panic",
  "1": "assert(false)",
  "17": "arithmetic overflow",
  "18": "division or modulo by zero",
  "33": "enum overflow",
  "34": "invalid encoded storage byte array accessed",
  "49": "out-of-bounds array access; popping on an empty array",
  "50": "out-of-bounds access of an array or bytesN",
  "65": "out of memory",
  "81": "uninitialized function"
};
var BuiltinErrors = {
  "0x08c379a0": {
    signature: "Error(string)",
    name: "Error",
    inputs: ["string"],
    reason: (message2) => {
      return `reverted with reason string ${JSON.stringify(message2)}`;
    }
  },
  "0x4e487b71": {
    signature: "Panic(uint256)",
    name: "Panic",
    inputs: ["uint256"],
    reason: (code) => {
      let reason = "unknown panic code";
      if (code >= 0 && code <= 255 && PanicReasons2[code.toString()]) {
        reason = PanicReasons2[code.toString()];
      }
      return `reverted with panic code 0x${code.toString(16)} (${reason})`;
    }
  }
};
var Interface = class _Interface {
  /**
   *  All the Contract ABI members (i.e. methods, events, errors, etc).
   */
  fragments;
  /**
   *  The Contract constructor.
   */
  deploy;
  /**
   *  The Fallback method, if any.
   */
  fallback;
  /**
   *  If receiving ether is supported.
   */
  receive;
  #errors;
  #events;
  #functions;
  //    #structs: Map<string, StructFragment>;
  #abiCoder;
  /**
   *  Create a new Interface for the %%fragments%%.
   */
  constructor(fragments) {
    let abi = [];
    if (typeof fragments === "string") {
      abi = JSON.parse(fragments);
    } else {
      abi = fragments;
    }
    this.#functions = /* @__PURE__ */ new Map();
    this.#errors = /* @__PURE__ */ new Map();
    this.#events = /* @__PURE__ */ new Map();
    const frags = [];
    for (const a of abi) {
      try {
        frags.push(Fragment.from(a));
      } catch (error) {
        console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);
      }
    }
    defineProperties(this, {
      fragments: Object.freeze(frags)
    });
    let fallback = null;
    let receive = false;
    this.#abiCoder = this.getAbiCoder();
    this.fragments.forEach((fragment, index) => {
      let bucket;
      switch (fragment.type) {
        case "constructor":
          if (this.deploy) {
            console.log("duplicate definition - constructor");
            return;
          }
          defineProperties(this, { deploy: fragment });
          return;
        case "fallback":
          if (fragment.inputs.length === 0) {
            receive = true;
          } else {
            assertArgument(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
            fallback = fragment;
            receive = fallback.payable;
          }
          return;
        case "function":
          bucket = this.#functions;
          break;
        case "event":
          bucket = this.#events;
          break;
        case "error":
          bucket = this.#errors;
          break;
        default:
          return;
      }
      const signature = fragment.format();
      if (bucket.has(signature)) {
        return;
      }
      bucket.set(signature, fragment);
    });
    if (!this.deploy) {
      defineProperties(this, {
        deploy: ConstructorFragment.from("constructor()")
      });
    }
    defineProperties(this, { fallback, receive });
  }
  /**
   *  Returns the entire Human-Readable ABI, as an array of
   *  signatures, optionally as %%minimal%% strings, which
   *  removes parameter names and unneceesary spaces.
   */
  format(minimal) {
    const format = minimal ? "minimal" : "full";
    const abi = this.fragments.map((f) => f.format(format));
    return abi;
  }
  /**
   *  Return the JSON-encoded ABI. This is the format Solidiy
   *  returns.
   */
  formatJson() {
    const abi = this.fragments.map((f) => f.format("json"));
    return JSON.stringify(abi.map((j) => JSON.parse(j)));
  }
  /**
   *  The ABI coder that will be used to encode and decode binary
   *  data.
   */
  getAbiCoder() {
    return AbiCoder.defaultAbiCoder();
  }
  // Find a function definition by any means necessary (unless it is ambiguous)
  #getFunction(key, values, forceUnique) {
    if (isHexString(key)) {
      const selector = key.toLowerCase();
      for (const fragment of this.#functions.values()) {
        if (selector === fragment.selector) {
          return fragment;
        }
      }
      return null;
    }
    if (key.indexOf("(") === -1) {
      const matching = [];
      for (const [name, fragment] of this.#functions) {
        if (name.split(
          "("
          /* fix:) */
        )[0] === key) {
          matching.push(fragment);
        }
      }
      if (values) {
        const lastValue = values.length > 0 ? values[values.length - 1] : null;
        let valueLength = values.length;
        let allowOptions = true;
        if (Typed.isTyped(lastValue) && lastValue.type === "overrides") {
          allowOptions = false;
          valueLength--;
        }
        for (let i = matching.length - 1; i >= 0; i--) {
          const inputs = matching[i].inputs.length;
          if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {
            matching.splice(i, 1);
          }
        }
        for (let i = matching.length - 1; i >= 0; i--) {
          const inputs = matching[i].inputs;
          for (let j = 0; j < values.length; j++) {
            if (!Typed.isTyped(values[j])) {
              continue;
            }
            if (j >= inputs.length) {
              if (values[j].type === "overrides") {
                continue;
              }
              matching.splice(i, 1);
              break;
            }
            if (values[j].type !== inputs[j].baseType) {
              matching.splice(i, 1);
              break;
            }
          }
        }
      }
      if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
        const lastArg = values[values.length - 1];
        if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== "object") {
          matching.splice(0, 1);
        }
      }
      if (matching.length === 0) {
        return null;
      }
      if (matching.length > 1 && forceUnique) {
        const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
        assertArgument(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
      }
      return matching[0];
    }
    const result = this.#functions.get(FunctionFragment.from(key).format());
    if (result) {
      return result;
    }
    return null;
  }
  /**
   *  Get the function name for %%key%%, which may be a function selector,
   *  function name or function signature that belongs to the ABI.
   */
  getFunctionName(key) {
    const fragment = this.#getFunction(key, null, false);
    assertArgument(fragment, "no matching function", "key", key);
    return fragment.name;
  }
  /**
   *  Returns true if %%key%% (a function selector, function name or
   *  function signature) is present in the ABI.
   *
   *  In the case of a function name, the name may be ambiguous, so
   *  accessing the [[FunctionFragment]] may require refinement.
   */
  hasFunction(key) {
    return !!this.#getFunction(key, null, false);
  }
  /**
   *  Get the [[FunctionFragment]] for %%key%%, which may be a function
   *  selector, function name or function signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple functions match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single function in
   *  the ABI, this will throw.
   */
  getFunction(key, values) {
    return this.#getFunction(key, values || null, true);
  }
  /**
   *  Iterate over all functions, calling %%callback%%, sorted by their name.
   */
  forEachFunction(callback) {
    const names = Array.from(this.#functions.keys());
    names.sort((a, b2) => a.localeCompare(b2));
    for (let i = 0; i < names.length; i++) {
      const name = names[i];
      callback(this.#functions.get(name), i);
    }
  }
  // Find an event definition by any means necessary (unless it is ambiguous)
  #getEvent(key, values, forceUnique) {
    if (isHexString(key)) {
      const eventTopic = key.toLowerCase();
      for (const fragment of this.#events.values()) {
        if (eventTopic === fragment.topicHash) {
          return fragment;
        }
      }
      return null;
    }
    if (key.indexOf("(") === -1) {
      const matching = [];
      for (const [name, fragment] of this.#events) {
        if (name.split(
          "("
          /* fix:) */
        )[0] === key) {
          matching.push(fragment);
        }
      }
      if (values) {
        for (let i = matching.length - 1; i >= 0; i--) {
          if (matching[i].inputs.length < values.length) {
            matching.splice(i, 1);
          }
        }
        for (let i = matching.length - 1; i >= 0; i--) {
          const inputs = matching[i].inputs;
          for (let j = 0; j < values.length; j++) {
            if (!Typed.isTyped(values[j])) {
              continue;
            }
            if (values[j].type !== inputs[j].baseType) {
              matching.splice(i, 1);
              break;
            }
          }
        }
      }
      if (matching.length === 0) {
        return null;
      }
      if (matching.length > 1 && forceUnique) {
        const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
        assertArgument(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
      }
      return matching[0];
    }
    const result = this.#events.get(EventFragment.from(key).format());
    if (result) {
      return result;
    }
    return null;
  }
  /**
   *  Get the event name for %%key%%, which may be a topic hash,
   *  event name or event signature that belongs to the ABI.
   */
  getEventName(key) {
    const fragment = this.#getEvent(key, null, false);
    assertArgument(fragment, "no matching event", "key", key);
    return fragment.name;
  }
  /**
   *  Returns true if %%key%% (an event topic hash, event name or
   *  event signature) is present in the ABI.
   *
   *  In the case of an event name, the name may be ambiguous, so
   *  accessing the [[EventFragment]] may require refinement.
   */
  hasEvent(key) {
    return !!this.#getEvent(key, null, false);
  }
  /**
   *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
   *  event name or event signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple events match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single event in
   *  the ABI, this will throw.
   */
  getEvent(key, values) {
    return this.#getEvent(key, values || null, true);
  }
  /**
   *  Iterate over all events, calling %%callback%%, sorted by their name.
   */
  forEachEvent(callback) {
    const names = Array.from(this.#events.keys());
    names.sort((a, b2) => a.localeCompare(b2));
    for (let i = 0; i < names.length; i++) {
      const name = names[i];
      callback(this.#events.get(name), i);
    }
  }
  /**
   *  Get the [[ErrorFragment]] for %%key%%, which may be an error
   *  selector, error name or error signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple errors match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single error in
   *  the ABI, this will throw.
   */
  getError(key, values) {
    if (isHexString(key)) {
      const selector = key.toLowerCase();
      if (BuiltinErrors[selector]) {
        return ErrorFragment.from(BuiltinErrors[selector].signature);
      }
      for (const fragment of this.#errors.values()) {
        if (selector === fragment.selector) {
          return fragment;
        }
      }
      return null;
    }
    if (key.indexOf("(") === -1) {
      const matching = [];
      for (const [name, fragment] of this.#errors) {
        if (name.split(
          "("
          /* fix:) */
        )[0] === key) {
          matching.push(fragment);
        }
      }
      if (matching.length === 0) {
        if (key === "Error") {
          return ErrorFragment.from("error Error(string)");
        }
        if (key === "Panic") {
          return ErrorFragment.from("error Panic(uint256)");
        }
        return null;
      } else if (matching.length > 1) {
        const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
        assertArgument(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
      }
      return matching[0];
    }
    key = ErrorFragment.from(key).format();
    if (key === "Error(string)") {
      return ErrorFragment.from("error Error(string)");
    }
    if (key === "Panic(uint256)") {
      return ErrorFragment.from("error Panic(uint256)");
    }
    const result = this.#errors.get(key);
    if (result) {
      return result;
    }
    return null;
  }
  /**
   *  Iterate over all errors, calling %%callback%%, sorted by their name.
   */
  forEachError(callback) {
    const names = Array.from(this.#errors.keys());
    names.sort((a, b2) => a.localeCompare(b2));
    for (let i = 0; i < names.length; i++) {
      const name = names[i];
      callback(this.#errors.get(name), i);
    }
  }
  // Get the 4-byte selector used by Solidity to identify a function
  /*
  getSelector(fragment: ErrorFragment | FunctionFragment): string {
      if (typeof(fragment) === "string") {
          const matches: Array<Fragment> = [ ];
  
          try { matches.push(this.getFunction(fragment)); } catch (error) { }
          try { matches.push(this.getError(<string>fragment)); } catch (_) { }
  
          if (matches.length === 0) {
              logger.throwArgumentError("unknown fragment", "key", fragment);
          } else if (matches.length > 1) {
              logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
          }
  
          fragment = matches[0];
      }
  
      return dataSlice(id(fragment.format()), 0, 4);
  }
      */
  // Get the 32-byte topic hash used by Solidity to identify an event
  /*
  getEventTopic(fragment: EventFragment): string {
      //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
      return id(fragment.format());
  }
  */
  _decodeParams(params, data) {
    return this.#abiCoder.decode(params, data);
  }
  _encodeParams(params, values) {
    return this.#abiCoder.encode(params, values);
  }
  /**
   *  Encodes a ``tx.data`` object for deploying the Contract with
   *  the %%values%% as the constructor arguments.
   */
  encodeDeploy(values) {
    return this._encodeParams(this.deploy.inputs, values || []);
  }
  /**
   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
   *  specified error (see [[getError]] for valid values for
   *  %%key%%).
   *
   *  Most developers should prefer the [[parseCallResult]] method instead,
   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
   *  corresponding error.
   */
  decodeErrorResult(fragment, data) {
    if (typeof fragment === "string") {
      const f = this.getError(fragment);
      assertArgument(f, "unknown error", "fragment", fragment);
      fragment = f;
    }
    assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
    return this._decodeParams(fragment.inputs, dataSlice(data, 4));
  }
  /**
   *  Encodes the transaction revert data for a call result that
   *  reverted from the the Contract with the sepcified %%error%%
   *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
   *
   *  This is generally not used by most developers, unless trying to mock
   *  a result from a Contract.
   */
  encodeErrorResult(fragment, values) {
    if (typeof fragment === "string") {
      const f = this.getError(fragment);
      assertArgument(f, "unknown error", "fragment", fragment);
      fragment = f;
    }
    return concat([
      fragment.selector,
      this._encodeParams(fragment.inputs, values || [])
    ]);
  }
  /**
   *  Decodes the %%data%% from a transaction ``tx.data`` for
   *  the function specified (see [[getFunction]] for valid values
   *  for %%fragment%%).
   *
   *  Most developers should prefer the [[parseTransaction]] method
   *  instead, which will automatically detect the fragment.
   */
  decodeFunctionData(fragment, data) {
    if (typeof fragment === "string") {
      const f = this.getFunction(fragment);
      assertArgument(f, "unknown function", "fragment", fragment);
      fragment = f;
    }
    assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
    return this._decodeParams(fragment.inputs, dataSlice(data, 4));
  }
  /**
   *  Encodes the ``tx.data`` for a transaction that calls the function
   *  specified (see [[getFunction]] for valid values for %%fragment%%) with
   *  the %%values%%.
   */
  encodeFunctionData(fragment, values) {
    if (typeof fragment === "string") {
      const f = this.getFunction(fragment);
      assertArgument(f, "unknown function", "fragment", fragment);
      fragment = f;
    }
    return concat([
      fragment.selector,
      this._encodeParams(fragment.inputs, values || [])
    ]);
  }
  /**
   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
   *  specified function (see [[getFunction]] for valid values for
   *  %%key%%).
   *
   *  Most developers should prefer the [[parseCallResult]] method instead,
   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
   *  corresponding error.
   */
  decodeFunctionResult(fragment, data) {
    if (typeof fragment === "string") {
      const f = this.getFunction(fragment);
      assertArgument(f, "unknown function", "fragment", fragment);
      fragment = f;
    }
    let message2 = "invalid length for result data";
    const bytes4 = getBytesCopy(data);
    if (bytes4.length % 32 === 0) {
      try {
        return this.#abiCoder.decode(fragment.outputs, bytes4);
      } catch (error) {
        message2 = "could not decode result data";
      }
    }
    assert(false, message2, "BAD_DATA", {
      value: hexlify(bytes4),
      info: { method: fragment.name, signature: fragment.format() }
    });
  }
  makeError(_data2, tx) {
    const data = getBytes(_data2, "data");
    const error = AbiCoder.getBuiltinCallException("call", tx, data);
    const customPrefix = "execution reverted (unknown custom error)";
    if (error.message.startsWith(customPrefix)) {
      const selector = hexlify(data.slice(0, 4));
      const ef = this.getError(selector);
      if (ef) {
        try {
          const args = this.#abiCoder.decode(ef.inputs, data.slice(4));
          error.revert = {
            name: ef.name,
            signature: ef.format(),
            args
          };
          error.reason = error.revert.signature;
          error.message = `execution reverted: ${error.reason}`;
        } catch (e) {
          error.message = `execution reverted (coult not decode custom error)`;
        }
      }
    }
    const parsed = this.parseTransaction(tx);
    if (parsed) {
      error.invocation = {
        method: parsed.name,
        signature: parsed.signature,
        args: parsed.args
      };
    }
    return error;
  }
  /**
   *  Encodes the result data (e.g. from an ``eth_call``) for the
   *  specified function (see [[getFunction]] for valid values
   *  for %%fragment%%) with %%values%%.
   *
   *  This is generally not used by most developers, unless trying to mock
   *  a result from a Contract.
   */
  encodeFunctionResult(fragment, values) {
    if (typeof fragment === "string") {
      const f = this.getFunction(fragment);
      assertArgument(f, "unknown function", "fragment", fragment);
      fragment = f;
    }
    return hexlify(this.#abiCoder.encode(fragment.outputs, values || []));
  }
  /*
      spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
          const promises: Array<Promise<>> = [ ];
          const process = function(type: ParamType, value: any): any {
              if (type.baseType === "array") {
                  return descend(type.child
              }
              if (type. === "address") {
              }
          };
  
          const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
              if (inputs.length !== values.length) { throw new Error("length mismatch"); }
              
          };
  
          const result: Array<any> = [ ];
          values.forEach((value, index) => {
              if (value == null) {
                  topics.push(null);
              } else if (param.baseType === "array" || param.baseType === "tuple") {
                  logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
              } else if (Array.isArray(value)) {
                  topics.push(value.map((value) => encodeTopic(param, value)));
              } else {
                  topics.push(encodeTopic(param, value));
              }
          });
      }
  */
  // Create the filter for the event with search criteria (e.g. for eth_filterLog)
  encodeFilterTopics(fragment, values) {
    if (typeof fragment === "string") {
      const f = this.getEvent(fragment);
      assertArgument(f, "unknown event", "eventFragment", fragment);
      fragment = f;
    }
    assert(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", { count: values.length, expectedCount: fragment.inputs.length });
    const topics = [];
    if (!fragment.anonymous) {
      topics.push(fragment.topicHash);
    }
    const encodeTopic = (param, value) => {
      if (param.type === "string") {
        return id(value);
      } else if (param.type === "bytes") {
        return keccak256(hexlify(value));
      }
      if (param.type === "bool" && typeof value === "boolean") {
        value = value ? "0x01" : "0x00";
      } else if (param.type.match(/^u?int/)) {
        value = toBeHex(value);
      } else if (param.type.match(/^bytes/)) {
        value = zeroPadBytes(value, 32);
      } else if (param.type === "address") {
        this.#abiCoder.encode(["address"], [value]);
      }
      return zeroPadValue(hexlify(value), 32);
    };
    values.forEach((value, index) => {
      const param = fragment.inputs[index];
      if (!param.indexed) {
        assertArgument(value == null, "cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
        return;
      }
      if (value == null) {
        topics.push(null);
      } else if (param.baseType === "array" || param.baseType === "tuple") {
        assertArgument(false, "filtering with tuples or arrays not supported", "contract." + param.name, value);
      } else if (Array.isArray(value)) {
        topics.push(value.map((value2) => encodeTopic(param, value2)));
      } else {
        topics.push(encodeTopic(param, value));
      }
    });
    while (topics.length && topics[topics.length - 1] === null) {
      topics.pop();
    }
    return topics;
  }
  encodeEventLog(fragment, values) {
    if (typeof fragment === "string") {
      const f = this.getEvent(fragment);
      assertArgument(f, "unknown event", "eventFragment", fragment);
      fragment = f;
    }
    const topics = [];
    const dataTypes = [];
    const dataValues = [];
    if (!fragment.anonymous) {
      topics.push(fragment.topicHash);
    }
    assertArgument(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
    fragment.inputs.forEach((param, index) => {
      const value = values[index];
      if (param.indexed) {
        if (param.type === "string") {
          topics.push(id(value));
        } else if (param.type === "bytes") {
          topics.push(keccak256(value));
        } else if (param.baseType === "tuple" || param.baseType === "array") {
          throw new Error("not implemented");
        } else {
          topics.push(this.#abiCoder.encode([param.type], [value]));
        }
      } else {
        dataTypes.push(param);
        dataValues.push(value);
      }
    });
    return {
      data: this.#abiCoder.encode(dataTypes, dataValues),
      topics
    };
  }
  // Decode a filter for the event and the search criteria
  decodeEventLog(fragment, data, topics) {
    if (typeof fragment === "string") {
      const f = this.getEvent(fragment);
      assertArgument(f, "unknown event", "eventFragment", fragment);
      fragment = f;
    }
    if (topics != null && !fragment.anonymous) {
      const eventTopic = fragment.topicHash;
      assertArgument(isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
      topics = topics.slice(1);
    }
    const indexed = [];
    const nonIndexed = [];
    const dynamic = [];
    fragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
          indexed.push(ParamType.from({ type: "bytes32", name: param.name }));
          dynamic.push(true);
        } else {
          indexed.push(param);
          dynamic.push(false);
        }
      } else {
        nonIndexed.push(param);
        dynamic.push(false);
      }
    });
    const resultIndexed = topics != null ? this.#abiCoder.decode(indexed, concat(topics)) : null;
    const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);
    const values = [];
    const keys = [];
    let nonIndexedIndex = 0, indexedIndex = 0;
    fragment.inputs.forEach((param, index) => {
      let value = null;
      if (param.indexed) {
        if (resultIndexed == null) {
          value = new Indexed(null);
        } else if (dynamic[index]) {
          value = new Indexed(resultIndexed[indexedIndex++]);
        } else {
          try {
            value = resultIndexed[indexedIndex++];
          } catch (error) {
            value = error;
          }
        }
      } else {
        try {
          value = resultNonIndexed[nonIndexedIndex++];
        } catch (error) {
          value = error;
        }
      }
      values.push(value);
      keys.push(param.name || null);
    });
    return Result.fromItems(values, keys);
  }
  /**
   *  Parses a transaction, finding the matching function and extracts
   *  the parameter values along with other useful function details.
   *
   *  If the matching function cannot be found, return null.
   */
  parseTransaction(tx) {
    const data = getBytes(tx.data, "tx.data");
    const value = getBigInt(tx.value != null ? tx.value : 0, "tx.value");
    const fragment = this.getFunction(hexlify(data.slice(0, 4)));
    if (!fragment) {
      return null;
    }
    const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));
    return new TransactionDescription(fragment, fragment.selector, args, value);
  }
  parseCallResult(data) {
    throw new Error("@TODO");
  }
  /**
   *  Parses a receipt log, finding the matching event and extracts
   *  the parameter values along with other useful event details.
   *
   *  If the matching event cannot be found, returns null.
   */
  parseLog(log) {
    const fragment = this.getEvent(log.topics[0]);
    if (!fragment || fragment.anonymous) {
      return null;
    }
    return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
  }
  /**
   *  Parses a revert data, finding the matching error and extracts
   *  the parameter values along with other useful error details.
   *
   *  If the matching error cannot be found, returns null.
   */
  parseError(data) {
    const hexData = hexlify(data);
    const fragment = this.getError(dataSlice(hexData, 0, 4));
    if (!fragment) {
      return null;
    }
    const args = this.#abiCoder.decode(fragment.inputs, dataSlice(hexData, 4));
    return new ErrorDescription(fragment, fragment.selector, args);
  }
  /**
   *  Creates a new [[Interface]] from the ABI %%value%%.
   *
   *  The %%value%% may be provided as an existing [[Interface]] object,
   *  a JSON-encoded ABI or any Human-Readable ABI format.
   */
  static from(value) {
    if (value instanceof _Interface) {
      return value;
    }
    if (typeof value === "string") {
      return new _Interface(JSON.parse(value));
    }
    if (typeof value.formatJson === "function") {
      return new _Interface(value.formatJson());
    }
    if (typeof value.format === "function") {
      return new _Interface(value.format("json"));
    }
    return new _Interface(value);
  }
};

// ../../node_modules/ethers/lib.esm/providers/provider.js
var BN_04 = BigInt(0);
function toJson(value) {
  if (value == null) {
    return null;
  }
  return value.toString();
}
function copyRequest(req) {
  const result = {};
  if (req.to) {
    result.to = req.to;
  }
  if (req.from) {
    result.from = req.from;
  }
  if (req.data) {
    result.data = hexlify(req.data);
  }
  const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
  for (const key of bigIntKeys) {
    if (!(key in req) || req[key] == null) {
      continue;
    }
    result[key] = getBigInt(req[key], `request.${key}`);
  }
  const numberKeys = "type,nonce".split(/,/);
  for (const key of numberKeys) {
    if (!(key in req) || req[key] == null) {
      continue;
    }
    result[key] = getNumber(req[key], `request.${key}`);
  }
  if (req.accessList) {
    result.accessList = accessListify(req.accessList);
  }
  if ("blockTag" in req) {
    result.blockTag = req.blockTag;
  }
  if ("enableCcipRead" in req) {
    result.enableCcipRead = !!req.enableCcipRead;
  }
  if ("customData" in req) {
    result.customData = req.customData;
  }
  if ("blobVersionedHashes" in req && req.blobVersionedHashes) {
    result.blobVersionedHashes = req.blobVersionedHashes.slice();
  }
  if ("kzg" in req) {
    result.kzg = req.kzg;
  }
  if ("blobs" in req && req.blobs) {
    result.blobs = req.blobs.map((b2) => {
      if (isBytesLike(b2)) {
        return hexlify(b2);
      }
      return Object.assign({}, b2);
    });
  }
  return result;
}
var Log = class {
  /**
   *  The provider connected to the log used to fetch additional details
   *  if necessary.
   */
  provider;
  /**
   *  The transaction hash of the transaction this log occurred in. Use the
   *  [[Log-getTransaction]] to get the [[TransactionResponse]].
   */
  transactionHash;
  /**
   *  The block hash of the block this log occurred in. Use the
   *  [[Log-getBlock]] to get the [[Block]].
   */
  blockHash;
  /**
   *  The block number of the block this log occurred in. It is preferred
   *  to use the [[Block-hash]] when fetching the related [[Block]],
   *  since in the case of an orphaned block, the block at that height may
   *  have changed.
   */
  blockNumber;
  /**
   *  If the **Log** represents a block that was removed due to an orphaned
   *  block, this will be true.
   *
   *  This can only happen within an orphan event listener.
   */
  removed;
  /**
   *  The address of the contract that emitted this log.
   */
  address;
  /**
   *  The data included in this log when it was emitted.
   */
  data;
  /**
   *  The indexed topics included in this log when it was emitted.
   *
   *  All topics are included in the bloom filters, so they can be
   *  efficiently filtered using the [[Provider-getLogs]] method.
   */
  topics;
  /**
   *  The index within the block this log occurred at. This is generally
   *  not useful to developers, but can be used with the various roots
   *  to proof inclusion within a block.
   */
  index;
  /**
   *  The index within the transaction of this log.
   */
  transactionIndex;
  /**
   *  @_ignore:
   */
  constructor(log, provider) {
    this.provider = provider;
    const topics = Object.freeze(log.topics.slice());
    defineProperties(this, {
      transactionHash: log.transactionHash,
      blockHash: log.blockHash,
      blockNumber: log.blockNumber,
      removed: log.removed,
      address: log.address,
      data: log.data,
      topics,
      index: log.index,
      transactionIndex: log.transactionIndex
    });
  }
  /**
   *  Returns a JSON-compatible object.
   */
  toJSON() {
    const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;
    return {
      _type: "log",
      address,
      blockHash,
      blockNumber,
      data,
      index,
      removed,
      topics,
      transactionHash,
      transactionIndex
    };
  }
  /**
   *  Returns the block that this log occurred in.
   */
  async getBlock() {
    const block = await this.provider.getBlock(this.blockHash);
    assert(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
    return block;
  }
  /**
   *  Returns the transaction that this log occurred in.
   */
  async getTransaction() {
    const tx = await this.provider.getTransaction(this.transactionHash);
    assert(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
    return tx;
  }
  /**
   *  Returns the transaction receipt fot the transaction that this
   *  log occurred in.
   */
  async getTransactionReceipt() {
    const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
    assert(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
    return receipt;
  }
  /**
   *  @_ignore:
   */
  removedEvent() {
    return createRemovedLogFilter(this);
  }
};
var TransactionReceipt = class {
  /**
   *  The provider connected to the log used to fetch additional details
   *  if necessary.
   */
  provider;
  /**
   *  The address the transaction was sent to.
   */
  to;
  /**
   *  The sender of the transaction.
   */
  from;
  /**
   *  The address of the contract if the transaction was directly
   *  responsible for deploying one.
   *
   *  This is non-null **only** if the ``to`` is empty and the ``data``
   *  was successfully executed as initcode.
   */
  contractAddress;
  /**
   *  The transaction hash.
   */
  hash;
  /**
   *  The index of this transaction within the block transactions.
   */
  index;
  /**
   *  The block hash of the [[Block]] this transaction was included in.
   */
  blockHash;
  /**
   *  The block number of the [[Block]] this transaction was included in.
   */
  blockNumber;
  /**
   *  The bloom filter bytes that represent all logs that occurred within
   *  this transaction. This is generally not useful for most developers,
   *  but can be used to validate the included logs.
   */
  logsBloom;
  /**
   *  The actual amount of gas used by this transaction.
   *
   *  When creating a transaction, the amount of gas that will be used can
   *  only be approximated, but the sender must pay the gas fee for the
   *  entire gas limit. After the transaction, the difference is refunded.
   */
  gasUsed;
  /**
   *  The gas used for BLObs. See [[link-eip-4844]].
   */
  blobGasUsed;
  /**
   *  The amount of gas used by all transactions within the block for this
   *  and all transactions with a lower ``index``.
   *
   *  This is generally not useful for developers but can be used to
   *  validate certain aspects of execution.
   */
  cumulativeGasUsed;
  /**
   *  The actual gas price used during execution.
   *
   *  Due to the complexity of [[link-eip-1559]] this value can only
   *  be caluclated after the transaction has been mined, snce the base
   *  fee is protocol-enforced.
   */
  gasPrice;
  /**
   *  The price paid per BLOB in gas. See [[link-eip-4844]].
   */
  blobGasPrice;
  /**
   *  The [[link-eip-2718]] transaction type.
   */
  type;
  //readonly byzantium!: boolean;
  /**
   *  The status of this transaction, indicating success (i.e. ``1``) or
   *  a revert (i.e. ``0``).
   *
   *  This is available in post-byzantium blocks, but some backends may
   *  backfill this value.
   */
  status;
  /**
   *  The root hash of this transaction.
   *
   *  This is no present and was only included in pre-byzantium blocks, but
   *  could be used to validate certain parts of the receipt.
   */
  root;
  #logs;
  /**
   *  @_ignore:
   */
  constructor(tx, provider) {
    this.#logs = Object.freeze(tx.logs.map((log) => {
      return new Log(log, provider);
    }));
    let gasPrice = BN_04;
    if (tx.effectiveGasPrice != null) {
      gasPrice = tx.effectiveGasPrice;
    } else if (tx.gasPrice != null) {
      gasPrice = tx.gasPrice;
    }
    defineProperties(this, {
      provider,
      to: tx.to,
      from: tx.from,
      contractAddress: tx.contractAddress,
      hash: tx.hash,
      index: tx.index,
      blockHash: tx.blockHash,
      blockNumber: tx.blockNumber,
      logsBloom: tx.logsBloom,
      gasUsed: tx.gasUsed,
      cumulativeGasUsed: tx.cumulativeGasUsed,
      blobGasUsed: tx.blobGasUsed,
      gasPrice,
      blobGasPrice: tx.blobGasPrice,
      type: tx.type,
      //byzantium: tx.byzantium,
      status: tx.status,
      root: tx.root
    });
  }
  /**
   *  The logs for this transaction.
   */
  get logs() {
    return this.#logs;
  }
  /**
   *  Returns a JSON-compatible representation.
   */
  toJSON() {
    const {
      to,
      from,
      contractAddress,
      hash,
      index,
      blockHash,
      blockNumber,
      logsBloom,
      logs,
      //byzantium, 
      status,
      root
    } = this;
    return {
      _type: "TransactionReceipt",
      blockHash,
      blockNumber,
      //byzantium, 
      contractAddress,
      cumulativeGasUsed: toJson(this.cumulativeGasUsed),
      from,
      gasPrice: toJson(this.gasPrice),
      blobGasUsed: toJson(this.blobGasUsed),
      blobGasPrice: toJson(this.blobGasPrice),
      gasUsed: toJson(this.gasUsed),
      hash,
      index,
      logs,
      logsBloom,
      root,
      status,
      to
    };
  }
  /**
   *  @_ignore:
   */
  get length() {
    return this.logs.length;
  }
  [Symbol.iterator]() {
    let index = 0;
    return {
      next: () => {
        if (index < this.length) {
          return { value: this.logs[index++], done: false };
        }
        return { value: void 0, done: true };
      }
    };
  }
  /**
   *  The total fee for this transaction, in wei.
   */
  get fee() {
    return this.gasUsed * this.gasPrice;
  }
  /**
   *  Resolves to the block this transaction occurred in.
   */
  async getBlock() {
    const block = await this.provider.getBlock(this.blockHash);
    if (block == null) {
      throw new Error("TODO");
    }
    return block;
  }
  /**
   *  Resolves to the transaction this transaction occurred in.
   */
  async getTransaction() {
    const tx = await this.provider.getTransaction(this.hash);
    if (tx == null) {
      throw new Error("TODO");
    }
    return tx;
  }
  /**
   *  Resolves to the return value of the execution of this transaction.
   *
   *  Support for this feature is limited, as it requires an archive node
   *  with the ``debug_`` or ``trace_`` API enabled.
   */
  async getResult() {
    return await this.provider.getTransactionResult(this.hash);
  }
  /**
   *  Resolves to the number of confirmations this transaction has.
   */
  async confirmations() {
    return await this.provider.getBlockNumber() - this.blockNumber + 1;
  }
  /**
   *  @_ignore:
   */
  removedEvent() {
    return createRemovedTransactionFilter(this);
  }
  /**
   *  @_ignore:
   */
  reorderedEvent(other) {
    assert(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" });
    return createReorderedTransactionFilter(this, other);
  }
};
var TransactionResponse = class _TransactionResponse {
  /**
   *  The provider this is connected to, which will influence how its
   *  methods will resolve its async inspection methods.
   */
  provider;
  /**
   *  The block number of the block that this transaction was included in.
   *
   *  This is ``null`` for pending transactions.
   */
  blockNumber;
  /**
   *  The blockHash of the block that this transaction was included in.
   *
   *  This is ``null`` for pending transactions.
   */
  blockHash;
  /**
   *  The index within the block that this transaction resides at.
   */
  index;
  /**
   *  The transaction hash.
   */
  hash;
  /**
   *  The [[link-eip-2718]] transaction envelope type. This is
   *  ``0`` for legacy transactions types.
   */
  type;
  /**
   *  The receiver of this transaction.
   *
   *  If ``null``, then the transaction is an initcode transaction.
   *  This means the result of executing the [[data]] will be deployed
   *  as a new contract on chain (assuming it does not revert) and the
   *  address may be computed using [[getCreateAddress]].
   */
  to;
  /**
   *  The sender of this transaction. It is implicitly computed
   *  from the transaction pre-image hash (as the digest) and the
   *  [[signature]] using ecrecover.
   */
  from;
  /**
   *  The nonce, which is used to prevent replay attacks and offer
   *  a method to ensure transactions from a given sender are explicitly
   *  ordered.
   *
   *  When sending a transaction, this must be equal to the number of
   *  transactions ever sent by [[from]].
   */
  nonce;
  /**
   *  The maximum units of gas this transaction can consume. If execution
   *  exceeds this, the entries transaction is reverted and the sender
   *  is charged for the full amount, despite not state changes being made.
   */
  gasLimit;
  /**
   *  The gas price can have various values, depending on the network.
   *
   *  In modern networks, for transactions that are included this is
   *  the //effective gas price// (the fee per gas that was actually
   *  charged), while for transactions that have not been included yet
   *  is the [[maxFeePerGas]].
   *
   *  For legacy transactions, or transactions on legacy networks, this
   *  is the fee that will be charged per unit of gas the transaction
   *  consumes.
   */
  gasPrice;
  /**
   *  The maximum priority fee (per unit of gas) to allow a
   *  validator to charge the sender. This is inclusive of the
   *  [[maxFeeFeePerGas]].
   */
  maxPriorityFeePerGas;
  /**
   *  The maximum fee (per unit of gas) to allow this transaction
   *  to charge the sender.
   */
  maxFeePerGas;
  /**
   *  The [[link-eip-4844]] max fee per BLOb gas.
   */
  maxFeePerBlobGas;
  /**
   *  The data.
   */
  data;
  /**
   *  The value, in wei. Use [[formatEther]] to format this value
   *  as ether.
   */
  value;
  /**
   *  The chain ID.
   */
  chainId;
  /**
   *  The signature.
   */
  signature;
  /**
   *  The [[link-eip-2930]] access list for transaction types that
   *  support it, otherwise ``null``.
   */
  accessList;
  /**
   *  The [[link-eip-4844]] BLOb versioned hashes.
   */
  blobVersionedHashes;
  #startBlock;
  /**
   *  @_ignore:
   */
  constructor(tx, provider) {
    this.provider = provider;
    this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;
    this.blockHash = tx.blockHash != null ? tx.blockHash : null;
    this.hash = tx.hash;
    this.index = tx.index;
    this.type = tx.type;
    this.from = tx.from;
    this.to = tx.to || null;
    this.gasLimit = tx.gasLimit;
    this.nonce = tx.nonce;
    this.data = tx.data;
    this.value = tx.value;
    this.gasPrice = tx.gasPrice;
    this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;
    this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;
    this.maxFeePerBlobGas = tx.maxFeePerBlobGas != null ? tx.maxFeePerBlobGas : null;
    this.chainId = tx.chainId;
    this.signature = tx.signature;
    this.accessList = tx.accessList != null ? tx.accessList : null;
    this.blobVersionedHashes = tx.blobVersionedHashes != null ? tx.blobVersionedHashes : null;
    this.#startBlock = -1;
  }
  /**
   *  Returns a JSON-compatible representation of this transaction.
   */
  toJSON() {
    const { blockNumber, blockHash, index, hash, type, to, from, nonce, data, signature, accessList, blobVersionedHashes } = this;
    return {
      _type: "TransactionResponse",
      accessList,
      blockNumber,
      blockHash,
      blobVersionedHashes,
      chainId: toJson(this.chainId),
      data,
      from,
      gasLimit: toJson(this.gasLimit),
      gasPrice: toJson(this.gasPrice),
      hash,
      maxFeePerGas: toJson(this.maxFeePerGas),
      maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),
      maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),
      nonce,
      signature,
      to,
      index,
      type,
      value: toJson(this.value)
    };
  }
  /**
   *  Resolves to the Block that this transaction was included in.
   *
   *  This will return null if the transaction has not been included yet.
   */
  async getBlock() {
    let blockNumber = this.blockNumber;
    if (blockNumber == null) {
      const tx = await this.getTransaction();
      if (tx) {
        blockNumber = tx.blockNumber;
      }
    }
    if (blockNumber == null) {
      return null;
    }
    const block = this.provider.getBlock(blockNumber);
    if (block == null) {
      throw new Error("TODO");
    }
    return block;
  }
  /**
   *  Resolves to this transaction being re-requested from the
   *  provider. This can be used if you have an unmined transaction
   *  and wish to get an up-to-date populated instance.
   */
  async getTransaction() {
    return this.provider.getTransaction(this.hash);
  }
  /**
   *  Resolve to the number of confirmations this transaction has.
   */
  async confirmations() {
    if (this.blockNumber == null) {
      const { tx, blockNumber: blockNumber2 } = await resolveProperties({
        tx: this.getTransaction(),
        blockNumber: this.provider.getBlockNumber()
      });
      if (tx == null || tx.blockNumber == null) {
        return 0;
      }
      return blockNumber2 - tx.blockNumber + 1;
    }
    const blockNumber = await this.provider.getBlockNumber();
    return blockNumber - this.blockNumber + 1;
  }
  /**
   *  Resolves once this transaction has been mined and has
   *  %%confirms%% blocks including it (default: ``1``) with an
   *  optional %%timeout%%.
   *
   *  This can resolve to ``null`` only if %%confirms%% is ``0``
   *  and the transaction has not been mined, otherwise this will
   *  wait until enough confirmations have completed.
   */
  async wait(_confirms, _timeout) {
    const confirms = _confirms == null ? 1 : _confirms;
    const timeout = _timeout == null ? 0 : _timeout;
    let startBlock = this.#startBlock;
    let nextScan = -1;
    let stopScanning = startBlock === -1 ? true : false;
    const checkReplacement = async () => {
      if (stopScanning) {
        return null;
      }
      const { blockNumber, nonce } = await resolveProperties({
        blockNumber: this.provider.getBlockNumber(),
        nonce: this.provider.getTransactionCount(this.from)
      });
      if (nonce < this.nonce) {
        startBlock = blockNumber;
        return;
      }
      if (stopScanning) {
        return null;
      }
      const mined = await this.getTransaction();
      if (mined && mined.blockNumber != null) {
        return;
      }
      if (nextScan === -1) {
        nextScan = startBlock - 3;
        if (nextScan < this.#startBlock) {
          nextScan = this.#startBlock;
        }
      }
      while (nextScan <= blockNumber) {
        if (stopScanning) {
          return null;
        }
        const block = await this.provider.getBlock(nextScan, true);
        if (block == null) {
          return;
        }
        for (const hash of block) {
          if (hash === this.hash) {
            return;
          }
        }
        for (let i = 0; i < block.length; i++) {
          const tx = await block.getTransaction(i);
          if (tx.from === this.from && tx.nonce === this.nonce) {
            if (stopScanning) {
              return null;
            }
            const receipt2 = await this.provider.getTransactionReceipt(tx.hash);
            if (receipt2 == null) {
              return;
            }
            if (blockNumber - receipt2.blockNumber + 1 < confirms) {
              return;
            }
            let reason = "replaced";
            if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {
              reason = "repriced";
            } else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_04) {
              reason = "cancelled";
            }
            assert(false, "transaction was replaced", "TRANSACTION_REPLACED", {
              cancelled: reason === "replaced" || reason === "cancelled",
              reason,
              replacement: tx.replaceableTransaction(startBlock),
              hash: tx.hash,
              receipt: receipt2
            });
          }
        }
        nextScan++;
      }
      return;
    };
    const checkReceipt = (receipt2) => {
      if (receipt2 == null || receipt2.status !== 0) {
        return receipt2;
      }
      assert(false, "transaction execution reverted", "CALL_EXCEPTION", {
        action: "sendTransaction",
        data: null,
        reason: null,
        invocation: null,
        revert: null,
        transaction: {
          to: receipt2.to,
          from: receipt2.from,
          data: ""
          // @TODO: in v7, split out sendTransaction properties
        },
        receipt: receipt2
      });
    };
    const receipt = await this.provider.getTransactionReceipt(this.hash);
    if (confirms === 0) {
      return checkReceipt(receipt);
    }
    if (receipt) {
      if (await receipt.confirmations() >= confirms) {
        return checkReceipt(receipt);
      }
    } else {
      await checkReplacement();
      if (confirms === 0) {
        return null;
      }
    }
    const waiter = new Promise((resolve, reject) => {
      const cancellers = [];
      const cancel = () => {
        cancellers.forEach((c) => c());
      };
      cancellers.push(() => {
        stopScanning = true;
      });
      if (timeout > 0) {
        const timer = setTimeout(() => {
          cancel();
          reject(makeError("wait for transaction timeout", "TIMEOUT"));
        }, timeout);
        cancellers.push(() => {
          clearTimeout(timer);
        });
      }
      const txListener = async (receipt2) => {
        if (await receipt2.confirmations() >= confirms) {
          cancel();
          try {
            resolve(checkReceipt(receipt2));
          } catch (error) {
            reject(error);
          }
        }
      };
      cancellers.push(() => {
        this.provider.off(this.hash, txListener);
      });
      this.provider.on(this.hash, txListener);
      if (startBlock >= 0) {
        const replaceListener = async () => {
          try {
            await checkReplacement();
          } catch (error) {
            if (isError(error, "TRANSACTION_REPLACED")) {
              cancel();
              reject(error);
              return;
            }
          }
          if (!stopScanning) {
            this.provider.once("block", replaceListener);
          }
        };
        cancellers.push(() => {
          this.provider.off("block", replaceListener);
        });
        this.provider.once("block", replaceListener);
      }
    });
    return await waiter;
  }
  /**
   *  Returns ``true`` if this transaction has been included.
   *
   *  This is effective only as of the time the TransactionResponse
   *  was instantiated. To get up-to-date information, use
   *  [[getTransaction]].
   *
   *  This provides a Type Guard that this transaction will have
   *  non-null property values for properties that are null for
   *  unmined transactions.
   */
  isMined() {
    return this.blockHash != null;
  }
  /**
   *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
   *  transaction.
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isLegacy() {
    return this.type === 0;
  }
  /**
   *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
   *  transaction. See [[link-eip-2070]].
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isBerlin() {
    return this.type === 1;
  }
  /**
   *  Returns true if the transaction is a London (i.e. ``type == 2``)
   *  transaction. See [[link-eip-1559]].
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isLondon() {
    return this.type === 2;
  }
  /**
   *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)
   *  transaction. See [[link-eip-4844]].
   */
  isCancun() {
    return this.type === 3;
  }
  /**
   *  Returns a filter which can be used to listen for orphan events
   *  that evict this transaction.
   */
  removedEvent() {
    assert(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    return createRemovedTransactionFilter(this);
  }
  /**
   *  Returns a filter which can be used to listen for orphan events
   *  that re-order this event against %%other%%.
   */
  reorderedEvent(other) {
    assert(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    assert(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    return createReorderedTransactionFilter(this, other);
  }
  /**
   *  Returns a new TransactionResponse instance which has the ability to
   *  detect (and throw an error) if the transaction is replaced, which
   *  will begin scanning at %%startBlock%%.
   *
   *  This should generally not be used by developers and is intended
   *  primarily for internal use. Setting an incorrect %%startBlock%% can
   *  have devastating performance consequences if used incorrectly.
   */
  replaceableTransaction(startBlock) {
    assertArgument(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
    const tx = new _TransactionResponse(this, this.provider);
    tx.#startBlock = startBlock;
    return tx;
  }
};
function createReorderedTransactionFilter(tx, other) {
  return { orphan: "reorder-transaction", tx, other };
}
function createRemovedTransactionFilter(tx) {
  return { orphan: "drop-transaction", tx };
}
function createRemovedLogFilter(log) {
  return { orphan: "drop-log", log: {
    transactionHash: log.transactionHash,
    blockHash: log.blockHash,
    blockNumber: log.blockNumber,
    address: log.address,
    data: log.data,
    topics: Object.freeze(log.topics.slice()),
    index: log.index
  } };
}

// ../../node_modules/ethers/lib.esm/contract/wrappers.js
var EventLog = class extends Log {
  /**
   *  The Contract Interface.
   */
  interface;
  /**
   *  The matching event.
   */
  fragment;
  /**
   *  The parsed arguments passed to the event by ``emit``.
   */
  args;
  /**
   * @_ignore:
   */
  constructor(log, iface, fragment) {
    super(log, log.provider);
    const args = iface.decodeEventLog(fragment, log.data, log.topics);
    defineProperties(this, { args, fragment, interface: iface });
  }
  /**
   *  The name of the event.
   */
  get eventName() {
    return this.fragment.name;
  }
  /**
   *  The signature of the event.
   */
  get eventSignature() {
    return this.fragment.format();
  }
};
var UndecodedEventLog = class extends Log {
  /**
   *  The error encounted when trying to decode the log.
   */
  error;
  /**
   * @_ignore:
   */
  constructor(log, error) {
    super(log, log.provider);
    defineProperties(this, { error });
  }
};
var ContractTransactionReceipt = class extends TransactionReceipt {
  #iface;
  /**
   *  @_ignore:
   */
  constructor(iface, provider, tx) {
    super(tx, provider);
    this.#iface = iface;
  }
  /**
   *  The parsed logs for any [[Log]] which has a matching event in the
   *  Contract ABI.
   */
  get logs() {
    return super.logs.map((log) => {
      const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;
      if (fragment) {
        try {
          return new EventLog(log, this.#iface, fragment);
        } catch (error) {
          return new UndecodedEventLog(log, error);
        }
      }
      return log;
    });
  }
};
var ContractTransactionResponse = class extends TransactionResponse {
  #iface;
  /**
   *  @_ignore:
   */
  constructor(iface, provider, tx) {
    super(tx, provider);
    this.#iface = iface;
  }
  /**
   *  Resolves once this transaction has been mined and has
   *  %%confirms%% blocks including it (default: ``1``) with an
   *  optional %%timeout%%.
   *
   *  This can resolve to ``null`` only if %%confirms%% is ``0``
   *  and the transaction has not been mined, otherwise this will
   *  wait until enough confirmations have completed.
   */
  async wait(confirms, timeout) {
    const receipt = await super.wait(confirms, timeout);
    if (receipt == null) {
      return null;
    }
    return new ContractTransactionReceipt(this.#iface, this.provider, receipt);
  }
};
var ContractUnknownEventPayload = class extends EventPayload {
  /**
   *  The log with no matching events.
   */
  log;
  /**
   *  @_event:
   */
  constructor(contract, listener, filter, log) {
    super(contract, listener, filter);
    defineProperties(this, { log });
  }
  /**
   *  Resolves to the block the event occured in.
   */
  async getBlock() {
    return await this.log.getBlock();
  }
  /**
   *  Resolves to the transaction the event occured in.
   */
  async getTransaction() {
    return await this.log.getTransaction();
  }
  /**
   *  Resolves to the transaction receipt the event occured in.
   */
  async getTransactionReceipt() {
    return await this.log.getTransactionReceipt();
  }
};
var ContractEventPayload = class extends ContractUnknownEventPayload {
  /**
   *  @_ignore:
   */
  constructor(contract, listener, filter, fragment, _log) {
    super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));
    const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
    defineProperties(this, { args, fragment });
  }
  /**
   *  The event name.
   */
  get eventName() {
    return this.fragment.name;
  }
  /**
   *  The event signature.
   */
  get eventSignature() {
    return this.fragment.format();
  }
};

// ../../node_modules/ethers/lib.esm/contract/contract.js
var BN_05 = BigInt(0);
function canCall(value) {
  return value && typeof value.call === "function";
}
function canEstimate(value) {
  return value && typeof value.estimateGas === "function";
}
function canResolve(value) {
  return value && typeof value.resolveName === "function";
}
function canSend(value) {
  return value && typeof value.sendTransaction === "function";
}
function getResolver(value) {
  if (value != null) {
    if (canResolve(value)) {
      return value;
    }
    if (value.provider) {
      return value.provider;
    }
  }
  return void 0;
}
var PreparedTopicFilter = class {
  #filter;
  fragment;
  constructor(contract, fragment, args) {
    defineProperties(this, { fragment });
    if (fragment.inputs.length < args.length) {
      throw new Error("too many arguments");
    }
    const runner = getRunner(contract.runner, "resolveName");
    const resolver = canResolve(runner) ? runner : null;
    this.#filter = async function() {
      const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {
        const arg = args[index];
        if (arg == null) {
          return null;
        }
        return param.walkAsync(args[index], (type, value) => {
          if (type === "address") {
            if (Array.isArray(value)) {
              return Promise.all(value.map((v) => resolveAddress(v, resolver)));
            }
            return resolveAddress(value, resolver);
          }
          return value;
        });
      }));
      return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
    }();
  }
  getTopicFilter() {
    return this.#filter;
  }
};
function getRunner(value, feature) {
  if (value == null) {
    return null;
  }
  if (typeof value[feature] === "function") {
    return value;
  }
  if (value.provider && typeof value.provider[feature] === "function") {
    return value.provider;
  }
  return null;
}
function getProvider(value) {
  if (value == null) {
    return null;
  }
  return value.provider || null;
}
async function copyOverrides(arg, allowed) {
  const _overrides = Typed.dereference(arg, "overrides");
  assertArgument(typeof _overrides === "object", "invalid overrides parameter", "overrides", arg);
  const overrides = copyRequest(_overrides);
  assertArgument(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
  assertArgument(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
  if (overrides.from) {
    overrides.from = overrides.from;
  }
  return overrides;
}
async function resolveArgs(_runner, inputs, args) {
  const runner = getRunner(_runner, "resolveName");
  const resolver = canResolve(runner) ? runner : null;
  return await Promise.all(inputs.map((param, index) => {
    return param.walkAsync(args[index], (type, value) => {
      value = Typed.dereference(value, type);
      if (type === "address") {
        return resolveAddress(value, resolver);
      }
      return value;
    });
  }));
}
function buildWrappedFallback(contract) {
  const populateTransaction = async function(overrides) {
    const tx = await copyOverrides(overrides, ["data"]);
    tx.to = await contract.getAddress();
    if (tx.from) {
      tx.from = await resolveAddress(tx.from, getResolver(contract.runner));
    }
    const iface = contract.interface;
    const noValue = getBigInt(tx.value || BN_05, "overrides.value") === BN_05;
    const noData = (tx.data || "0x") === "0x";
    if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {
      assertArgument(false, "cannot send data to receive or send value to non-payable fallback", "overrides", overrides);
    }
    assertArgument(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
    const payable = iface.receive || iface.fallback && iface.fallback.payable;
    assertArgument(payable || noValue, "cannot send value to non-payable fallback", "overrides.value", tx.value);
    assertArgument(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
    return tx;
  };
  const staticCall = async function(overrides) {
    const runner = getRunner(contract.runner, "call");
    assert(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const tx = await populateTransaction(overrides);
    try {
      return await runner.call(tx);
    } catch (error) {
      if (isCallException(error) && error.data) {
        throw contract.interface.makeError(error.data, tx);
      }
      throw error;
    }
  };
  const send = async function(overrides) {
    const runner = contract.runner;
    assert(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const tx = await runner.sendTransaction(await populateTransaction(overrides));
    const provider = getProvider(contract.runner);
    return new ContractTransactionResponse(contract.interface, provider, tx);
  };
  const estimateGas = async function(overrides) {
    const runner = getRunner(contract.runner, "estimateGas");
    assert(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
    return await runner.estimateGas(await populateTransaction(overrides));
  };
  const method = async (overrides) => {
    return await send(overrides);
  };
  defineProperties(method, {
    _contract: contract,
    estimateGas,
    populateTransaction,
    send,
    staticCall
  });
  return method;
}
function buildWrappedMethod(contract, key) {
  const getFragment = function(...args) {
    const fragment = contract.interface.getFunction(key, args);
    assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key, args }
    });
    return fragment;
  };
  const populateTransaction = async function(...args) {
    const fragment = getFragment(...args);
    let overrides = {};
    if (fragment.inputs.length + 1 === args.length) {
      overrides = await copyOverrides(args.pop());
      if (overrides.from) {
        overrides.from = await resolveAddress(overrides.from, getResolver(contract.runner));
      }
    }
    if (fragment.inputs.length !== args.length) {
      throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
    }
    const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);
    return Object.assign({}, overrides, await resolveProperties({
      to: contract.getAddress(),
      data: contract.interface.encodeFunctionData(fragment, resolvedArgs)
    }));
  };
  const staticCall = async function(...args) {
    const result = await staticCallResult(...args);
    if (result.length === 1) {
      return result[0];
    }
    return result;
  };
  const send = async function(...args) {
    const runner = contract.runner;
    assert(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const tx = await runner.sendTransaction(await populateTransaction(...args));
    const provider = getProvider(contract.runner);
    return new ContractTransactionResponse(contract.interface, provider, tx);
  };
  const estimateGas = async function(...args) {
    const runner = getRunner(contract.runner, "estimateGas");
    assert(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
    return await runner.estimateGas(await populateTransaction(...args));
  };
  const staticCallResult = async function(...args) {
    const runner = getRunner(contract.runner, "call");
    assert(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const tx = await populateTransaction(...args);
    let result = "0x";
    try {
      result = await runner.call(tx);
    } catch (error) {
      if (isCallException(error) && error.data) {
        throw contract.interface.makeError(error.data, tx);
      }
      throw error;
    }
    const fragment = getFragment(...args);
    return contract.interface.decodeFunctionResult(fragment, result);
  };
  const method = async (...args) => {
    const fragment = getFragment(...args);
    if (fragment.constant) {
      return await staticCall(...args);
    }
    return await send(...args);
  };
  defineProperties(method, {
    name: contract.interface.getFunctionName(key),
    _contract: contract,
    _key: key,
    getFragment,
    estimateGas,
    populateTransaction,
    send,
    staticCall,
    staticCallResult
  });
  Object.defineProperty(method, "fragment", {
    configurable: false,
    enumerable: true,
    get: () => {
      const fragment = contract.interface.getFunction(key);
      assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key }
      });
      return fragment;
    }
  });
  return method;
}
function buildWrappedEvent(contract, key) {
  const getFragment = function(...args) {
    const fragment = contract.interface.getEvent(key, args);
    assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key, args }
    });
    return fragment;
  };
  const method = function(...args) {
    return new PreparedTopicFilter(contract, getFragment(...args), args);
  };
  defineProperties(method, {
    name: contract.interface.getEventName(key),
    _contract: contract,
    _key: key,
    getFragment
  });
  Object.defineProperty(method, "fragment", {
    configurable: false,
    enumerable: true,
    get: () => {
      const fragment = contract.interface.getEvent(key);
      assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key }
      });
      return fragment;
    }
  });
  return method;
}
var internal2 = Symbol.for("_ethersInternal_contract");
var internalValues = /* @__PURE__ */ new WeakMap();
function setInternal(contract, values) {
  internalValues.set(contract[internal2], values);
}
function getInternal(contract) {
  return internalValues.get(contract[internal2]);
}
function isDeferred(value) {
  return value && typeof value === "object" && "getTopicFilter" in value && typeof value.getTopicFilter === "function" && value.fragment;
}
async function getSubInfo(contract, event4) {
  let topics;
  let fragment = null;
  if (Array.isArray(event4)) {
    const topicHashify = function(name) {
      if (isHexString(name, 32)) {
        return name;
      }
      const fragment2 = contract.interface.getEvent(name);
      assertArgument(fragment2, "unknown fragment", "name", name);
      return fragment2.topicHash;
    };
    topics = event4.map((e) => {
      if (e == null) {
        return null;
      }
      if (Array.isArray(e)) {
        return e.map(topicHashify);
      }
      return topicHashify(e);
    });
  } else if (event4 === "*") {
    topics = [null];
  } else if (typeof event4 === "string") {
    if (isHexString(event4, 32)) {
      topics = [event4];
    } else {
      fragment = contract.interface.getEvent(event4);
      assertArgument(fragment, "unknown fragment", "event", event4);
      topics = [fragment.topicHash];
    }
  } else if (isDeferred(event4)) {
    topics = await event4.getTopicFilter();
  } else if ("fragment" in event4) {
    fragment = event4.fragment;
    topics = [fragment.topicHash];
  } else {
    assertArgument(false, "unknown event name", "event", event4);
  }
  topics = topics.map((t) => {
    if (t == null) {
      return null;
    }
    if (Array.isArray(t)) {
      const items = Array.from(new Set(t.map((t2) => t2.toLowerCase())).values());
      if (items.length === 1) {
        return items[0];
      }
      items.sort();
      return items;
    }
    return t.toLowerCase();
  });
  const tag = topics.map((t) => {
    if (t == null) {
      return "null";
    }
    if (Array.isArray(t)) {
      return t.join("|");
    }
    return t;
  }).join("&");
  return { fragment, tag, topics };
}
async function hasSub(contract, event4) {
  const { subs } = getInternal(contract);
  return subs.get((await getSubInfo(contract, event4)).tag) || null;
}
async function getSub(contract, operation, event4) {
  const provider = getProvider(contract.runner);
  assert(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation });
  const { fragment, tag, topics } = await getSubInfo(contract, event4);
  const { addr, subs } = getInternal(contract);
  let sub = subs.get(tag);
  if (!sub) {
    const address = addr ? addr : contract;
    const filter = { address, topics };
    const listener = (log) => {
      let foundFragment = fragment;
      if (foundFragment == null) {
        try {
          foundFragment = contract.interface.getEvent(log.topics[0]);
        } catch (error) {
        }
      }
      if (foundFragment) {
        const _foundFragment = foundFragment;
        const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
        emit(contract, event4, args, (listener2) => {
          return new ContractEventPayload(contract, listener2, event4, _foundFragment, log);
        });
      } else {
        emit(contract, event4, [], (listener2) => {
          return new ContractUnknownEventPayload(contract, listener2, event4, log);
        });
      }
    };
    let starting = [];
    const start = () => {
      if (starting.length) {
        return;
      }
      starting.push(provider.on(filter, listener));
    };
    const stop = async () => {
      if (starting.length == 0) {
        return;
      }
      let started = starting;
      starting = [];
      await Promise.all(started);
      provider.off(filter, listener);
    };
    sub = { tag, listeners: [], start, stop };
    subs.set(tag, sub);
  }
  return sub;
}
var lastEmit = Promise.resolve();
async function _emit(contract, event4, args, payloadFunc) {
  await lastEmit;
  const sub = await hasSub(contract, event4);
  if (!sub) {
    return false;
  }
  const count = sub.listeners.length;
  sub.listeners = sub.listeners.filter(({ listener, once }) => {
    const passArgs = Array.from(args);
    if (payloadFunc) {
      passArgs.push(payloadFunc(once ? null : listener));
    }
    try {
      listener.call(contract, ...passArgs);
    } catch (error) {
    }
    return !once;
  });
  if (sub.listeners.length === 0) {
    sub.stop();
    getInternal(contract).subs.delete(sub.tag);
  }
  return count > 0;
}
async function emit(contract, event4, args, payloadFunc) {
  try {
    await lastEmit;
  } catch (error) {
  }
  const resultPromise = _emit(contract, event4, args, payloadFunc);
  lastEmit = resultPromise;
  return await resultPromise;
}
var passProperties2 = ["then"];
var BaseContract = class _BaseContract {
  /**
   *  The target to connect to.
   *
   *  This can be an address, ENS name or any [[Addressable]], such as
   *  another contract. To get the resovled address, use the ``getAddress``
   *  method.
   */
  target;
  /**
   *  The contract Interface.
   */
  interface;
  /**
   *  The connected runner. This is generally a [[Provider]] or a
   *  [[Signer]], which dictates what operations are supported.
   *
   *  For example, a **Contract** connected to a [[Provider]] may
   *  only execute read-only operations.
   */
  runner;
  /**
   *  All the Events available on this contract.
   */
  filters;
  /**
   *  @_ignore:
   */
  [internal2];
  /**
   *  The fallback or receive function if any.
   */
  fallback;
  /**
   *  Creates a new contract connected to %%target%% with the %%abi%% and
   *  optionally connected to a %%runner%% to perform operations on behalf
   *  of.
   */
  constructor(target, abi, runner, _deployTx) {
    assertArgument(typeof target === "string" || isAddressable(target), "invalid value for Contract target", "target", target);
    if (runner == null) {
      runner = null;
    }
    const iface = Interface.from(abi);
    defineProperties(this, { target, runner, interface: iface });
    Object.defineProperty(this, internal2, { value: {} });
    let addrPromise;
    let addr = null;
    let deployTx = null;
    if (_deployTx) {
      const provider = getProvider(runner);
      deployTx = new ContractTransactionResponse(this.interface, provider, _deployTx);
    }
    let subs = /* @__PURE__ */ new Map();
    if (typeof target === "string") {
      if (isHexString(target)) {
        addr = target;
        addrPromise = Promise.resolve(target);
      } else {
        const resolver = getRunner(runner, "resolveName");
        if (!canResolve(resolver)) {
          throw makeError("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
            operation: "resolveName"
          });
        }
        addrPromise = resolver.resolveName(target).then((addr2) => {
          if (addr2 == null) {
            throw makeError("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
              value: target
            });
          }
          getInternal(this).addr = addr2;
          return addr2;
        });
      }
    } else {
      addrPromise = target.getAddress().then((addr2) => {
        if (addr2 == null) {
          throw new Error("TODO");
        }
        getInternal(this).addr = addr2;
        return addr2;
      });
    }
    setInternal(this, { addrPromise, addr, deployTx, subs });
    const filters = new Proxy({}, {
      get: (target2, prop, receiver) => {
        if (typeof prop === "symbol" || passProperties2.indexOf(prop) >= 0) {
          return Reflect.get(target2, prop, receiver);
        }
        try {
          return this.getEvent(prop);
        } catch (error) {
          if (!isError(error, "INVALID_ARGUMENT") || error.argument !== "key") {
            throw error;
          }
        }
        return void 0;
      },
      has: (target2, prop) => {
        if (passProperties2.indexOf(prop) >= 0) {
          return Reflect.has(target2, prop);
        }
        return Reflect.has(target2, prop) || this.interface.hasEvent(String(prop));
      }
    });
    defineProperties(this, { filters });
    defineProperties(this, {
      fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null
    });
    return new Proxy(this, {
      get: (target2, prop, receiver) => {
        if (typeof prop === "symbol" || prop in target2 || passProperties2.indexOf(prop) >= 0) {
          return Reflect.get(target2, prop, receiver);
        }
        try {
          return target2.getFunction(prop);
        } catch (error) {
          if (!isError(error, "INVALID_ARGUMENT") || error.argument !== "key") {
            throw error;
          }
        }
        return void 0;
      },
      has: (target2, prop) => {
        if (typeof prop === "symbol" || prop in target2 || passProperties2.indexOf(prop) >= 0) {
          return Reflect.has(target2, prop);
        }
        return target2.interface.hasFunction(prop);
      }
    });
  }
  /**
   *  Return a new Contract instance with the same target and ABI, but
   *  a different %%runner%%.
   */
  connect(runner) {
    return new _BaseContract(this.target, this.interface, runner);
  }
  /**
   *  Return a new Contract instance with the same ABI and runner, but
   *  a different %%target%%.
   */
  attach(target) {
    return new _BaseContract(target, this.interface, this.runner);
  }
  /**
   *  Return the resolved address of this Contract.
   */
  async getAddress() {
    return await getInternal(this).addrPromise;
  }
  /**
   *  Return the deployed bytecode or null if no bytecode is found.
   */
  async getDeployedCode() {
    const provider = getProvider(this.runner);
    assert(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
    const code = await provider.getCode(await this.getAddress());
    if (code === "0x") {
      return null;
    }
    return code;
  }
  /**
   *  Resolve to this Contract once the bytecode has been deployed, or
   *  resolve immediately if already deployed.
   */
  async waitForDeployment() {
    const deployTx = this.deploymentTransaction();
    if (deployTx) {
      await deployTx.wait();
      return this;
    }
    const code = await this.getDeployedCode();
    if (code != null) {
      return this;
    }
    const provider = getProvider(this.runner);
    assert(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" });
    return new Promise((resolve, reject) => {
      const checkCode = async () => {
        try {
          const code2 = await this.getDeployedCode();
          if (code2 != null) {
            return resolve(this);
          }
          provider.once("block", checkCode);
        } catch (error) {
          reject(error);
        }
      };
      checkCode();
    });
  }
  /**
   *  Return the transaction used to deploy this contract.
   *
   *  This is only available if this instance was returned from a
   *  [[ContractFactory]].
   */
  deploymentTransaction() {
    return getInternal(this).deployTx;
  }
  /**
   *  Return the function for a given name. This is useful when a contract
   *  method name conflicts with a JavaScript name such as ``prototype`` or
   *  when using a Contract programatically.
   */
  getFunction(key) {
    if (typeof key !== "string") {
      key = key.format();
    }
    const func = buildWrappedMethod(this, key);
    return func;
  }
  /**
   *  Return the event for a given name. This is useful when a contract
   *  event name conflicts with a JavaScript name such as ``prototype`` or
   *  when using a Contract programatically.
   */
  getEvent(key) {
    if (typeof key !== "string") {
      key = key.format();
    }
    return buildWrappedEvent(this, key);
  }
  /**
   *  @_ignore:
   */
  async queryTransaction(hash) {
    throw new Error("@TODO");
  }
  /*
      // @TODO: this is a non-backwards compatible change, but will be added
      //        in v7 and in a potential SmartContract class in an upcoming
      //        v6 release
      async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
          const provider = getProvider(this.runner);
          assert(provider, "contract runner does not have a provider",
              "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });
  
          const receipt = await provider.getTransactionReceipt(hash);
          if (receipt == null) { return null; }
  
          return new ContractTransactionReceipt(this.interface, provider, receipt);
      }
      */
  /**
   *  Provide historic access to event data for %%event%% in the range
   *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
   *  inclusive.
   */
  async queryFilter(event4, fromBlock, toBlock) {
    if (fromBlock == null) {
      fromBlock = 0;
    }
    if (toBlock == null) {
      toBlock = "latest";
    }
    const { addr, addrPromise } = getInternal(this);
    const address = addr ? addr : await addrPromise;
    const { fragment, topics } = await getSubInfo(this, event4);
    const filter = { address, topics, fromBlock, toBlock };
    const provider = getProvider(this.runner);
    assert(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" });
    return (await provider.getLogs(filter)).map((log) => {
      let foundFragment = fragment;
      if (foundFragment == null) {
        try {
          foundFragment = this.interface.getEvent(log.topics[0]);
        } catch (error) {
        }
      }
      if (foundFragment) {
        try {
          return new EventLog(log, this.interface, foundFragment);
        } catch (error) {
          return new UndecodedEventLog(log, error);
        }
      }
      return new Log(log, provider);
    });
  }
  /**
   *  Add an event %%listener%% for the %%event%%.
   */
  async on(event4, listener) {
    const sub = await getSub(this, "on", event4);
    sub.listeners.push({ listener, once: false });
    sub.start();
    return this;
  }
  /**
   *  Add an event %%listener%% for the %%event%%, but remove the listener
   *  after it is fired once.
   */
  async once(event4, listener) {
    const sub = await getSub(this, "once", event4);
    sub.listeners.push({ listener, once: true });
    sub.start();
    return this;
  }
  /**
   *  Emit an %%event%% calling all listeners with %%args%%.
   *
   *  Resolves to ``true`` if any listeners were called.
   */
  async emit(event4, ...args) {
    return await emit(this, event4, args, null);
  }
  /**
   *  Resolves to the number of listeners of %%event%% or the total number
   *  of listeners if unspecified.
   */
  async listenerCount(event4) {
    if (event4) {
      const sub = await hasSub(this, event4);
      if (!sub) {
        return 0;
      }
      return sub.listeners.length;
    }
    const { subs } = getInternal(this);
    let total = 0;
    for (const { listeners } of subs.values()) {
      total += listeners.length;
    }
    return total;
  }
  /**
   *  Resolves to the listeners subscribed to %%event%% or all listeners
   *  if unspecified.
   */
  async listeners(event4) {
    if (event4) {
      const sub = await hasSub(this, event4);
      if (!sub) {
        return [];
      }
      return sub.listeners.map(({ listener }) => listener);
    }
    const { subs } = getInternal(this);
    let result = [];
    for (const { listeners } of subs.values()) {
      result = result.concat(listeners.map(({ listener }) => listener));
    }
    return result;
  }
  /**
   *  Remove the %%listener%% from the listeners for %%event%% or remove
   *  all listeners if unspecified.
   */
  async off(event4, listener) {
    const sub = await hasSub(this, event4);
    if (!sub) {
      return this;
    }
    if (listener) {
      const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
      if (index >= 0) {
        sub.listeners.splice(index, 1);
      }
    }
    if (listener == null || sub.listeners.length === 0) {
      sub.stop();
      getInternal(this).subs.delete(sub.tag);
    }
    return this;
  }
  /**
   *  Remove all the listeners for %%event%% or remove all listeners if
   *  unspecified.
   */
  async removeAllListeners(event4) {
    if (event4) {
      const sub = await hasSub(this, event4);
      if (!sub) {
        return this;
      }
      sub.stop();
      getInternal(this).subs.delete(sub.tag);
    } else {
      const { subs } = getInternal(this);
      for (const { tag, stop } of subs.values()) {
        stop();
        subs.delete(tag);
      }
    }
    return this;
  }
  /**
   *  Alias for [on].
   */
  async addListener(event4, listener) {
    return await this.on(event4, listener);
  }
  /**
   *  Alias for [off].
   */
  async removeListener(event4, listener) {
    return await this.off(event4, listener);
  }
  /**
   *  Create a new Class for the %%abi%%.
   */
  static buildClass(abi) {
    class CustomContract extends _BaseContract {
      constructor(address, runner = null) {
        super(address, abi, runner);
      }
    }
    return CustomContract;
  }
  /**
   *  Create a new BaseContract with a specified Interface.
   */
  static from(target, abi, runner) {
    if (runner == null) {
      runner = null;
    }
    const contract = new this(target, abi, runner);
    return contract;
  }
};
function _ContractBase() {
  return BaseContract;
}
var Contract = class extends _ContractBase() {
};

// src/types/eth/internal/factories/PythEVM__factory.ts
var _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    inputs: [],
    name: "InsufficientFee",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidArgument",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidGovernanceDataSource",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidGovernanceMessage",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidGovernanceTarget",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidUpdateData",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidUpdateDataSource",
    type: "error"
  },
  {
    inputs: [],
    name: "InvalidWormholeVaa",
    type: "error"
  },
  {
    inputs: [],
    name: "NoFreshUpdate",
    type: "error"
  },
  {
    inputs: [],
    name: "OldGovernanceMessage",
    type: "error"
  },
  {
    inputs: [],
    name: "PriceFeedNotFound",
    type: "error"
  },
  {
    inputs: [],
    name: "PriceFeedNotFoundWithinRange",
    type: "error"
  },
  {
    inputs: [],
    name: "StalePrice",
    type: "error"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address"
      }
    ],
    name: "AdminChanged",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint16",
        name: "chainId",
        type: "uint16"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "sequenceNumber",
        type: "uint64"
      }
    ],
    name: "BatchPriceFeedUpdate",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address"
      }
    ],
    name: "BeaconUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldImplementation",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "ContractUpgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "chainId",
            type: "uint16"
          },
          {
            internalType: "bytes32",
            name: "emitterAddress",
            type: "bytes32"
          }
        ],
        indexed: false,
        internalType: "struct PythInternalStructs.DataSource[]",
        name: "oldDataSources",
        type: "tuple[]"
      },
      {
        components: [
          {
            internalType: "uint16",
            name: "chainId",
            type: "uint16"
          },
          {
            internalType: "bytes32",
            name: "emitterAddress",
            type: "bytes32"
          }
        ],
        indexed: false,
        internalType: "struct PythInternalStructs.DataSource[]",
        name: "newDataSources",
        type: "tuple[]"
      }
    ],
    name: "DataSourcesSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldFee",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newFee",
        type: "uint256"
      }
    ],
    name: "FeeSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "chainId",
            type: "uint16"
          },
          {
            internalType: "bytes32",
            name: "emitterAddress",
            type: "bytes32"
          }
        ],
        indexed: false,
        internalType: "struct PythInternalStructs.DataSource",
        name: "oldDataSource",
        type: "tuple"
      },
      {
        components: [
          {
            internalType: "uint16",
            name: "chainId",
            type: "uint16"
          },
          {
            internalType: "bytes32",
            name: "emitterAddress",
            type: "bytes32"
          }
        ],
        indexed: false,
        internalType: "struct PythInternalStructs.DataSource",
        name: "newDataSource",
        type: "tuple"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "initialSequence",
        type: "uint64"
      }
    ],
    name: "GovernanceDataSourceSet",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "publishTime",
        type: "uint64"
      },
      {
        indexed: false,
        internalType: "int64",
        name: "price",
        type: "int64"
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "conf",
        type: "uint64"
      }
    ],
    name: "PriceFeedUpdate",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address"
      }
    ],
    name: "Upgraded",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldValidPeriod",
        type: "uint256"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newValidPeriod",
        type: "uint256"
      }
    ],
    name: "ValidPeriodSet",
    type: "event"
  },
  {
    inputs: [],
    name: "chainId",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedVM",
        type: "bytes"
      }
    ],
    name: "executeGovernanceInstruction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      }
    ],
    name: "getEmaPrice",
    outputs: [
      {
        components: [
          {
            internalType: "int64",
            name: "price",
            type: "int64"
          },
          {
            internalType: "uint64",
            name: "conf",
            type: "uint64"
          },
          {
            internalType: "int32",
            name: "expo",
            type: "int32"
          },
          {
            internalType: "uint256",
            name: "publishTime",
            type: "uint256"
          }
        ],
        internalType: "struct PythStructs.Price",
        name: "price",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "age",
        type: "uint256"
      }
    ],
    name: "getEmaPriceNoOlderThan",
    outputs: [
      {
        components: [
          {
            internalType: "int64",
            name: "price",
            type: "int64"
          },
          {
            internalType: "uint64",
            name: "conf",
            type: "uint64"
          },
          {
            internalType: "int32",
            name: "expo",
            type: "int32"
          },
          {
            internalType: "uint256",
            name: "publishTime",
            type: "uint256"
          }
        ],
        internalType: "struct PythStructs.Price",
        name: "price",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      }
    ],
    name: "getEmaPriceUnsafe",
    outputs: [
      {
        components: [
          {
            internalType: "int64",
            name: "price",
            type: "int64"
          },
          {
            internalType: "uint64",
            name: "conf",
            type: "uint64"
          },
          {
            internalType: "int32",
            name: "expo",
            type: "int32"
          },
          {
            internalType: "uint256",
            name: "publishTime",
            type: "uint256"
          }
        ],
        internalType: "struct PythStructs.Price",
        name: "price",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      }
    ],
    name: "getPrice",
    outputs: [
      {
        components: [
          {
            internalType: "int64",
            name: "price",
            type: "int64"
          },
          {
            internalType: "uint64",
            name: "conf",
            type: "uint64"
          },
          {
            internalType: "int32",
            name: "expo",
            type: "int32"
          },
          {
            internalType: "uint256",
            name: "publishTime",
            type: "uint256"
          }
        ],
        internalType: "struct PythStructs.Price",
        name: "price",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      },
      {
        internalType: "uint256",
        name: "age",
        type: "uint256"
      }
    ],
    name: "getPriceNoOlderThan",
    outputs: [
      {
        components: [
          {
            internalType: "int64",
            name: "price",
            type: "int64"
          },
          {
            internalType: "uint64",
            name: "conf",
            type: "uint64"
          },
          {
            internalType: "int32",
            name: "expo",
            type: "int32"
          },
          {
            internalType: "uint256",
            name: "publishTime",
            type: "uint256"
          }
        ],
        internalType: "struct PythStructs.Price",
        name: "price",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      }
    ],
    name: "getPriceUnsafe",
    outputs: [
      {
        components: [
          {
            internalType: "int64",
            name: "price",
            type: "int64"
          },
          {
            internalType: "uint64",
            name: "conf",
            type: "uint64"
          },
          {
            internalType: "int32",
            name: "expo",
            type: "int32"
          },
          {
            internalType: "uint256",
            name: "publishTime",
            type: "uint256"
          }
        ],
        internalType: "struct PythStructs.Price",
        name: "price",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "updateData",
        type: "bytes[]"
      }
    ],
    name: "getUpdateFee",
    outputs: [
      {
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getValidTimePeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "governanceDataSource",
    outputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "chainId",
            type: "uint16"
          },
          {
            internalType: "bytes32",
            name: "emitterAddress",
            type: "bytes32"
          }
        ],
        internalType: "struct PythInternalStructs.DataSource",
        name: "",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "governanceDataSourceIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "chainId",
            type: "uint16"
          },
          {
            internalType: "bytes32",
            name: "emitterAddress",
            type: "bytes32"
          }
        ],
        internalType: "struct PythInternalStructs.DataSource",
        name: "ds",
        type: "tuple"
      }
    ],
    name: "hashDataSource",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wormhole",
        type: "address"
      },
      {
        internalType: "uint16[]",
        name: "dataSourceEmitterChainIds",
        type: "uint16[]"
      },
      {
        internalType: "bytes32[]",
        name: "dataSourceEmitterAddresses",
        type: "bytes32[]"
      },
      {
        internalType: "uint16",
        name: "governanceEmitterChainId",
        type: "uint16"
      },
      {
        internalType: "bytes32",
        name: "governanceEmitterAddress",
        type: "bytes32"
      },
      {
        internalType: "uint64",
        name: "governanceInitialSequence",
        type: "uint64"
      },
      {
        internalType: "uint256",
        name: "validTimePeriodSeconds",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "singleUpdateFeeInWei",
        type: "uint256"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "dataSourceChainId",
        type: "uint16"
      },
      {
        internalType: "bytes32",
        name: "dataSourceEmitterAddress",
        type: "bytes32"
      }
    ],
    name: "isValidDataSource",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "governanceChainId",
        type: "uint16"
      },
      {
        internalType: "bytes32",
        name: "governanceEmitterAddress",
        type: "bytes32"
      }
    ],
    name: "isValidGovernanceDataSource",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "lastExecutedGovernanceSequence",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "priceId",
        type: "bytes32"
      }
    ],
    name: "latestPriceInfoPublishTime",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedPayload",
        type: "bytes"
      }
    ],
    name: "parseAuthorizeGovernanceDataSourceTransferPayload",
    outputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "claimVaa",
            type: "bytes"
          }
        ],
        internalType: "struct PythGovernanceInstructions.AuthorizeGovernanceDataSourceTransferPayload",
        name: "sgds",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedInstruction",
        type: "bytes"
      }
    ],
    name: "parseGovernanceInstruction",
    outputs: [
      {
        components: [
          {
            internalType: "enum PythGovernanceInstructions.GovernanceModule",
            name: "module",
            type: "uint8"
          },
          {
            internalType: "enum PythGovernanceInstructions.GovernanceAction",
            name: "action",
            type: "uint8"
          },
          {
            internalType: "uint16",
            name: "targetChainId",
            type: "uint16"
          },
          {
            internalType: "bytes",
            name: "payload",
            type: "bytes"
          }
        ],
        internalType: "struct PythGovernanceInstructions.GovernanceInstruction",
        name: "gi",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "updateData",
        type: "bytes[]"
      },
      {
        internalType: "bytes32[]",
        name: "priceIds",
        type: "bytes32[]"
      },
      {
        internalType: "uint64",
        name: "minPublishTime",
        type: "uint64"
      },
      {
        internalType: "uint64",
        name: "maxPublishTime",
        type: "uint64"
      }
    ],
    name: "parsePriceFeedUpdates",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "id",
            type: "bytes32"
          },
          {
            components: [
              {
                internalType: "int64",
                name: "price",
                type: "int64"
              },
              {
                internalType: "uint64",
                name: "conf",
                type: "uint64"
              },
              {
                internalType: "int32",
                name: "expo",
                type: "int32"
              },
              {
                internalType: "uint256",
                name: "publishTime",
                type: "uint256"
              }
            ],
            internalType: "struct PythStructs.Price",
            name: "price",
            type: "tuple"
          },
          {
            components: [
              {
                internalType: "int64",
                name: "price",
                type: "int64"
              },
              {
                internalType: "uint64",
                name: "conf",
                type: "uint64"
              },
              {
                internalType: "int32",
                name: "expo",
                type: "int32"
              },
              {
                internalType: "uint256",
                name: "publishTime",
                type: "uint256"
              }
            ],
            internalType: "struct PythStructs.Price",
            name: "emaPrice",
            type: "tuple"
          }
        ],
        internalType: "struct PythStructs.PriceFeed[]",
        name: "priceFeeds",
        type: "tuple[]"
      }
    ],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedPayload",
        type: "bytes"
      }
    ],
    name: "parseRequestGovernanceDataSourceTransferPayload",
    outputs: [
      {
        components: [
          {
            internalType: "uint32",
            name: "governanceDataSourceIndex",
            type: "uint32"
          }
        ],
        internalType: "struct PythGovernanceInstructions.RequestGovernanceDataSourceTransferPayload",
        name: "sgdsClaim",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedPayload",
        type: "bytes"
      }
    ],
    name: "parseSetDataSourcesPayload",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint16",
                name: "chainId",
                type: "uint16"
              },
              {
                internalType: "bytes32",
                name: "emitterAddress",
                type: "bytes32"
              }
            ],
            internalType: "struct PythInternalStructs.DataSource[]",
            name: "dataSources",
            type: "tuple[]"
          }
        ],
        internalType: "struct PythGovernanceInstructions.SetDataSourcesPayload",
        name: "sds",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedPayload",
        type: "bytes"
      }
    ],
    name: "parseSetFeePayload",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "newFee",
            type: "uint256"
          }
        ],
        internalType: "struct PythGovernanceInstructions.SetFeePayload",
        name: "sf",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedPayload",
        type: "bytes"
      }
    ],
    name: "parseSetValidPeriodPayload",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "newValidPeriod",
            type: "uint256"
          }
        ],
        internalType: "struct PythGovernanceInstructions.SetValidPeriodPayload",
        name: "svp",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedPayload",
        type: "bytes"
      }
    ],
    name: "parseUpgradeContractPayload",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "newImplementation",
            type: "address"
          }
        ],
        internalType: "struct PythGovernanceInstructions.UpgradeContractPayload",
        name: "uc",
        type: "tuple"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      }
    ],
    name: "priceFeedExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "pythUpgradableMagic",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      }
    ],
    name: "queryPriceFeed",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "id",
            type: "bytes32"
          },
          {
            components: [
              {
                internalType: "int64",
                name: "price",
                type: "int64"
              },
              {
                internalType: "uint64",
                name: "conf",
                type: "uint64"
              },
              {
                internalType: "int32",
                name: "expo",
                type: "int32"
              },
              {
                internalType: "uint256",
                name: "publishTime",
                type: "uint256"
              }
            ],
            internalType: "struct PythStructs.Price",
            name: "price",
            type: "tuple"
          },
          {
            components: [
              {
                internalType: "int64",
                name: "price",
                type: "int64"
              },
              {
                internalType: "uint64",
                name: "conf",
                type: "uint64"
              },
              {
                internalType: "int32",
                name: "expo",
                type: "int32"
              },
              {
                internalType: "uint256",
                name: "publishTime",
                type: "uint256"
              }
            ],
            internalType: "struct PythStructs.Price",
            name: "emaPrice",
            type: "tuple"
          }
        ],
        internalType: "struct PythStructs.PriceFeed",
        name: "priceFeed",
        type: "tuple"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "singleUpdateFeeInWei",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "updateData",
        type: "bytes[]"
      }
    ],
    name: "updatePriceFeeds",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "updateData",
        type: "bytes[]"
      },
      {
        internalType: "bytes32[]",
        name: "priceIds",
        type: "bytes32[]"
      },
      {
        internalType: "uint64[]",
        name: "publishTimes",
        type: "uint64[]"
      }
    ],
    name: "updatePriceFeedsIfNecessary",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address"
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes"
      }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function"
  },
  {
    inputs: [],
    name: "validDataSources",
    outputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "chainId",
            type: "uint16"
          },
          {
            internalType: "bytes32",
            name: "emitterAddress",
            type: "bytes32"
          }
        ],
        internalType: "struct PythInternalStructs.DataSource[]",
        name: "",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "validTimePeriodSeconds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [],
    name: "wormhole",
    outputs: [
      {
        internalType: "contract IWormhole",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
];
var PythEVM__factory = class {
  static abi = _abi;
  static createInterface() {
    return new Interface(_abi);
  }
  static connect(address, signerOrProvider) {
    return new Contract(address, _abi, signerOrProvider);
  }
};

// src/types/eth/internal/pythevm-processor.ts
var templateContract = PythEVM__factory.connect("0x0", import_eth.DummyProvider);
var PythEVMContractView = class extends import_eth.ContractView {
  constructor(contract) {
    super(contract);
    this.callStatic.contract = contract;
  }
  async chainId(overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("chainId()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async getEmaPrice(id2, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("getEmaPrice(bytes32)")(
        id2,
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async getEmaPriceNoOlderThan(id2, age, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction(
        "getEmaPriceNoOlderThan(bytes32,uint256)"
      )(id2, age, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async getEmaPriceUnsafe(id2, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("getEmaPriceUnsafe(bytes32)")(
        id2,
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async getPrice(id2, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("getPrice(bytes32)")(
        id2,
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async getPriceNoOlderThan(id2, age, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction(
        "getPriceNoOlderThan(bytes32,uint256)"
      )(id2, age, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async getPriceUnsafe(id2, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("getPriceUnsafe(bytes32)")(
        id2,
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async getUpdateFee(updateData, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("getUpdateFee(bytes[])")(
        updateData,
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async getValidTimePeriod(overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("getValidTimePeriod()")(
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async governanceDataSource(overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("governanceDataSource()")(
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async governanceDataSourceIndex(overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("governanceDataSourceIndex()")(
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async hashDataSource(ds, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction(
        "hashDataSource((uint16,bytes32))"
      )(ds, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async isValidDataSource(dataSourceChainId, dataSourceEmitterAddress, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction(
        "isValidDataSource(uint16,bytes32)"
      )(dataSourceChainId, dataSourceEmitterAddress, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async isValidGovernanceDataSource(governanceChainId, governanceEmitterAddress, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction(
        "isValidGovernanceDataSource(uint16,bytes32)"
      )(governanceChainId, governanceEmitterAddress, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async lastExecutedGovernanceSequence(overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction(
        "lastExecutedGovernanceSequence()"
      )(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async latestPriceInfoPublishTime(priceId, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction(
        "latestPriceInfoPublishTime(bytes32)"
      )(priceId, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async owner(overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("owner()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async parseAuthorizeGovernanceDataSourceTransferPayload(encodedPayload, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction(
        "parseAuthorizeGovernanceDataSourceTransferPayload(bytes)"
      )(encodedPayload, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async parseGovernanceInstruction(encodedInstruction, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction(
        "parseGovernanceInstruction(bytes)"
      )(encodedInstruction, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async parseRequestGovernanceDataSourceTransferPayload(encodedPayload, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction(
        "parseRequestGovernanceDataSourceTransferPayload(bytes)"
      )(encodedPayload, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async parseSetDataSourcesPayload(encodedPayload, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction(
        "parseSetDataSourcesPayload(bytes)"
      )(encodedPayload, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async parseSetFeePayload(encodedPayload, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("parseSetFeePayload(bytes)")(
        encodedPayload,
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async parseSetValidPeriodPayload(encodedPayload, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction(
        "parseSetValidPeriodPayload(bytes)"
      )(encodedPayload, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async parseUpgradeContractPayload(encodedPayload, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction(
        "parseUpgradeContractPayload(bytes)"
      )(encodedPayload, overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async priceFeedExists(id2, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("priceFeedExists(bytes32)")(
        id2,
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async proxiableUUID(overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("proxiableUUID()")(
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async pythUpgradableMagic(overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("pythUpgradableMagic()")(
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async queryPriceFeed(id2, overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("queryPriceFeed(bytes32)")(
        id2,
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async singleUpdateFeeInWei(overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("singleUpdateFeeInWei()")(
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async validDataSources(overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("validDataSources()")(
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async validTimePeriodSeconds(overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("validTimePeriodSeconds()")(
        overrides || {}
      );
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async version(overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("version()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  async wormhole(overrides, preparedData, ethCallContext) {
    try {
      return await this.contract.getFunction("wormhole()")(overrides || {});
    } catch (e) {
      const stack = new Error().stack;
      throw (0, import_eth.transformEtherError)(e, void 0, stack);
    }
  }
  callStatic = {
    contract: this.contract,
    async executeGovernanceInstruction(encodedVM, overrides, preparedData, ethCallContext) {
      try {
        return await this.contract.getFunction("executeGovernanceInstruction(bytes)").staticCall(encodedVM, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw (0, import_eth.transformEtherError)(e, void 0, stack);
      }
    },
    async initialize(wormhole2, dataSourceEmitterChainIds, dataSourceEmitterAddresses, governanceEmitterChainId, governanceEmitterAddress, governanceInitialSequence, validTimePeriodSeconds, singleUpdateFeeInWei, overrides, preparedData, ethCallContext) {
      try {
        return await this.contract.getFunction(
          "initialize(address,uint16[],bytes32[],uint16,bytes32,uint64,uint256,uint256)"
        ).staticCall(
          wormhole2,
          dataSourceEmitterChainIds,
          dataSourceEmitterAddresses,
          governanceEmitterChainId,
          governanceEmitterAddress,
          governanceInitialSequence,
          validTimePeriodSeconds,
          singleUpdateFeeInWei,
          overrides || {}
        );
      } catch (e) {
        const stack = new Error().stack;
        throw (0, import_eth.transformEtherError)(e, void 0, stack);
      }
    },
    async parsePriceFeedUpdates(updateData, priceIds, minPublishTime, maxPublishTime, overrides, preparedData, ethCallContext) {
      try {
        return await this.contract.getFunction("parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)").staticCall(
          updateData,
          priceIds,
          minPublishTime,
          maxPublishTime,
          overrides || {}
        );
      } catch (e) {
        const stack = new Error().stack;
        throw (0, import_eth.transformEtherError)(e, void 0, stack);
      }
    },
    async renounceOwnership(overrides, preparedData, ethCallContext) {
      try {
        return await this.contract.getFunction("renounceOwnership()").staticCall(overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw (0, import_eth.transformEtherError)(e, void 0, stack);
      }
    },
    async transferOwnership(newOwner, overrides, preparedData, ethCallContext) {
      try {
        return await this.contract.getFunction("transferOwnership(address)").staticCall(newOwner, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw (0, import_eth.transformEtherError)(e, void 0, stack);
      }
    },
    async updatePriceFeeds(updateData, overrides, preparedData, ethCallContext) {
      try {
        return await this.contract.getFunction("updatePriceFeeds(bytes[])").staticCall(updateData, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw (0, import_eth.transformEtherError)(e, void 0, stack);
      }
    },
    async updatePriceFeedsIfNecessary(updateData, priceIds, publishTimes, overrides, preparedData, ethCallContext) {
      try {
        return await this.contract.getFunction(
          "updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])"
        ).staticCall(updateData, priceIds, publishTimes, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw (0, import_eth.transformEtherError)(e, void 0, stack);
      }
    },
    async upgradeTo(newImplementation, overrides, preparedData, ethCallContext) {
      try {
        return await this.contract.getFunction("upgradeTo(address)").staticCall(newImplementation, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw (0, import_eth.transformEtherError)(e, void 0, stack);
      }
    },
    async upgradeToAndCall(newImplementation, data, overrides, preparedData, ethCallContext) {
      try {
        return await this.contract.getFunction("upgradeToAndCall(address,bytes)").staticCall(newImplementation, data, overrides || {});
      } catch (e) {
        const stack = new Error().stack;
        throw (0, import_eth.transformEtherError)(e, void 0, stack);
      }
    }
  };
  encodeCall = {
    chainId(callContext) {
      return (0, import_eth.encodeCallData)(callContext, "chainId", "function chainId()", []);
    },
    executeGovernanceInstruction(encodedVM, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "executeGovernanceInstruction",
        "function executeGovernanceInstruction(bytes)",
        [encodedVM]
      );
    },
    getEmaPrice(id2, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "getEmaPrice",
        "function getEmaPrice(bytes32)",
        [id2]
      );
    },
    getEmaPriceNoOlderThan(id2, age, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "getEmaPriceNoOlderThan",
        "function getEmaPriceNoOlderThan(bytes32,uint256)",
        [id2, age]
      );
    },
    getEmaPriceUnsafe(id2, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "getEmaPriceUnsafe",
        "function getEmaPriceUnsafe(bytes32)",
        [id2]
      );
    },
    getPrice(id2, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "getPrice",
        "function getPrice(bytes32)",
        [id2]
      );
    },
    getPriceNoOlderThan(id2, age, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "getPriceNoOlderThan",
        "function getPriceNoOlderThan(bytes32,uint256)",
        [id2, age]
      );
    },
    getPriceUnsafe(id2, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "getPriceUnsafe",
        "function getPriceUnsafe(bytes32)",
        [id2]
      );
    },
    getUpdateFee(updateData, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "getUpdateFee",
        "function getUpdateFee(bytes[])",
        [updateData]
      );
    },
    getValidTimePeriod(callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "getValidTimePeriod",
        "function getValidTimePeriod()",
        []
      );
    },
    governanceDataSource(callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "governanceDataSource",
        "function governanceDataSource()",
        []
      );
    },
    governanceDataSourceIndex(callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "governanceDataSourceIndex",
        "function governanceDataSourceIndex()",
        []
      );
    },
    hashDataSource(ds, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "hashDataSource",
        "function hashDataSource((uint16,bytes32))",
        [ds]
      );
    },
    initialize(wormhole2, dataSourceEmitterChainIds, dataSourceEmitterAddresses, governanceEmitterChainId, governanceEmitterAddress, governanceInitialSequence, validTimePeriodSeconds, singleUpdateFeeInWei, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "initialize",
        "function initialize(address,uint16[],bytes32[],uint16,bytes32,uint64,uint256,uint256)",
        [
          wormhole2,
          dataSourceEmitterChainIds,
          dataSourceEmitterAddresses,
          governanceEmitterChainId,
          governanceEmitterAddress,
          governanceInitialSequence,
          validTimePeriodSeconds,
          singleUpdateFeeInWei
        ]
      );
    },
    isValidDataSource(dataSourceChainId, dataSourceEmitterAddress, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "isValidDataSource",
        "function isValidDataSource(uint16,bytes32)",
        [dataSourceChainId, dataSourceEmitterAddress]
      );
    },
    isValidGovernanceDataSource(governanceChainId, governanceEmitterAddress, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "isValidGovernanceDataSource",
        "function isValidGovernanceDataSource(uint16,bytes32)",
        [governanceChainId, governanceEmitterAddress]
      );
    },
    lastExecutedGovernanceSequence(callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "lastExecutedGovernanceSequence",
        "function lastExecutedGovernanceSequence()",
        []
      );
    },
    latestPriceInfoPublishTime(priceId, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "latestPriceInfoPublishTime",
        "function latestPriceInfoPublishTime(bytes32)",
        [priceId]
      );
    },
    owner(callContext) {
      return (0, import_eth.encodeCallData)(callContext, "owner", "function owner()", []);
    },
    parseAuthorizeGovernanceDataSourceTransferPayload(encodedPayload, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "parseAuthorizeGovernanceDataSourceTransferPayload",
        "function parseAuthorizeGovernanceDataSourceTransferPayload(bytes)",
        [encodedPayload]
      );
    },
    parseGovernanceInstruction(encodedInstruction, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "parseGovernanceInstruction",
        "function parseGovernanceInstruction(bytes)",
        [encodedInstruction]
      );
    },
    parsePriceFeedUpdates(updateData, priceIds, minPublishTime, maxPublishTime, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "parsePriceFeedUpdates",
        "function parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)",
        [updateData, priceIds, minPublishTime, maxPublishTime]
      );
    },
    parseRequestGovernanceDataSourceTransferPayload(encodedPayload, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "parseRequestGovernanceDataSourceTransferPayload",
        "function parseRequestGovernanceDataSourceTransferPayload(bytes)",
        [encodedPayload]
      );
    },
    parseSetDataSourcesPayload(encodedPayload, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "parseSetDataSourcesPayload",
        "function parseSetDataSourcesPayload(bytes)",
        [encodedPayload]
      );
    },
    parseSetFeePayload(encodedPayload, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "parseSetFeePayload",
        "function parseSetFeePayload(bytes)",
        [encodedPayload]
      );
    },
    parseSetValidPeriodPayload(encodedPayload, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "parseSetValidPeriodPayload",
        "function parseSetValidPeriodPayload(bytes)",
        [encodedPayload]
      );
    },
    parseUpgradeContractPayload(encodedPayload, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "parseUpgradeContractPayload",
        "function parseUpgradeContractPayload(bytes)",
        [encodedPayload]
      );
    },
    priceFeedExists(id2, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "priceFeedExists",
        "function priceFeedExists(bytes32)",
        [id2]
      );
    },
    proxiableUUID(callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "proxiableUUID",
        "function proxiableUUID()",
        []
      );
    },
    pythUpgradableMagic(callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "pythUpgradableMagic",
        "function pythUpgradableMagic()",
        []
      );
    },
    queryPriceFeed(id2, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "queryPriceFeed",
        "function queryPriceFeed(bytes32)",
        [id2]
      );
    },
    renounceOwnership(callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "renounceOwnership",
        "function renounceOwnership()",
        []
      );
    },
    singleUpdateFeeInWei(callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "singleUpdateFeeInWei",
        "function singleUpdateFeeInWei()",
        []
      );
    },
    transferOwnership(newOwner, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "transferOwnership",
        "function transferOwnership(address)",
        [newOwner]
      );
    },
    updatePriceFeeds(updateData, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "updatePriceFeeds",
        "function updatePriceFeeds(bytes[])",
        [updateData]
      );
    },
    updatePriceFeedsIfNecessary(updateData, priceIds, publishTimes, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "updatePriceFeedsIfNecessary",
        "function updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])",
        [updateData, priceIds, publishTimes]
      );
    },
    upgradeTo(newImplementation, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "upgradeTo",
        "function upgradeTo(address)",
        [newImplementation]
      );
    },
    upgradeToAndCall(newImplementation, data, callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "upgradeToAndCall",
        "function upgradeToAndCall(address,bytes)",
        [newImplementation, data]
      );
    },
    validDataSources(callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "validDataSources",
        "function validDataSources()",
        []
      );
    },
    validTimePeriodSeconds(callContext) {
      return (0, import_eth.encodeCallData)(
        callContext,
        "validTimePeriodSeconds",
        "function validTimePeriodSeconds()",
        []
      );
    },
    version(callContext) {
      return (0, import_eth.encodeCallData)(callContext, "version", "function version()", []);
    },
    wormhole(callContext) {
      return (0, import_eth.encodeCallData)(callContext, "wormhole", "function wormhole()", []);
    }
  };
};
var PythEVMBoundContractView = class extends import_eth.BoundContractView {
  async chainId(overrides) {
    return await this.view.chainId(
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async getEmaPrice(id2, overrides) {
    return await this.view.getEmaPrice(
      id2,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async getEmaPriceNoOlderThan(id2, age, overrides) {
    return await this.view.getEmaPriceNoOlderThan(
      id2,
      age,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async getEmaPriceUnsafe(id2, overrides) {
    return await this.view.getEmaPriceUnsafe(
      id2,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async getPrice(id2, overrides) {
    return await this.view.getPrice(
      id2,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async getPriceNoOlderThan(id2, age, overrides) {
    return await this.view.getPriceNoOlderThan(
      id2,
      age,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async getPriceUnsafe(id2, overrides) {
    return await this.view.getPriceUnsafe(
      id2,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async getUpdateFee(updateData, overrides) {
    return await this.view.getUpdateFee(
      updateData,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async getValidTimePeriod(overrides) {
    return await this.view.getValidTimePeriod(
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async governanceDataSource(overrides) {
    return await this.view.governanceDataSource(
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async governanceDataSourceIndex(overrides) {
    return await this.view.governanceDataSourceIndex(
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async hashDataSource(ds, overrides) {
    return await this.view.hashDataSource(
      ds,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async isValidDataSource(dataSourceChainId, dataSourceEmitterAddress, overrides) {
    return await this.view.isValidDataSource(
      dataSourceChainId,
      dataSourceEmitterAddress,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async isValidGovernanceDataSource(governanceChainId, governanceEmitterAddress, overrides) {
    return await this.view.isValidGovernanceDataSource(
      governanceChainId,
      governanceEmitterAddress,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async lastExecutedGovernanceSequence(overrides) {
    return await this.view.lastExecutedGovernanceSequence(
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async latestPriceInfoPublishTime(priceId, overrides) {
    return await this.view.latestPriceInfoPublishTime(
      priceId,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async owner(overrides) {
    return await this.view.owner(
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async parseAuthorizeGovernanceDataSourceTransferPayload(encodedPayload, overrides) {
    return await this.view.parseAuthorizeGovernanceDataSourceTransferPayload(
      encodedPayload,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async parseGovernanceInstruction(encodedInstruction, overrides) {
    return await this.view.parseGovernanceInstruction(
      encodedInstruction,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async parseRequestGovernanceDataSourceTransferPayload(encodedPayload, overrides) {
    return await this.view.parseRequestGovernanceDataSourceTransferPayload(
      encodedPayload,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async parseSetDataSourcesPayload(encodedPayload, overrides) {
    return await this.view.parseSetDataSourcesPayload(
      encodedPayload,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async parseSetFeePayload(encodedPayload, overrides) {
    return await this.view.parseSetFeePayload(
      encodedPayload,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async parseSetValidPeriodPayload(encodedPayload, overrides) {
    return await this.view.parseSetValidPeriodPayload(
      encodedPayload,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async parseUpgradeContractPayload(encodedPayload, overrides) {
    return await this.view.parseUpgradeContractPayload(
      encodedPayload,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async priceFeedExists(id2, overrides) {
    return await this.view.priceFeedExists(
      id2,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async proxiableUUID(overrides) {
    return await this.view.proxiableUUID(
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async pythUpgradableMagic(overrides) {
    return await this.view.pythUpgradableMagic(
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async queryPriceFeed(id2, overrides) {
    return await this.view.queryPriceFeed(
      id2,
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async singleUpdateFeeInWei(overrides) {
    return await this.view.singleUpdateFeeInWei(
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async validDataSources(overrides) {
    return await this.view.validDataSources(
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async validTimePeriodSeconds(overrides) {
    return await this.view.validTimePeriodSeconds(
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async version(overrides) {
    return await this.view.version(
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  async wormhole(overrides) {
    return await this.view.wormhole(
      {
        blockTag: this.context.blockNumber,
        ...overrides
      },
      this.context.preparedData,
      this.context.getEthCallContext()
    );
  }
  callStatic = {
    view: this.view,
    context: this.context,
    async executeGovernanceInstruction(encodedVM, overrides) {
      return await this.view.callStatic.executeGovernanceInstruction(
        encodedVM,
        {
          blockTag: this.context.blockNumber,
          ...overrides
        },
        this.context.preparedData,
        this.context.getEthCallContext()
      );
    },
    async initialize(wormhole2, dataSourceEmitterChainIds, dataSourceEmitterAddresses, governanceEmitterChainId, governanceEmitterAddress, governanceInitialSequence, validTimePeriodSeconds, singleUpdateFeeInWei, overrides) {
      return await this.view.callStatic.initialize(
        wormhole2,
        dataSourceEmitterChainIds,
        dataSourceEmitterAddresses,
        governanceEmitterChainId,
        governanceEmitterAddress,
        governanceInitialSequence,
        validTimePeriodSeconds,
        singleUpdateFeeInWei,
        {
          blockTag: this.context.blockNumber,
          ...overrides
        },
        this.context.preparedData,
        this.context.getEthCallContext()
      );
    },
    async parsePriceFeedUpdates(updateData, priceIds, minPublishTime, maxPublishTime, overrides) {
      return await this.view.callStatic.parsePriceFeedUpdates(
        updateData,
        priceIds,
        minPublishTime,
        maxPublishTime,
        {
          blockTag: this.context.blockNumber,
          ...overrides
        },
        this.context.preparedData,
        this.context.getEthCallContext()
      );
    },
    async renounceOwnership(overrides) {
      return await this.view.callStatic.renounceOwnership(
        {
          blockTag: this.context.blockNumber,
          ...overrides
        },
        this.context.preparedData,
        this.context.getEthCallContext()
      );
    },
    async transferOwnership(newOwner, overrides) {
      return await this.view.callStatic.transferOwnership(
        newOwner,
        {
          blockTag: this.context.blockNumber,
          ...overrides
        },
        this.context.preparedData,
        this.context.getEthCallContext()
      );
    },
    async updatePriceFeeds(updateData, overrides) {
      return await this.view.callStatic.updatePriceFeeds(
        updateData,
        {
          blockTag: this.context.blockNumber,
          ...overrides
        },
        this.context.preparedData,
        this.context.getEthCallContext()
      );
    },
    async updatePriceFeedsIfNecessary(updateData, priceIds, publishTimes, overrides) {
      return await this.view.callStatic.updatePriceFeedsIfNecessary(
        updateData,
        priceIds,
        publishTimes,
        {
          blockTag: this.context.blockNumber,
          ...overrides
        },
        this.context.preparedData,
        this.context.getEthCallContext()
      );
    },
    async upgradeTo(newImplementation, overrides) {
      return await this.view.callStatic.upgradeTo(
        newImplementation,
        {
          blockTag: this.context.blockNumber,
          ...overrides
        },
        this.context.preparedData,
        this.context.getEthCallContext()
      );
    },
    async upgradeToAndCall(newImplementation, data, overrides) {
      return await this.view.callStatic.upgradeToAndCall(
        newImplementation,
        data,
        {
          blockTag: this.context.blockNumber,
          ...overrides
        },
        this.context.preparedData,
        this.context.getEthCallContext()
      );
    }
  };
  encodeCall = {
    view: this.view,
    context: this.context,
    chainId(overrides) {
      return this.view.encodeCall.chainId({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    executeGovernanceInstruction(encodedVM, overrides) {
      return this.view.encodeCall.executeGovernanceInstruction(encodedVM, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    getEmaPrice(id2, overrides) {
      return this.view.encodeCall.getEmaPrice(id2, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    getEmaPriceNoOlderThan(id2, age, overrides) {
      return this.view.encodeCall.getEmaPriceNoOlderThan(id2, age, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    getEmaPriceUnsafe(id2, overrides) {
      return this.view.encodeCall.getEmaPriceUnsafe(id2, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    getPrice(id2, overrides) {
      return this.view.encodeCall.getPrice(id2, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    getPriceNoOlderThan(id2, age, overrides) {
      return this.view.encodeCall.getPriceNoOlderThan(id2, age, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    getPriceUnsafe(id2, overrides) {
      return this.view.encodeCall.getPriceUnsafe(id2, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    getUpdateFee(updateData, overrides) {
      return this.view.encodeCall.getUpdateFee(updateData, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    getValidTimePeriod(overrides) {
      return this.view.encodeCall.getValidTimePeriod({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    governanceDataSource(overrides) {
      return this.view.encodeCall.governanceDataSource({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    governanceDataSourceIndex(overrides) {
      return this.view.encodeCall.governanceDataSourceIndex({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    hashDataSource(ds, overrides) {
      return this.view.encodeCall.hashDataSource(ds, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    initialize(wormhole2, dataSourceEmitterChainIds, dataSourceEmitterAddresses, governanceEmitterChainId, governanceEmitterAddress, governanceInitialSequence, validTimePeriodSeconds, singleUpdateFeeInWei, overrides) {
      return this.view.encodeCall.initialize(
        wormhole2,
        dataSourceEmitterChainIds,
        dataSourceEmitterAddresses,
        governanceEmitterChainId,
        governanceEmitterAddress,
        governanceInitialSequence,
        validTimePeriodSeconds,
        singleUpdateFeeInWei,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides)
        }
      );
    },
    isValidDataSource(dataSourceChainId, dataSourceEmitterAddress, overrides) {
      return this.view.encodeCall.isValidDataSource(
        dataSourceChainId,
        dataSourceEmitterAddress,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides)
        }
      );
    },
    isValidGovernanceDataSource(governanceChainId, governanceEmitterAddress, overrides) {
      return this.view.encodeCall.isValidGovernanceDataSource(
        governanceChainId,
        governanceEmitterAddress,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides)
        }
      );
    },
    lastExecutedGovernanceSequence(overrides) {
      return this.view.encodeCall.lastExecutedGovernanceSequence({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    latestPriceInfoPublishTime(priceId, overrides) {
      return this.view.encodeCall.latestPriceInfoPublishTime(priceId, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    owner(overrides) {
      return this.view.encodeCall.owner({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    parseAuthorizeGovernanceDataSourceTransferPayload(encodedPayload, overrides) {
      return this.view.encodeCall.parseAuthorizeGovernanceDataSourceTransferPayload(
        encodedPayload,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides)
        }
      );
    },
    parseGovernanceInstruction(encodedInstruction, overrides) {
      return this.view.encodeCall.parseGovernanceInstruction(
        encodedInstruction,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides)
        }
      );
    },
    parsePriceFeedUpdates(updateData, priceIds, minPublishTime, maxPublishTime, overrides) {
      return this.view.encodeCall.parsePriceFeedUpdates(
        updateData,
        priceIds,
        minPublishTime,
        maxPublishTime,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides)
        }
      );
    },
    parseRequestGovernanceDataSourceTransferPayload(encodedPayload, overrides) {
      return this.view.encodeCall.parseRequestGovernanceDataSourceTransferPayload(
        encodedPayload,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides)
        }
      );
    },
    parseSetDataSourcesPayload(encodedPayload, overrides) {
      return this.view.encodeCall.parseSetDataSourcesPayload(encodedPayload, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    parseSetFeePayload(encodedPayload, overrides) {
      return this.view.encodeCall.parseSetFeePayload(encodedPayload, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    parseSetValidPeriodPayload(encodedPayload, overrides) {
      return this.view.encodeCall.parseSetValidPeriodPayload(encodedPayload, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    parseUpgradeContractPayload(encodedPayload, overrides) {
      return this.view.encodeCall.parseUpgradeContractPayload(encodedPayload, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    priceFeedExists(id2, overrides) {
      return this.view.encodeCall.priceFeedExists(id2, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    proxiableUUID(overrides) {
      return this.view.encodeCall.proxiableUUID({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    pythUpgradableMagic(overrides) {
      return this.view.encodeCall.pythUpgradableMagic({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    queryPriceFeed(id2, overrides) {
      return this.view.encodeCall.queryPriceFeed(id2, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    renounceOwnership(overrides) {
      return this.view.encodeCall.renounceOwnership({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    singleUpdateFeeInWei(overrides) {
      return this.view.encodeCall.singleUpdateFeeInWei({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    transferOwnership(newOwner, overrides) {
      return this.view.encodeCall.transferOwnership(newOwner, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    updatePriceFeeds(updateData, overrides) {
      return this.view.encodeCall.updatePriceFeeds(updateData, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    updatePriceFeedsIfNecessary(updateData, priceIds, publishTimes, overrides) {
      return this.view.encodeCall.updatePriceFeedsIfNecessary(
        updateData,
        priceIds,
        publishTimes,
        {
          chainId: this.context.chainId.toString(),
          address: this.context.address,
          blockTag: this.context.getBlockTag(overrides)
        }
      );
    },
    upgradeTo(newImplementation, overrides) {
      return this.view.encodeCall.upgradeTo(newImplementation, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    upgradeToAndCall(newImplementation, data, overrides) {
      return this.view.encodeCall.upgradeToAndCall(newImplementation, data, {
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    validDataSources(overrides) {
      return this.view.encodeCall.validDataSources({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    validTimePeriodSeconds(overrides) {
      return this.view.encodeCall.validTimePeriodSeconds({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    version(overrides) {
      return this.view.encodeCall.version({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    },
    wormhole(overrides) {
      return this.view.encodeCall.wormhole({
        chainId: this.context.chainId.toString(),
        address: this.context.address,
        blockTag: this.context.getBlockTag(overrides)
      });
    }
  };
};
var PythEVMProcessor = class _PythEVMProcessor extends import_eth.BaseProcessor {
  onEventAdminChanged(handler, filter, fetchConfig, preprocessHandler) {
    if (!filter) {
      filter = templateContract.filters["AdminChanged(address,address)"](
        null,
        null
      );
    }
    return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
  }
  onEventBatchPriceFeedUpdate(handler, filter, fetchConfig, preprocessHandler) {
    if (!filter) {
      filter = templateContract.filters["BatchPriceFeedUpdate(uint16,uint64)"](
        null,
        null
      );
    }
    return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
  }
  onEventBeaconUpgraded(handler, filter, fetchConfig, preprocessHandler) {
    if (!filter) {
      filter = templateContract.filters["BeaconUpgraded(address)"](null);
    }
    return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
  }
  onEventContractUpgraded(handler, filter, fetchConfig, preprocessHandler) {
    if (!filter) {
      filter = templateContract.filters["ContractUpgraded(address,address)"](
        null,
        null
      );
    }
    return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
  }
  onEventDataSourcesSet(handler, filter, fetchConfig, preprocessHandler) {
    if (!filter) {
      filter = templateContract.filters["DataSourcesSet((uint16,bytes32)[],(uint16,bytes32)[])"](null, null);
    }
    return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
  }
  onEventFeeSet(handler, filter, fetchConfig, preprocessHandler) {
    if (!filter) {
      filter = templateContract.filters["FeeSet(uint256,uint256)"](null, null);
    }
    return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
  }
  onEventGovernanceDataSourceSet(handler, filter, fetchConfig, preprocessHandler) {
    if (!filter) {
      filter = templateContract.filters["GovernanceDataSourceSet((uint16,bytes32),(uint16,bytes32),uint64)"](null, null, null);
    }
    return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
  }
  onEventOwnershipTransferred(handler, filter, fetchConfig, preprocessHandler) {
    if (!filter) {
      filter = templateContract.filters["OwnershipTransferred(address,address)"](null, null);
    }
    return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
  }
  onEventPriceFeedUpdate(handler, filter, fetchConfig, preprocessHandler) {
    if (!filter) {
      filter = templateContract.filters["PriceFeedUpdate(bytes32,uint64,int64,uint64)"](null, null, null, null);
    }
    return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
  }
  onEventUpgraded(handler, filter, fetchConfig, preprocessHandler) {
    if (!filter) {
      filter = templateContract.filters["Upgraded(address)"](null);
    }
    return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
  }
  onEventValidPeriodSet(handler, filter, fetchConfig, preprocessHandler) {
    if (!filter) {
      filter = templateContract.filters["ValidPeriodSet(uint256,uint256)"](
        null,
        null
      );
    }
    return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
  }
  onCallChainId(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x9a8a0592",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallExecuteGovernanceInstruction(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0xb6ed701e",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallGetEmaPrice(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0xb5dcc911",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallGetEmaPriceNoOlderThan(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x711a2e28",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallGetEmaPriceUnsafe(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x9474f45b",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallGetPrice(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x31d98b3f",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallGetPriceNoOlderThan(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0xa4ae35e0",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallGetPriceUnsafe(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x96834ad3",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallGetUpdateFee(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0xd47eed45",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallGetValidTimePeriod(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0xe18910a3",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallGovernanceDataSource(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x426234e4",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallGovernanceDataSourceIndex(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x6c72f51b",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallHashDataSource(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x89a5bb4d",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallInitialize(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x146faf77",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallIsValidDataSource(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x437209a7",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallIsValidGovernanceDataSource(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x58c67635",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallLastExecutedGovernanceSequence(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x586d3cf8",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallLatestPriceInfoPublishTime(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x4c469d8c",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallOwner(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x8da5cb5b",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallParseAuthorizeGovernanceDataSourceTransferPayload(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0xd82d58a5",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallParseGovernanceInstruction(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x6b7f53ca",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallParsePriceFeedUpdates(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x4716e9c5",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallParseRequestGovernanceDataSourceTransferPayload(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x7b72bcae",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallParseSetDataSourcesPayload(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x87c5bd1b",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallParseSetFeePayload(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x4d7a734e",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallParseSetValidPeriodPayload(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x14dd317f",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallParseUpgradeContractPayload(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x8881016f",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallPriceFeedExists(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0xb5ec0261",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallProxiableUUID(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x52d1902d",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallPythUpgradableMagic(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0xe3795cc1",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallQueryPriceFeed(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0xcaaf43f1",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallRenounceOwnership(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x715018a6",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallSingleUpdateFeeInWei(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x48b6404d",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallTransferOwnership(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0xf2fde38b",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallUpdatePriceFeeds(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0xef9e5e28",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallUpdatePriceFeedsIfNecessary(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0xb9256d28",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallUpgradeTo(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x3659cfe6",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallUpgradeToAndCall(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x4f1ef286",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallValidDataSources(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0xa38d81c6",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallValidTimePeriodSeconds(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0xcb718a9b",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallVersion(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x54fd4d50",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  onCallWormhole(handler, fetchConfig, preprocessHandler) {
    return super.onEthTrace(
      "0x84acd1bb",
      handler,
      fetchConfig,
      preprocessHandler
    );
  }
  static filters = {
    AdminChanged(previousAdmin, newAdmin) {
      return templateContract.filters["AdminChanged(address,address)"](
        previousAdmin,
        newAdmin
      );
    },
    BatchPriceFeedUpdate(chainId, sequenceNumber) {
      return templateContract.filters["BatchPriceFeedUpdate(uint16,uint64)"](
        chainId,
        sequenceNumber
      );
    },
    BeaconUpgraded(beacon) {
      return templateContract.filters["BeaconUpgraded(address)"](beacon);
    },
    ContractUpgraded(oldImplementation, newImplementation) {
      return templateContract.filters["ContractUpgraded(address,address)"](
        oldImplementation,
        newImplementation
      );
    },
    DataSourcesSet(oldDataSources, newDataSources) {
      return templateContract.filters["DataSourcesSet((uint16,bytes32)[],(uint16,bytes32)[])"](oldDataSources, newDataSources);
    },
    FeeSet(oldFee, newFee) {
      return templateContract.filters["FeeSet(uint256,uint256)"](
        oldFee,
        newFee
      );
    },
    GovernanceDataSourceSet(oldDataSource, newDataSource, initialSequence) {
      return templateContract.filters["GovernanceDataSourceSet((uint16,bytes32),(uint16,bytes32),uint64)"](oldDataSource, newDataSource, initialSequence);
    },
    OwnershipTransferred(previousOwner, newOwner) {
      return templateContract.filters["OwnershipTransferred(address,address)"](
        previousOwner,
        newOwner
      );
    },
    PriceFeedUpdate(id2, publishTime, price6, conf) {
      return templateContract.filters["PriceFeedUpdate(bytes32,uint64,int64,uint64)"](id2, publishTime, price6, conf);
    },
    Upgraded(implementation) {
      return templateContract.filters["Upgraded(address)"](implementation);
    },
    ValidPeriodSet(oldValidPeriod, newValidPeriod) {
      return templateContract.filters["ValidPeriodSet(uint256,uint256)"](
        oldValidPeriod,
        newValidPeriod
      );
    }
  };
  CreateBoundContractView() {
    const view = getPythEVMContract(this.config.network, this.config.address);
    return new PythEVMBoundContractView(this.config.address, view);
  }
  static bind(options) {
    if (!options.name) {
      options.name = "PythEVM";
    }
    let processor = (0, import_eth.getProcessor)(options);
    if (!processor) {
      processor = new _PythEVMProcessor(options);
      (0, import_eth.addProcessor)(options, processor);
    }
    return processor;
  }
};
function getPythEVMContract(chainId, address) {
  let contract = (0, import_eth.getContractByABI)(
    "PythEVM",
    address,
    chainId
  );
  if (!contract) {
    const rawContract = PythEVM__factory.connect(address, (0, import_eth.getProvider)(chainId));
    contract = new PythEVMContractView(rawContract);
    (0, import_eth.addContractByABI)("PythEVM", address, chainId, contract);
  }
  return contract;
}

// src/types/eth/internal/pythevm-test-utils.ts
var import_eth2 = require("@sentio/sdk/eth");

// src/evm.ts
var import_sdk3 = require("@sentio/sdk");
var import_eth3 = require("@sentio/sdk/eth");
var commonOptions2 = { sparse: true };
var priceGauage2 = import_sdk3.Gauge.register("evm_price", commonOptions2);
var priceUnsafeGauage = import_sdk3.Gauge.register("evm_price_unsafe", commonOptions2);
var price_update_occur2 = import_sdk3.Gauge.register("price_update_occur", commonOptions2);
var batch_price_update_occur = import_sdk3.Gauge.register(
  "batch_price_update_occur",
  commonOptions2
);
var eth_balance = import_sdk3.Gauge.register("eth_balance", commonOptions2);
var price_update_counter2 = import_sdk3.Counter.register("price_update_counter", {
  resolutionConfig: {
    intervalInMinutes: 1
  }
});
var CHAIN_ADDRESS_MAP = /* @__PURE__ */ new Map([
  [import_eth3.EthChainId.ETHEREUM, "0x4305FB66699C3B2702D4d05CF36551390A4c69C6"],
  //ETH
  [import_eth3.EthChainId.OPTIMISM, "0xff1a0f4744e8582df1ae09d5611b887b6a12925c"],
  //Optimism
  [import_eth3.EthChainId.BINANCE, "0x4D7E825f80bDf85e913E0DD2A2D54927e9dE1594"],
  //BSC
  // [97, "0xd7308b14bf4008e7c7196ec35610b1427c5702ea"], //BSC testnet
  [import_eth3.EthChainId.POLYGON, "0xff1a0f4744e8582DF1aE09D5611b887B6a12925C"],
  //Polygon
  [import_eth3.EthChainId.ARBITRUM, "0xff1a0f4744e8582DF1aE09D5611b887B6a12925C"],
  //Arbitrum
  [import_eth3.EthChainId.FANTOM, "0xff1a0f4744e8582DF1aE09D5611b887B6a12925C"],
  //Fantom
  [import_eth3.EthChainId.AURORA, "0xF89C7b475821EC3fDC2dC8099032c05c6c0c9AB9"],
  //Aurora
  [import_eth3.EthChainId.KUCOIN, "0xE0d0e68297772Dd5a1f1D99897c581E2082dbA5B"],
  //KCC
  [import_eth3.EthChainId.AVALANCHE, "0x4305FB66699C3B2702D4d05CF36551390A4c69C6"],
  //Avalanche
  [import_eth3.EthChainId.CRONOS, "0xE0d0e68297772Dd5a1f1D99897c581E2082dbA5B"],
  //Cronos
  [import_eth3.EthChainId.POLYGON_ZKEVM, "0xC5E56d6b40F3e3B5fbfa266bCd35C37426537c65"],
  // Polygon zkEVM
  [import_eth3.EthChainId.ZKSYNC_ERA, "0xf087c864AEccFb6A2Bf1Af6A0382B0d0f6c5D834"],
  // ZKsync
  [import_eth3.EthChainId.CONFLUX, "0xe9d69CdD6Fe41e7B621B4A688C5D1a68cB5c8ADc"],
  // Conflux
  [import_eth3.EthChainId.MANTLE, "0xA2aa501b19aff244D90cc15a4Cf739D2725B5729"],
  // mantle
  [import_eth3.EthChainId.LINEA, "0xA2aa501b19aff244D90cc15a4Cf739D2725B5729"],
  // linea
  [import_eth3.EthChainId.BASE, "0x8250f4aF4B972684F7b336503E2D6dFeDeB1487a"],
  // base
  [import_eth3.EthChainId.BLAST, "0xA2aa501b19aff244D90cc15a4Cf739D2725B5729"],
  [import_eth3.EthChainId.MODE, "0xA2aa501b19aff244D90cc15a4Cf739D2725B5729"]
]);
var CHAIN_NATIVE_MAP = /* @__PURE__ */ new Map([
  [import_eth3.EthChainId.ETHEREUM, "Crypto.ETH/USD"],
  //ETH
  [import_eth3.EthChainId.OPTIMISM, "Crypto.OP/USD"],
  //Optimism
  [import_eth3.EthChainId.BINANCE, "Crypto.BNB/USD"],
  //BSC
  // ["0xd7308b14bf4008e7c7196ec35610b1427c5702ea".toLowerCase(), "Crypto.BNB/USD"], //BSC testnet
  [import_eth3.EthChainId.POLYGON, "Crypto.MATIC/USD"],
  //Polygon
  [import_eth3.EthChainId.ARBITRUM, "Crypto.ARB/USD"],
  //Arbitrum
  [import_eth3.EthChainId.FANTOM, "Crypto.FTM/USD"],
  //Fantom
  [import_eth3.EthChainId.AURORA, "Crypto.AURORA/USD"],
  //Aurora
  [import_eth3.EthChainId.KUCOIN, "Crypto.KCS/USD"],
  //KCC
  [import_eth3.EthChainId.AVALANCHE, "Crypto.AVAX/USD"],
  //Avalanche
  [import_eth3.EthChainId.CRONOS, "Crypto.CRO/USD"],
  //Cronos
  [import_eth3.EthChainId.POLYGON_ZKEVM, "Crypto.MATIC/USD"],
  // Polygon zk
  [import_eth3.EthChainId.ZKSYNC_ERA, "Crypto.ETH/USD"],
  // ZKsync
  [import_eth3.EthChainId.CONFLUX, "Crypto.CFX/USD"],
  // Conflux
  [import_eth3.EthChainId.MANTLE, "Crypto.MNT/USD"],
  // mantle
  [import_eth3.EthChainId.LINEA, "Crypto.ETH/USD"],
  // linea
  [import_eth3.EthChainId.BASE, "Crypto.ETH/USD"],
  // base
  [import_eth3.EthChainId.BLAST, "Crypto.ETH/USD"],
  // blast
  [import_eth3.EthChainId.MODE, "Crypto.ETH/USD"]
  // mode
]);
async function priceFeedUpdate(evt, ctx) {
  const price6 = evt.args.price;
  const chainId = ctx.chainId;
  const priceId = evt.args.id;
  const address = ctx.address.toLowerCase();
  const symbol = PRICE_MAP.get(priceId) || "not listed";
  const nativeSymbol = CHAIN_NATIVE_MAP.get(chainId) || "not found";
  var isNative;
  if (nativeSymbol == symbol) {
    isNative = "true";
  } else {
    isNative = "false";
  }
  try {
    const labels = { priceId, symbol, isNative };
    const pythContract = getPythEVMContract(ctx.chainId, ctx.address);
    const priceUnsafeStruct = await pythContract.getPriceUnsafe(priceId, {
      blockTag: evt.blockNumber
    });
    const priceUnsafe = (0, import_sdk3.scaleDown)(
      priceUnsafeStruct.price,
      -priceUnsafeStruct.expo
    );
    priceGauage2.record(ctx, price6, labels);
    priceUnsafeGauage.record(ctx, priceUnsafe, labels);
    price_update_occur2.record(ctx, ctx.timestamp.getTime(), labels);
    price_update_counter2.add(ctx, 1, labels);
    await recordGasUsage("priceFeedUpdate", evt.transactionHash, ctx);
  } catch (e) {
    console.log(ctx.chainId, priceId, ctx.address, evt.blockNumber, e);
  }
}
async function batchPriceUpdate(evt, ctx) {
  ctx.meter.Counter("batch_price_update_counter").add(1);
  batch_price_update_occur.record(ctx, 1);
  await recordGasUsage("batchPriceUpdate", evt.transactionHash, ctx);
  try {
    if (ctx.chainId == import_eth3.EthChainId.FANTOM) {
      const amount = await ctx.contract.provider.getBalance(
        ctx.address,
        ctx.blockNumber
      );
      eth_balance.record(ctx, amount);
    }
  } catch (e) {
    console.log("chainId" + ctx.chainId);
    console.log("blockNumber" + ctx.blockNumber);
    console.log(e);
    return;
  }
}
async function updatePriceFeeds(call, ctx) {
  const from = call.action.from;
  ctx.meter.Counter("update_price_feed_caller").add(1, { caller: from });
}
async function updatePriceFeedsIfNecessary(call, ctx) {
  const from = call.action.from;
  ctx.meter.Counter("update_price_feed_if_necessary_caller").add(1, { caller: from });
}
async function recordGasUsage(evt, hash, ctx) {
  try {
    const receipt = await ctx.contract.provider.getTransactionReceipt(hash);
    const gasUsed = receipt.gasUsed;
    const gasPrice = receipt.gasPrice.scaleDown(18);
    ctx.meter.Counter("gas_usage").add(gasUsed.asBigDecimal().multipliedBy(gasPrice).toNumber(), {
      event: evt
    });
  } catch (e) {
    console.log(e);
    return;
  }
}
async function blockHandler(block, ctx) {
  try {
    if (ctx.chainId == import_eth3.EthChainId.FANTOM) {
      const amount = await ctx.contract.provider.getBalance(
        ctx.address,
        ctx.blockNumber
      );
      eth_balance.record(ctx, amount);
    }
  } catch (e) {
    console.log("chainId" + ctx.chainId);
    console.log("blockNumber" + ctx.blockNumber);
    console.log(e);
    return;
  }
}
CHAIN_ADDRESS_MAP.forEach((addr, chainId) => {
  if (addr == "0xff1a0f4744e8582df1ae09d5611b887b6a12925c") {
    PythEVMProcessor.bind({
      address: addr,
      network: chainId,
      startBlock: 45722027
    }).onEventPriceFeedUpdate(priceFeedUpdate).onCallUpdatePriceFeeds(updatePriceFeeds).onCallUpdatePriceFeedsIfNecessary(updatePriceFeedsIfNecessary).onEventBatchPriceFeedUpdate(batchPriceUpdate).onTimeInterval(blockHandler, 60, 60 * 24);
  } else {
    PythEVMProcessor.bind({ address: addr, network: chainId }).onEventPriceFeedUpdate(priceFeedUpdate).onCallUpdatePriceFeeds(updatePriceFeeds).onCallUpdatePriceFeedsIfNecessary(updatePriceFeedsIfNecessary).onEventBatchPriceFeedUpdate(batchPriceUpdate).onTimeInterval(blockHandler, 60, 60 * 24);
  }
});

// src/types/sui/0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e.ts
var import_sui5 = require("@sentio/sdk/sui");

// ../../node_modules/@typemove/sui/dist/esm/models.js
var ZERO_ADDRESS = "0x0000000000000000000000000000000000000000000000000000000000000000";

// ../../node_modules/@typemove/sui/dist/esm/transaction.js
function isTransactionArgument(value) {
  if (typeof value !== "object")
    return false;
  if (value === null || value === void 0)
    return false;
  return value.$kind === "GasCoin" || value.$kind === "Result" || value.$kind === "NestedResult" || value.$kind === "Input";
}
function transactionArgumentOrObject(value, transactionBlock) {
  if (isTransactionArgument(value)) {
    return value;
  }
  return transactionBlock.object(value);
}
function transactionArgumentOrPure(value, transactionBlock) {
  if (isTransactionArgument(value)) {
    return value;
  }
  return typeof value == "string" ? transactionBlock.pure.string(value) : transactionBlock.pure.u64(value);
}
function transactionArgumentOrPureAddress(value, transactionBlock) {
  if (isTransactionArgument(value)) {
    return value;
  }
  return transactionBlock.pure.address(value);
}
function transactionArgumentOrPureU8(value, transactionBlock) {
  if (isTransactionArgument(value)) {
    return value;
  }
  return transactionBlock.pure.u8(value);
}
function transactionArgumentOrPureU16(value, transactionBlock) {
  if (isTransactionArgument(value)) {
    return value;
  }
  return transactionBlock.pure.u16(value);
}
function transactionArgumentOrPureU32(value, transactionBlock) {
  if (isTransactionArgument(value)) {
    return value;
  }
  return transactionBlock.pure.u32(value);
}
function transactionArgumentOrPureU64(value, transactionBlock) {
  if (isTransactionArgument(value)) {
    return value;
  }
  return transactionBlock.pure.u64(value);
}
function transactionArgumentOrPureU128(value, transactionBlock) {
  if (isTransactionArgument(value)) {
    return value;
  }
  return transactionBlock.pure.u128(value);
}
function transactionArgumentOrPureU256(value, transactionBlock) {
  if (isTransactionArgument(value)) {
    return value;
  }
  return transactionBlock.pure.u256(value);
}
function transactionArgumentOrPureBool(value, transactionBlock) {
  if (isTransactionArgument(value)) {
    return value;
  }
  return transactionBlock.pure.bool(value);
}
function transactionArgumentOrVec(value, transactionBlock) {
  if (isTransactionArgument(value)) {
    return value;
  }
  return transactionBlock.makeMoveVec({
    elements: value.map((a) => transactionBlock.object(a))
  });
}

// ../../node_modules/@mysten/sui/dist/esm/version.js
var PACKAGE_VERSION = "1.14.2";
var TARGETED_RPC_VERSION = "1.38.0";

// ../../node_modules/@mysten/sui/dist/esm/client/errors.js
var CODE_TO_ERROR_TYPE = {
  "-32700": "ParseError",
  "-32701": "OversizedRequest",
  "-32702": "OversizedResponse",
  "-32600": "InvalidRequest",
  "-32601": "MethodNotFound",
  "-32602": "InvalidParams",
  "-32603": "InternalError",
  "-32604": "ServerBusy",
  "-32000": "CallExecutionFailed",
  "-32001": "UnknownError",
  "-32003": "SubscriptionClosed",
  "-32004": "SubscriptionClosedWithError",
  "-32005": "BatchesNotSupported",
  "-32006": "TooManySubscriptions",
  "-32050": "TransientError",
  "-32002": "TransactionExecutionClientError"
};
var SuiHTTPTransportError = class extends Error {
};
var JsonRpcError = class extends SuiHTTPTransportError {
  constructor(message2, code) {
    super(message2);
    this.code = code;
    this.type = CODE_TO_ERROR_TYPE[code] ?? "ServerError";
  }
};
var SuiHTTPStatusError = class extends SuiHTTPTransportError {
  constructor(message2, status, statusText) {
    super(message2);
    this.status = status;
    this.statusText = statusText;
  }
};

// ../../node_modules/@mysten/sui/dist/esm/client/rpc-websocket-client.js
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});
var _requestId;
var _disconnects;
var _webSocket;
var _connectionPromise;
var _subscriptions;
var _pendingRequests;
var _WebsocketClient_instances;
var setupWebSocket_fn;
var reconnect_fn;
function getWebsocketUrl(httpUrl) {
  const url = new URL(httpUrl);
  url.protocol = url.protocol.replace("http", "ws");
  return url.toString();
}
var DEFAULT_CLIENT_OPTIONS = {
  // We fudge the typing because we also check for undefined in the constructor:
  WebSocketConstructor: typeof WebSocket !== "undefined" ? WebSocket : void 0,
  callTimeout: 3e4,
  reconnectTimeout: 3e3,
  maxReconnects: 5
};
var WebsocketClient = class {
  constructor(endpoint, options = {}) {
    __privateAdd(this, _WebsocketClient_instances);
    __privateAdd(this, _requestId, 0);
    __privateAdd(this, _disconnects, 0);
    __privateAdd(this, _webSocket, null);
    __privateAdd(this, _connectionPromise, null);
    __privateAdd(this, _subscriptions, /* @__PURE__ */ new Set());
    __privateAdd(this, _pendingRequests, /* @__PURE__ */ new Map());
    this.endpoint = endpoint;
    this.options = { ...DEFAULT_CLIENT_OPTIONS, ...options };
    if (!this.options.WebSocketConstructor) {
      throw new Error("Missing WebSocket constructor");
    }
    if (this.endpoint.startsWith("http")) {
      this.endpoint = getWebsocketUrl(this.endpoint);
    }
  }
  async makeRequest(method, params) {
    const webSocket = await __privateMethod(this, _WebsocketClient_instances, setupWebSocket_fn).call(this);
    return new Promise((resolve, reject) => {
      __privateSet(this, _requestId, __privateGet(this, _requestId) + 1);
      __privateGet(this, _pendingRequests).set(__privateGet(this, _requestId), {
        resolve,
        reject,
        timeout: setTimeout(() => {
          __privateGet(this, _pendingRequests).delete(__privateGet(this, _requestId));
          reject(new Error(`Request timeout: ${method}`));
        }, this.options.callTimeout)
      });
      webSocket.send(JSON.stringify({ jsonrpc: "2.0", id: __privateGet(this, _requestId), method, params }));
    }).then(({ error, result }) => {
      if (error) {
        throw new JsonRpcError(error.message, error.code);
      }
      return result;
    });
  }
  async subscribe(input) {
    const subscription = new RpcSubscription(input);
    __privateGet(this, _subscriptions).add(subscription);
    await subscription.subscribe(this);
    return () => subscription.unsubscribe(this);
  }
};
_requestId = /* @__PURE__ */ new WeakMap();
_disconnects = /* @__PURE__ */ new WeakMap();
_webSocket = /* @__PURE__ */ new WeakMap();
_connectionPromise = /* @__PURE__ */ new WeakMap();
_subscriptions = /* @__PURE__ */ new WeakMap();
_pendingRequests = /* @__PURE__ */ new WeakMap();
_WebsocketClient_instances = /* @__PURE__ */ new WeakSet();
setupWebSocket_fn = function() {
  if (__privateGet(this, _connectionPromise)) {
    return __privateGet(this, _connectionPromise);
  }
  __privateSet(this, _connectionPromise, new Promise((resolve) => {
    __privateGet(this, _webSocket)?.close();
    __privateSet(this, _webSocket, new this.options.WebSocketConstructor(this.endpoint));
    __privateGet(this, _webSocket).addEventListener("open", () => {
      __privateSet(this, _disconnects, 0);
      resolve(__privateGet(this, _webSocket));
    });
    __privateGet(this, _webSocket).addEventListener("close", () => {
      __privateWrapper(this, _disconnects)._++;
      if (__privateGet(this, _disconnects) <= this.options.maxReconnects) {
        setTimeout(() => {
          __privateMethod(this, _WebsocketClient_instances, reconnect_fn).call(this);
        }, this.options.reconnectTimeout);
      }
    });
    __privateGet(this, _webSocket).addEventListener("message", ({ data }) => {
      let json;
      try {
        json = JSON.parse(data);
      } catch (error) {
        console.error(new Error(`Failed to parse RPC message: ${data}`, { cause: error }));
        return;
      }
      if ("id" in json && json.id != null && __privateGet(this, _pendingRequests).has(json.id)) {
        const { resolve: resolve2, timeout } = __privateGet(this, _pendingRequests).get(json.id);
        clearTimeout(timeout);
        resolve2(json);
      } else if ("params" in json) {
        const { params } = json;
        __privateGet(this, _subscriptions).forEach((subscription) => {
          if (subscription.subscriptionId === params.subscription) {
            if (params.subscription === subscription.subscriptionId) {
              subscription.onMessage(params.result);
            }
          }
        });
      }
    });
  }));
  return __privateGet(this, _connectionPromise);
};
reconnect_fn = async function() {
  __privateGet(this, _webSocket)?.close();
  __privateSet(this, _connectionPromise, null);
  return Promise.allSettled(
    [...__privateGet(this, _subscriptions)].map((subscription) => subscription.subscribe(this))
  );
};
var RpcSubscription = class {
  constructor(input) {
    this.subscriptionId = null;
    this.subscribed = false;
    this.input = input;
  }
  onMessage(message2) {
    if (this.subscribed) {
      this.input.onMessage(message2);
    }
  }
  async unsubscribe(client) {
    const { subscriptionId } = this;
    this.subscribed = false;
    if (subscriptionId == null) return false;
    this.subscriptionId = null;
    return client.makeRequest(this.input.unsubscribe, [subscriptionId]);
  }
  async subscribe(client) {
    this.subscriptionId = null;
    this.subscribed = true;
    const newSubscriptionId = await client.makeRequest(
      this.input.method,
      this.input.params
    );
    if (this.subscribed) {
      this.subscriptionId = newSubscriptionId;
    }
  }
};

// ../../node_modules/@mysten/sui/dist/esm/client/http-transport.js
var __typeError2 = (msg) => {
  throw TypeError(msg);
};
var __accessCheck2 = (obj, member, msg) => member.has(obj) || __typeError2("Cannot " + msg);
var __privateGet2 = (obj, member, getter) => (__accessCheck2(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd2 = (obj, member, value) => member.has(obj) ? __typeError2("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet2 = (obj, member, value, setter) => (__accessCheck2(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod2 = (obj, member, method) => (__accessCheck2(obj, member, "access private method"), method);
var _requestId2;
var _options;
var _websocketClient;
var _SuiHTTPTransport_instances;
var getWebsocketClient_fn;
var SuiHTTPTransport = class {
  constructor(options) {
    __privateAdd2(this, _SuiHTTPTransport_instances);
    __privateAdd2(this, _requestId2, 0);
    __privateAdd2(this, _options);
    __privateAdd2(this, _websocketClient);
    __privateSet2(this, _options, options);
  }
  fetch(input, init) {
    const fetchFn = __privateGet2(this, _options).fetch ?? fetch;
    if (!fetchFn) {
      throw new Error(
        "The current environment does not support fetch, you can provide a fetch implementation in the options for SuiHTTPTransport."
      );
    }
    return fetchFn(input, init);
  }
  async request(input) {
    __privateSet2(this, _requestId2, __privateGet2(this, _requestId2) + 1);
    const res = await this.fetch(__privateGet2(this, _options).rpc?.url ?? __privateGet2(this, _options).url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Client-Sdk-Type": "typescript",
        "Client-Sdk-Version": PACKAGE_VERSION,
        "Client-Target-Api-Version": TARGETED_RPC_VERSION,
        ...__privateGet2(this, _options).rpc?.headers
      },
      body: JSON.stringify({
        jsonrpc: "2.0",
        id: __privateGet2(this, _requestId2),
        method: input.method,
        params: input.params
      })
    });
    if (!res.ok) {
      throw new SuiHTTPStatusError(
        `Unexpected status code: ${res.status}`,
        res.status,
        res.statusText
      );
    }
    const data = await res.json();
    if ("error" in data && data.error != null) {
      throw new JsonRpcError(data.error.message, data.error.code);
    }
    return data.result;
  }
  async subscribe(input) {
    const unsubscribe = await __privateMethod2(this, _SuiHTTPTransport_instances, getWebsocketClient_fn).call(this).subscribe(input);
    return async () => !!await unsubscribe();
  }
};
_requestId2 = /* @__PURE__ */ new WeakMap();
_options = /* @__PURE__ */ new WeakMap();
_websocketClient = /* @__PURE__ */ new WeakMap();
_SuiHTTPTransport_instances = /* @__PURE__ */ new WeakSet();
getWebsocketClient_fn = function() {
  if (!__privateGet2(this, _websocketClient)) {
    const WebSocketConstructor = __privateGet2(this, _options).WebSocketConstructor ?? WebSocket;
    if (!WebSocketConstructor) {
      throw new Error(
        "The current environment does not support WebSocket, you can provide a WebSocketConstructor in the options for SuiHTTPTransport."
      );
    }
    __privateSet2(this, _websocketClient, new WebsocketClient(
      __privateGet2(this, _options).websocket?.url ?? __privateGet2(this, _options).url,
      {
        WebSocketConstructor,
        ...__privateGet2(this, _options).websocket
      }
    ));
  }
  return __privateGet2(this, _websocketClient);
};

// ../../node_modules/@mysten/bcs/node_modules/base-x/src/esm/index.js
function base(ALPHABET2) {
  if (ALPHABET2.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  const BASE_MAP = new Uint8Array(256);
  for (let j = 0; j < BASE_MAP.length; j++) {
    BASE_MAP[j] = 255;
  }
  for (let i = 0; i < ALPHABET2.length; i++) {
    const x = ALPHABET2.charAt(i);
    const xc = x.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x + " is ambiguous");
    }
    BASE_MAP[xc] = i;
  }
  const BASE = ALPHABET2.length;
  const LEADER = ALPHABET2.charAt(0);
  const FACTOR = Math.log(BASE) / Math.log(256);
  const iFACTOR = Math.log(256) / Math.log(BASE);
  function encode(source) {
    if (source instanceof Uint8Array) {
    } else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    let zeroes = 0;
    let length = 0;
    let pbegin = 0;
    const pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    const size = (pend - pbegin) * iFACTOR + 1 >>> 0;
    const b58 = new Uint8Array(size);
    while (pbegin !== pend) {
      let carry = source[pbegin];
      let i = 0;
      for (let it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length = i;
      pbegin++;
    }
    let it2 = size - length;
    while (it2 !== size && b58[it2] === 0) {
      it2++;
    }
    let str = LEADER.repeat(zeroes);
    for (; it2 < size; ++it2) {
      str += ALPHABET2.charAt(b58[it2]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    let psz = 0;
    let zeroes = 0;
    let length = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    const size = (source.length - psz) * FACTOR + 1 >>> 0;
    const b256 = new Uint8Array(size);
    while (source[psz]) {
      let carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      let i = 0;
      for (let it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length = i;
      psz++;
    }
    let it4 = size - length;
    while (it4 !== size && b256[it4] === 0) {
      it4++;
    }
    const vch = new Uint8Array(zeroes + (size - it4));
    let j = zeroes;
    while (it4 !== size) {
      vch[j++] = b256[it4++];
    }
    return vch;
  }
  function decode(string2) {
    const buffer = decodeUnsafe(string2);
    if (buffer) {
      return buffer;
    }
    throw new Error("Non-base" + BASE + " character");
  }
  return {
    encode,
    decodeUnsafe,
    decode
  };
}
var esm_default = base;

// ../../node_modules/@mysten/bcs/node_modules/bs58/src/esm/index.js
var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var esm_default2 = esm_default(ALPHABET);

// ../../node_modules/@mysten/bcs/dist/esm/b58.js
var toBase58 = (buffer) => esm_default2.encode(buffer);
var fromBase58 = (str) => esm_default2.decode(str);

// ../../node_modules/@mysten/bcs/dist/esm/b64.js
function fromBase64(base64String2) {
  return Uint8Array.from(atob(base64String2), (char) => char.charCodeAt(0));
}
var CHUNK_SIZE = 8192;
function toBase64(bytes4) {
  if (bytes4.length < CHUNK_SIZE) {
    return btoa(String.fromCharCode(...bytes4));
  }
  let output3 = "";
  for (var i = 0; i < bytes4.length; i += CHUNK_SIZE) {
    const chunk2 = bytes4.slice(i, i + CHUNK_SIZE);
    output3 += String.fromCharCode(...chunk2);
  }
  return btoa(output3);
}

// ../../node_modules/@mysten/bcs/dist/esm/hex.js
function fromHex(hexStr) {
  const normalized = hexStr.startsWith("0x") ? hexStr.slice(2) : hexStr;
  const padded = normalized.length % 2 === 0 ? normalized : `0${normalized}}`;
  const intArr = padded.match(/.{2}/g)?.map((byte) => parseInt(byte, 16)) ?? [];
  return Uint8Array.from(intArr);
}
function toHex(bytes4) {
  return bytes4.reduce((str, byte) => str + byte.toString(16).padStart(2, "0"), "");
}

// ../../node_modules/@mysten/bcs/dist/esm/uleb.js
function ulebEncode(num) {
  let arr = [];
  let len = 0;
  if (num === 0) {
    return [0];
  }
  while (num > 0) {
    arr[len] = num & 127;
    if (num >>= 7) {
      arr[len] |= 128;
    }
    len += 1;
  }
  return arr;
}
function ulebDecode(arr) {
  let total = 0;
  let shift = 0;
  let len = 0;
  while (true) {
    let byte = arr[len];
    len += 1;
    total |= (byte & 127) << shift;
    if ((byte & 128) === 0) {
      break;
    }
    shift += 7;
  }
  return {
    value: total,
    length: len
  };
}

// ../../node_modules/@mysten/bcs/dist/esm/reader.js
var BcsReader = class {
  /**
   * @param {Uint8Array} data Data to use as a buffer.
   */
  constructor(data) {
    this.bytePosition = 0;
    this.dataView = new DataView(data.buffer);
  }
  /**
   * Shift current cursor position by `bytes`.
   *
   * @param {Number} bytes Number of bytes to
   * @returns {this} Self for possible chaining.
   */
  shift(bytes4) {
    this.bytePosition += bytes4;
    return this;
  }
  /**
   * Read U8 value from the buffer and shift cursor by 1.
   * @returns
   */
  read8() {
    let value = this.dataView.getUint8(this.bytePosition);
    this.shift(1);
    return value;
  }
  /**
   * Read U16 value from the buffer and shift cursor by 2.
   * @returns
   */
  read16() {
    let value = this.dataView.getUint16(this.bytePosition, true);
    this.shift(2);
    return value;
  }
  /**
   * Read U32 value from the buffer and shift cursor by 4.
   * @returns
   */
  read32() {
    let value = this.dataView.getUint32(this.bytePosition, true);
    this.shift(4);
    return value;
  }
  /**
   * Read U64 value from the buffer and shift cursor by 8.
   * @returns
   */
  read64() {
    let value1 = this.read32();
    let value2 = this.read32();
    let result = value2.toString(16) + value1.toString(16).padStart(8, "0");
    return BigInt("0x" + result).toString(10);
  }
  /**
   * Read U128 value from the buffer and shift cursor by 16.
   */
  read128() {
    let value1 = BigInt(this.read64());
    let value2 = BigInt(this.read64());
    let result = value2.toString(16) + value1.toString(16).padStart(16, "0");
    return BigInt("0x" + result).toString(10);
  }
  /**
   * Read U128 value from the buffer and shift cursor by 32.
   * @returns
   */
  read256() {
    let value1 = BigInt(this.read128());
    let value2 = BigInt(this.read128());
    let result = value2.toString(16) + value1.toString(16).padStart(32, "0");
    return BigInt("0x" + result).toString(10);
  }
  /**
   * Read `num` number of bytes from the buffer and shift cursor by `num`.
   * @param num Number of bytes to read.
   */
  readBytes(num) {
    let start = this.bytePosition + this.dataView.byteOffset;
    let value = new Uint8Array(this.dataView.buffer, start, num);
    this.shift(num);
    return value;
  }
  /**
   * Read ULEB value - an integer of varying size. Used for enum indexes and
   * vector lengths.
   * @returns {Number} The ULEB value.
   */
  readULEB() {
    let start = this.bytePosition + this.dataView.byteOffset;
    let buffer = new Uint8Array(this.dataView.buffer, start);
    let { value, length } = ulebDecode(buffer);
    this.shift(length);
    return value;
  }
  /**
   * Read a BCS vector: read a length and then apply function `cb` X times
   * where X is the length of the vector, defined as ULEB in BCS bytes.
   * @param cb Callback to process elements of vector.
   * @returns {Array<Any>} Array of the resulting values, returned by callback.
   */
  readVec(cb) {
    let length = this.readULEB();
    let result = [];
    for (let i = 0; i < length; i++) {
      result.push(cb(this, i, length));
    }
    return result;
  }
};

// ../../node_modules/@mysten/bcs/dist/esm/utils.js
function encodeStr(data, encoding) {
  switch (encoding) {
    case "base58":
      return toBase58(data);
    case "base64":
      return toBase64(data);
    case "hex":
      return toHex(data);
    default:
      throw new Error("Unsupported encoding, supported values are: base64, hex");
  }
}
function splitGenericParameters(str, genericSeparators = ["<", ">"]) {
  const [left, right] = genericSeparators;
  const tok = [];
  let word = "";
  let nestedAngleBrackets = 0;
  for (let i = 0; i < str.length; i++) {
    const char = str[i];
    if (char === left) {
      nestedAngleBrackets++;
    }
    if (char === right) {
      nestedAngleBrackets--;
    }
    if (nestedAngleBrackets === 0 && char === ",") {
      tok.push(word.trim());
      word = "";
      continue;
    }
    word += char;
  }
  tok.push(word.trim());
  return tok;
}

// ../../node_modules/@mysten/bcs/dist/esm/writer.js
var BcsWriter = class {
  constructor({
    initialSize = 1024,
    maxSize = Infinity,
    allocateSize = 1024
  } = {}) {
    this.bytePosition = 0;
    this.size = initialSize;
    this.maxSize = maxSize;
    this.allocateSize = allocateSize;
    this.dataView = new DataView(new ArrayBuffer(initialSize));
  }
  ensureSizeOrGrow(bytes4) {
    const requiredSize = this.bytePosition + bytes4;
    if (requiredSize > this.size) {
      const nextSize = Math.min(this.maxSize, this.size + this.allocateSize);
      if (requiredSize > nextSize) {
        throw new Error(
          `Attempting to serialize to BCS, but buffer does not have enough size. Allocated size: ${this.size}, Max size: ${this.maxSize}, Required size: ${requiredSize}`
        );
      }
      this.size = nextSize;
      const nextBuffer = new ArrayBuffer(this.size);
      new Uint8Array(nextBuffer).set(new Uint8Array(this.dataView.buffer));
      this.dataView = new DataView(nextBuffer);
    }
  }
  /**
   * Shift current cursor position by `bytes`.
   *
   * @param {Number} bytes Number of bytes to
   * @returns {this} Self for possible chaining.
   */
  shift(bytes4) {
    this.bytePosition += bytes4;
    return this;
  }
  /**
   * Write a U8 value into a buffer and shift cursor position by 1.
   * @param {Number} value Value to write.
   * @returns {this}
   */
  write8(value) {
    this.ensureSizeOrGrow(1);
    this.dataView.setUint8(this.bytePosition, Number(value));
    return this.shift(1);
  }
  /**
   * Write a U16 value into a buffer and shift cursor position by 2.
   * @param {Number} value Value to write.
   * @returns {this}
   */
  write16(value) {
    this.ensureSizeOrGrow(2);
    this.dataView.setUint16(this.bytePosition, Number(value), true);
    return this.shift(2);
  }
  /**
   * Write a U32 value into a buffer and shift cursor position by 4.
   * @param {Number} value Value to write.
   * @returns {this}
   */
  write32(value) {
    this.ensureSizeOrGrow(4);
    this.dataView.setUint32(this.bytePosition, Number(value), true);
    return this.shift(4);
  }
  /**
   * Write a U64 value into a buffer and shift cursor position by 8.
   * @param {bigint} value Value to write.
   * @returns {this}
   */
  write64(value) {
    toLittleEndian(BigInt(value), 8).forEach((el) => this.write8(el));
    return this;
  }
  /**
   * Write a U128 value into a buffer and shift cursor position by 16.
   *
   * @param {bigint} value Value to write.
   * @returns {this}
   */
  write128(value) {
    toLittleEndian(BigInt(value), 16).forEach((el) => this.write8(el));
    return this;
  }
  /**
   * Write a U256 value into a buffer and shift cursor position by 16.
   *
   * @param {bigint} value Value to write.
   * @returns {this}
   */
  write256(value) {
    toLittleEndian(BigInt(value), 32).forEach((el) => this.write8(el));
    return this;
  }
  /**
   * Write a ULEB value into a buffer and shift cursor position by number of bytes
   * written.
   * @param {Number} value Value to write.
   * @returns {this}
   */
  writeULEB(value) {
    ulebEncode(value).forEach((el) => this.write8(el));
    return this;
  }
  /**
   * Write a vector into a buffer by first writing the vector length and then calling
   * a callback on each passed value.
   *
   * @param {Array<Any>} vector Array of elements to write.
   * @param {WriteVecCb} cb Callback to call on each element of the vector.
   * @returns {this}
   */
  writeVec(vector, cb) {
    this.writeULEB(vector.length);
    Array.from(vector).forEach((el, i) => cb(this, el, i, vector.length));
    return this;
  }
  /**
   * Adds support for iterations over the object.
   * @returns {Uint8Array}
   */
  *[Symbol.iterator]() {
    for (let i = 0; i < this.bytePosition; i++) {
      yield this.dataView.getUint8(i);
    }
    return this.toBytes();
  }
  /**
   * Get underlying buffer taking only value bytes (in case initial buffer size was bigger).
   * @returns {Uint8Array} Resulting bcs.
   */
  toBytes() {
    return new Uint8Array(this.dataView.buffer.slice(0, this.bytePosition));
  }
  /**
   * Represent data as 'hex' or 'base64'
   * @param encoding Encoding to use: 'base64' or 'hex'
   */
  toString(encoding) {
    return encodeStr(this.toBytes(), encoding);
  }
};
function toLittleEndian(bigint2, size) {
  let result = new Uint8Array(size);
  let i = 0;
  while (bigint2 > 0) {
    result[i] = Number(bigint2 % BigInt(256));
    bigint2 = bigint2 / BigInt(256);
    i += 1;
  }
  return result;
}

// ../../node_modules/@mysten/bcs/dist/esm/bcs-type.js
var __typeError3 = (msg) => {
  throw TypeError(msg);
};
var __accessCheck3 = (obj, member, msg) => member.has(obj) || __typeError3("Cannot " + msg);
var __privateGet3 = (obj, member, getter) => (__accessCheck3(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd3 = (obj, member, value) => member.has(obj) ? __typeError3("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet3 = (obj, member, value, setter) => (__accessCheck3(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var _write;
var _serialize;
var _schema;
var _bytes;
var _BcsType = class _BcsType2 {
  constructor(options) {
    __privateAdd3(this, _write);
    __privateAdd3(this, _serialize);
    this.name = options.name;
    this.read = options.read;
    this.serializedSize = options.serializedSize ?? (() => null);
    __privateSet3(this, _write, options.write);
    __privateSet3(this, _serialize, options.serialize ?? ((value, options2) => {
      const writer = new BcsWriter({
        initialSize: this.serializedSize(value) ?? void 0,
        ...options2
      });
      __privateGet3(this, _write).call(this, value, writer);
      return writer.toBytes();
    }));
    this.validate = options.validate ?? (() => {
    });
  }
  write(value, writer) {
    this.validate(value);
    __privateGet3(this, _write).call(this, value, writer);
  }
  serialize(value, options) {
    this.validate(value);
    return new SerializedBcs(this, __privateGet3(this, _serialize).call(this, value, options));
  }
  parse(bytes4) {
    const reader = new BcsReader(bytes4);
    return this.read(reader);
  }
  fromHex(hex) {
    return this.parse(fromHex(hex));
  }
  fromBase58(b64) {
    return this.parse(fromBase58(b64));
  }
  fromBase64(b64) {
    return this.parse(fromBase64(b64));
  }
  transform({
    name,
    input,
    output: output3,
    validate: validate2
  }) {
    return new _BcsType2({
      name: name ?? this.name,
      read: (reader) => output3(this.read(reader)),
      write: (value, writer) => __privateGet3(this, _write).call(this, input(value), writer),
      serializedSize: (value) => this.serializedSize(input(value)),
      serialize: (value, options) => __privateGet3(this, _serialize).call(this, input(value), options),
      validate: (value) => {
        validate2?.(value);
        this.validate(input(value));
      }
    });
  }
};
_write = /* @__PURE__ */ new WeakMap();
_serialize = /* @__PURE__ */ new WeakMap();
var BcsType = _BcsType;
var SERIALIZED_BCS_BRAND = Symbol.for("@mysten/serialized-bcs");
function isSerializedBcs(obj) {
  return !!obj && typeof obj === "object" && obj[SERIALIZED_BCS_BRAND] === true;
}
var SerializedBcs = class {
  constructor(type, schema) {
    __privateAdd3(this, _schema);
    __privateAdd3(this, _bytes);
    __privateSet3(this, _schema, type);
    __privateSet3(this, _bytes, schema);
  }
  // Used to brand SerializedBcs so that they can be identified, even between multiple copies
  // of the @mysten/bcs package are installed
  get [SERIALIZED_BCS_BRAND]() {
    return true;
  }
  toBytes() {
    return __privateGet3(this, _bytes);
  }
  toHex() {
    return toHex(__privateGet3(this, _bytes));
  }
  toBase64() {
    return toBase64(__privateGet3(this, _bytes));
  }
  toBase58() {
    return toBase58(__privateGet3(this, _bytes));
  }
  parse() {
    return __privateGet3(this, _schema).parse(__privateGet3(this, _bytes));
  }
};
_schema = /* @__PURE__ */ new WeakMap();
_bytes = /* @__PURE__ */ new WeakMap();
function fixedSizeBcsType({
  size,
  ...options
}) {
  return new BcsType({
    ...options,
    serializedSize: () => size
  });
}
function uIntBcsType({
  readMethod,
  writeMethod,
  ...options
}) {
  return fixedSizeBcsType({
    ...options,
    read: (reader) => reader[readMethod](),
    write: (value, writer) => writer[writeMethod](value),
    validate: (value) => {
      if (value < 0 || value > options.maxValue) {
        throw new TypeError(
          `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`
        );
      }
      options.validate?.(value);
    }
  });
}
function bigUIntBcsType({
  readMethod,
  writeMethod,
  ...options
}) {
  return fixedSizeBcsType({
    ...options,
    read: (reader) => reader[readMethod](),
    write: (value, writer) => writer[writeMethod](BigInt(value)),
    validate: (val) => {
      const value = BigInt(val);
      if (value < 0 || value > options.maxValue) {
        throw new TypeError(
          `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`
        );
      }
      options.validate?.(value);
    }
  });
}
function dynamicSizeBcsType({
  serialize,
  ...options
}) {
  const type = new BcsType({
    ...options,
    serialize,
    write: (value, writer) => {
      for (const byte of type.serialize(value).toBytes()) {
        writer.write8(byte);
      }
    }
  });
  return type;
}
function stringLikeBcsType({
  toBytes: toBytes3,
  fromBytes,
  ...options
}) {
  return new BcsType({
    ...options,
    read: (reader) => {
      const length = reader.readULEB();
      const bytes4 = reader.readBytes(length);
      return fromBytes(bytes4);
    },
    write: (hex, writer) => {
      const bytes4 = toBytes3(hex);
      writer.writeULEB(bytes4.length);
      for (let i = 0; i < bytes4.length; i++) {
        writer.write8(bytes4[i]);
      }
    },
    serialize: (value) => {
      const bytes4 = toBytes3(value);
      const size = ulebEncode(bytes4.length);
      const result = new Uint8Array(size.length + bytes4.length);
      result.set(size, 0);
      result.set(bytes4, size.length);
      return result;
    },
    validate: (value) => {
      if (typeof value !== "string") {
        throw new TypeError(`Invalid ${options.name} value: ${value}. Expected string`);
      }
      options.validate?.(value);
    }
  });
}
function lazyBcsType(cb) {
  let lazyType = null;
  function getType() {
    if (!lazyType) {
      lazyType = cb();
    }
    return lazyType;
  }
  return new BcsType({
    name: "lazy",
    read: (data) => getType().read(data),
    serializedSize: (value) => getType().serializedSize(value),
    write: (value, writer) => getType().write(value, writer),
    serialize: (value, options) => getType().serialize(value, options).toBytes()
  });
}

// ../../node_modules/@mysten/bcs/dist/esm/bcs.js
var bcs = {
  /**
   * Creates a BcsType that can be used to read and write an 8-bit unsigned integer.
   * @example
   * bcs.u8().serialize(255).toBytes() // Uint8Array [ 255 ]
   */
  u8(options) {
    return uIntBcsType({
      name: "u8",
      readMethod: "read8",
      writeMethod: "write8",
      size: 1,
      maxValue: 2 ** 8 - 1,
      ...options
    });
  },
  /**
   * Creates a BcsType that can be used to read and write a 16-bit unsigned integer.
   * @example
   * bcs.u16().serialize(65535).toBytes() // Uint8Array [ 255, 255 ]
   */
  u16(options) {
    return uIntBcsType({
      name: "u16",
      readMethod: "read16",
      writeMethod: "write16",
      size: 2,
      maxValue: 2 ** 16 - 1,
      ...options
    });
  },
  /**
   * Creates a BcsType that can be used to read and write a 32-bit unsigned integer.
   * @example
   * bcs.u32().serialize(4294967295).toBytes() // Uint8Array [ 255, 255, 255, 255 ]
   */
  u32(options) {
    return uIntBcsType({
      name: "u32",
      readMethod: "read32",
      writeMethod: "write32",
      size: 4,
      maxValue: 2 ** 32 - 1,
      ...options
    });
  },
  /**
   * Creates a BcsType that can be used to read and write a 64-bit unsigned integer.
   * @example
   * bcs.u64().serialize(1).toBytes() // Uint8Array [ 1, 0, 0, 0, 0, 0, 0, 0 ]
   */
  u64(options) {
    return bigUIntBcsType({
      name: "u64",
      readMethod: "read64",
      writeMethod: "write64",
      size: 8,
      maxValue: 2n ** 64n - 1n,
      ...options
    });
  },
  /**
   * Creates a BcsType that can be used to read and write a 128-bit unsigned integer.
   * @example
   * bcs.u128().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]
   */
  u128(options) {
    return bigUIntBcsType({
      name: "u128",
      readMethod: "read128",
      writeMethod: "write128",
      size: 16,
      maxValue: 2n ** 128n - 1n,
      ...options
    });
  },
  /**
   * Creates a BcsType that can be used to read and write a 256-bit unsigned integer.
   * @example
   * bcs.u256().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]
   */
  u256(options) {
    return bigUIntBcsType({
      name: "u256",
      readMethod: "read256",
      writeMethod: "write256",
      size: 32,
      maxValue: 2n ** 256n - 1n,
      ...options
    });
  },
  /**
   * Creates a BcsType that can be used to read and write boolean values.
   * @example
   * bcs.bool().serialize(true).toBytes() // Uint8Array [ 1 ]
   */
  bool(options) {
    return fixedSizeBcsType({
      name: "bool",
      size: 1,
      read: (reader) => reader.read8() === 1,
      write: (value, writer) => writer.write8(value ? 1 : 0),
      ...options,
      validate: (value) => {
        options?.validate?.(value);
        if (typeof value !== "boolean") {
          throw new TypeError(`Expected boolean, found ${typeof value}`);
        }
      }
    });
  },
  /**
   * Creates a BcsType that can be used to read and write unsigned LEB encoded integers
   * @example
   *
   */
  uleb128(options) {
    return dynamicSizeBcsType({
      name: "uleb128",
      read: (reader) => reader.readULEB(),
      serialize: (value) => {
        return Uint8Array.from(ulebEncode(value));
      },
      ...options
    });
  },
  /**
   * Creates a BcsType representing a fixed length byte array
   * @param size The number of bytes this types represents
   * @example
   * bcs.bytes(3).serialize(new Uint8Array([1, 2, 3])).toBytes() // Uint8Array [1, 2, 3]
   */
  bytes(size, options) {
    return fixedSizeBcsType({
      name: `bytes[${size}]`,
      size,
      read: (reader) => reader.readBytes(size),
      write: (value, writer) => {
        for (let i = 0; i < size; i++) {
          writer.write8(value[i] ?? 0);
        }
      },
      ...options,
      validate: (value) => {
        options?.validate?.(value);
        if (!value || typeof value !== "object" || !("length" in value)) {
          throw new TypeError(`Expected array, found ${typeof value}`);
        }
        if (value.length !== size) {
          throw new TypeError(`Expected array of length ${size}, found ${value.length}`);
        }
      }
    });
  },
  /**
   * Creates a BcsType that can ser/de string values.  Strings will be UTF-8 encoded
   * @example
   * bcs.string().serialize('a').toBytes() // Uint8Array [ 1, 97 ]
   */
  string(options) {
    return stringLikeBcsType({
      name: "string",
      toBytes: (value) => new TextEncoder().encode(value),
      fromBytes: (bytes4) => new TextDecoder().decode(bytes4),
      ...options
    });
  },
  /**
   * Creates a BcsType that represents a fixed length array of a given type
   * @param size The number of elements in the array
   * @param type The BcsType of each element in the array
   * @example
   * bcs.fixedArray(3, bcs.u8()).serialize([1, 2, 3]).toBytes() // Uint8Array [ 1, 2, 3 ]
   */
  fixedArray(size, type, options) {
    return new BcsType({
      name: `${type.name}[${size}]`,
      read: (reader) => {
        const result = new Array(size);
        for (let i = 0; i < size; i++) {
          result[i] = type.read(reader);
        }
        return result;
      },
      write: (value, writer) => {
        for (const item of value) {
          type.write(item, writer);
        }
      },
      ...options,
      validate: (value) => {
        options?.validate?.(value);
        if (!value || typeof value !== "object" || !("length" in value)) {
          throw new TypeError(`Expected array, found ${typeof value}`);
        }
        if (value.length !== size) {
          throw new TypeError(`Expected array of length ${size}, found ${value.length}`);
        }
      }
    });
  },
  /**
   * Creates a BcsType representing an optional value
   * @param type The BcsType of the optional value
   * @example
   * bcs.option(bcs.u8()).serialize(null).toBytes() // Uint8Array [ 0 ]
   * bcs.option(bcs.u8()).serialize(1).toBytes() // Uint8Array [ 1, 1 ]
   */
  option(type) {
    return bcs.enum(`Option<${type.name}>`, {
      None: null,
      Some: type
    }).transform({
      input: (value) => {
        if (value == null) {
          return { None: true };
        }
        return { Some: value };
      },
      output: (value) => {
        if (value.$kind === "Some") {
          return value.Some;
        }
        return null;
      }
    });
  },
  /**
   * Creates a BcsType representing a variable length vector of a given type
   * @param type The BcsType of each element in the vector
   *
   * @example
   * bcs.vector(bcs.u8()).toBytes([1, 2, 3]) // Uint8Array [ 3, 1, 2, 3 ]
   */
  vector(type, options) {
    return new BcsType({
      name: `vector<${type.name}>`,
      read: (reader) => {
        const length = reader.readULEB();
        const result = new Array(length);
        for (let i = 0; i < length; i++) {
          result[i] = type.read(reader);
        }
        return result;
      },
      write: (value, writer) => {
        writer.writeULEB(value.length);
        for (const item of value) {
          type.write(item, writer);
        }
      },
      ...options,
      validate: (value) => {
        options?.validate?.(value);
        if (!value || typeof value !== "object" || !("length" in value)) {
          throw new TypeError(`Expected array, found ${typeof value}`);
        }
      }
    });
  },
  /**
   * Creates a BcsType representing a tuple of a given set of types
   * @param types The BcsTypes for each element in the tuple
   *
   * @example
   * const tuple = bcs.tuple([bcs.u8(), bcs.string(), bcs.bool()])
   * tuple.serialize([1, 'a', true]).toBytes() // Uint8Array [ 1, 1, 97, 1 ]
   */
  tuple(types, options) {
    return new BcsType({
      name: `(${types.map((t) => t.name).join(", ")})`,
      serializedSize: (values) => {
        let total = 0;
        for (let i = 0; i < types.length; i++) {
          const size = types[i].serializedSize(values[i]);
          if (size == null) {
            return null;
          }
          total += size;
        }
        return total;
      },
      read: (reader) => {
        const result = [];
        for (const type of types) {
          result.push(type.read(reader));
        }
        return result;
      },
      write: (value, writer) => {
        for (let i = 0; i < types.length; i++) {
          types[i].write(value[i], writer);
        }
      },
      ...options,
      validate: (value) => {
        options?.validate?.(value);
        if (!Array.isArray(value)) {
          throw new TypeError(`Expected array, found ${typeof value}`);
        }
        if (value.length !== types.length) {
          throw new TypeError(`Expected array of length ${types.length}, found ${value.length}`);
        }
      }
    });
  },
  /**
   * Creates a BcsType representing a struct of a given set of fields
   * @param name The name of the struct
   * @param fields The fields of the struct. The order of the fields affects how data is serialized and deserialized
   *
   * @example
   * const struct = bcs.struct('MyStruct', {
   *  a: bcs.u8(),
   *  b: bcs.string(),
   * })
   * struct.serialize({ a: 1, b: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]
   */
  struct(name, fields, options) {
    const canonicalOrder = Object.entries(fields);
    return new BcsType({
      name,
      serializedSize: (values) => {
        let total = 0;
        for (const [field, type] of canonicalOrder) {
          const size = type.serializedSize(values[field]);
          if (size == null) {
            return null;
          }
          total += size;
        }
        return total;
      },
      read: (reader) => {
        const result = {};
        for (const [field, type] of canonicalOrder) {
          result[field] = type.read(reader);
        }
        return result;
      },
      write: (value, writer) => {
        for (const [field, type] of canonicalOrder) {
          type.write(value[field], writer);
        }
      },
      ...options,
      validate: (value) => {
        options?.validate?.(value);
        if (typeof value !== "object" || value == null) {
          throw new TypeError(`Expected object, found ${typeof value}`);
        }
      }
    });
  },
  /**
   * Creates a BcsType representing an enum of a given set of options
   * @param name The name of the enum
   * @param values The values of the enum. The order of the values affects how data is serialized and deserialized.
   * null can be used to represent a variant with no data.
   *
   * @example
   * const enum = bcs.enum('MyEnum', {
   *   A: bcs.u8(),
   *   B: bcs.string(),
   *   C: null,
   * })
   * enum.serialize({ A: 1 }).toBytes() // Uint8Array [ 0, 1 ]
   * enum.serialize({ B: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]
   * enum.serialize({ C: true }).toBytes() // Uint8Array [ 2 ]
   */
  enum(name, values, options) {
    const canonicalOrder = Object.entries(values);
    return new BcsType({
      name,
      read: (reader) => {
        const index = reader.readULEB();
        const enumEntry = canonicalOrder[index];
        if (!enumEntry) {
          throw new TypeError(`Unknown value ${index} for enum ${name}`);
        }
        const [kind, type] = enumEntry;
        return {
          [kind]: type?.read(reader) ?? true,
          $kind: kind
        };
      },
      write: (value, writer) => {
        const [name2, val] = Object.entries(value).filter(
          ([name3]) => Object.hasOwn(values, name3)
        )[0];
        for (let i = 0; i < canonicalOrder.length; i++) {
          const [optionName, optionType] = canonicalOrder[i];
          if (optionName === name2) {
            writer.writeULEB(i);
            optionType?.write(val, writer);
            return;
          }
        }
      },
      ...options,
      validate: (value) => {
        options?.validate?.(value);
        if (typeof value !== "object" || value == null) {
          throw new TypeError(`Expected object, found ${typeof value}`);
        }
        const keys = Object.keys(value).filter(
          (k) => value[k] !== void 0 && Object.hasOwn(values, k)
        );
        if (keys.length !== 1) {
          throw new TypeError(
            `Expected object with one key, but found ${keys.length} for type ${name}}`
          );
        }
        const [variant] = keys;
        if (!Object.hasOwn(values, variant)) {
          throw new TypeError(`Invalid enum variant ${variant}`);
        }
      }
    });
  },
  /**
   * Creates a BcsType representing a map of a given key and value type
   * @param keyType The BcsType of the key
   * @param valueType The BcsType of the value
   * @example
   * const map = bcs.map(bcs.u8(), bcs.string())
   * map.serialize(new Map([[2, 'a']])).toBytes() // Uint8Array [ 1, 2, 1, 97 ]
   */
  map(keyType, valueType) {
    return bcs.vector(bcs.tuple([keyType, valueType])).transform({
      name: `Map<${keyType.name}, ${valueType.name}>`,
      input: (value) => {
        return [...value.entries()];
      },
      output: (value) => {
        const result = /* @__PURE__ */ new Map();
        for (const [key, val] of value) {
          result.set(key, val);
        }
        return result;
      }
    });
  },
  /**
   * Creates a BcsType that wraps another BcsType which is lazily evaluated. This is useful for creating recursive types.
   * @param cb A callback that returns the BcsType
   */
  lazy(cb) {
    return lazyBcsType(cb);
  }
};

// ../../node_modules/@mysten/sui/dist/esm/utils/sui-types.js
var TX_DIGEST_LENGTH = 32;
function isValidTransactionDigest(value) {
  try {
    const buffer = fromBase58(value);
    return buffer.length === TX_DIGEST_LENGTH;
  } catch (e) {
    return false;
  }
}
var SUI_ADDRESS_LENGTH = 32;
function isValidSuiAddress(value) {
  return isHex2(value) && getHexByteLength2(value) === SUI_ADDRESS_LENGTH;
}
function isValidSuiObjectId(value) {
  return isValidSuiAddress(value);
}
function normalizeSuiAddress(value, forceAdd0x = false) {
  let address = value.toLowerCase();
  if (!forceAdd0x && address.startsWith("0x")) {
    address = address.slice(2);
  }
  return `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, "0")}`;
}
function normalizeSuiObjectId(value, forceAdd0x = false) {
  return normalizeSuiAddress(value, forceAdd0x);
}
function isHex2(value) {
  return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;
}
function getHexByteLength2(value) {
  return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;
}

// ../../node_modules/@mysten/sui/dist/esm/bcs/type-tag-serializer.js
var VECTOR_REGEX = /^vector<(.+)>$/;
var STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;
var TypeTagSerializer = class _TypeTagSerializer {
  static parseFromStr(str, normalizeAddress = false) {
    if (str === "address") {
      return { address: null };
    } else if (str === "bool") {
      return { bool: null };
    } else if (str === "u8") {
      return { u8: null };
    } else if (str === "u16") {
      return { u16: null };
    } else if (str === "u32") {
      return { u32: null };
    } else if (str === "u64") {
      return { u64: null };
    } else if (str === "u128") {
      return { u128: null };
    } else if (str === "u256") {
      return { u256: null };
    } else if (str === "signer") {
      return { signer: null };
    }
    const vectorMatch = str.match(VECTOR_REGEX);
    if (vectorMatch) {
      return {
        vector: _TypeTagSerializer.parseFromStr(vectorMatch[1], normalizeAddress)
      };
    }
    const structMatch = str.match(STRUCT_REGEX);
    if (structMatch) {
      const address = normalizeAddress ? normalizeSuiAddress(structMatch[1]) : structMatch[1];
      return {
        struct: {
          address,
          module: structMatch[2],
          name: structMatch[3],
          typeParams: structMatch[5] === void 0 ? [] : _TypeTagSerializer.parseStructTypeArgs(structMatch[5], normalizeAddress)
        }
      };
    }
    throw new Error(`Encountered unexpected token when parsing type args for ${str}`);
  }
  static parseStructTypeArgs(str, normalizeAddress = false) {
    return splitGenericParameters(str).map(
      (tok) => _TypeTagSerializer.parseFromStr(tok, normalizeAddress)
    );
  }
  static tagToString(tag) {
    if ("bool" in tag) {
      return "bool";
    }
    if ("u8" in tag) {
      return "u8";
    }
    if ("u16" in tag) {
      return "u16";
    }
    if ("u32" in tag) {
      return "u32";
    }
    if ("u64" in tag) {
      return "u64";
    }
    if ("u128" in tag) {
      return "u128";
    }
    if ("u256" in tag) {
      return "u256";
    }
    if ("address" in tag) {
      return "address";
    }
    if ("signer" in tag) {
      return "signer";
    }
    if ("vector" in tag) {
      return `vector<${_TypeTagSerializer.tagToString(tag.vector)}>`;
    }
    if ("struct" in tag) {
      const struct = tag.struct;
      const typeParams = struct.typeParams.map(_TypeTagSerializer.tagToString).join(", ");
      return `${struct.address}::${struct.module}::${struct.name}${typeParams ? `<${typeParams}>` : ""}`;
    }
    throw new Error("Invalid TypeTag");
  }
};

// ../../node_modules/@mysten/sui/dist/esm/bcs/bcs.js
function unsafe_u64(options) {
  return bcs.u64({
    name: "unsafe_u64",
    ...options
  }).transform({
    input: (val) => val,
    output: (val) => Number(val)
  });
}
function optionEnum(type) {
  return bcs.enum("Option", {
    None: null,
    Some: type
  });
}
var Address = bcs.bytes(SUI_ADDRESS_LENGTH).transform({
  validate: (val) => {
    const address = typeof val === "string" ? val : toHex(val);
    if (!address || !isValidSuiAddress(normalizeSuiAddress(address))) {
      throw new Error(`Invalid Sui address ${address}`);
    }
  },
  input: (val) => typeof val === "string" ? fromHex(normalizeSuiAddress(val)) : val,
  output: (val) => normalizeSuiAddress(toHex(val))
});
var ObjectDigest = bcs.vector(bcs.u8()).transform({
  name: "ObjectDigest",
  input: (value) => fromBase58(value),
  output: (value) => toBase58(new Uint8Array(value)),
  validate: (value) => {
    if (fromBase58(value).length !== 32) {
      throw new Error("ObjectDigest must be 32 bytes");
    }
  }
});
var SuiObjectRef = bcs.struct("SuiObjectRef", {
  objectId: Address,
  version: bcs.u64(),
  digest: ObjectDigest
});
var SharedObjectRef = bcs.struct("SharedObjectRef", {
  objectId: Address,
  initialSharedVersion: bcs.u64(),
  mutable: bcs.bool()
});
var ObjectArg = bcs.enum("ObjectArg", {
  ImmOrOwnedObject: SuiObjectRef,
  SharedObject: SharedObjectRef,
  Receiving: SuiObjectRef
});
var CallArg = bcs.enum("CallArg", {
  Pure: bcs.struct("Pure", {
    bytes: bcs.vector(bcs.u8()).transform({
      input: (val) => typeof val === "string" ? fromBase64(val) : val,
      output: (val) => toBase64(new Uint8Array(val))
    })
  }),
  Object: ObjectArg
});
var InnerTypeTag = bcs.enum("TypeTag", {
  bool: null,
  u8: null,
  u64: null,
  u128: null,
  address: null,
  signer: null,
  vector: bcs.lazy(() => InnerTypeTag),
  struct: bcs.lazy(() => StructTag),
  u16: null,
  u32: null,
  u256: null
});
var TypeTag = InnerTypeTag.transform({
  input: (typeTag) => typeof typeTag === "string" ? TypeTagSerializer.parseFromStr(typeTag, true) : typeTag,
  output: (typeTag) => TypeTagSerializer.tagToString(typeTag)
});
var Argument = bcs.enum("Argument", {
  GasCoin: null,
  Input: bcs.u16(),
  Result: bcs.u16(),
  NestedResult: bcs.tuple([bcs.u16(), bcs.u16()])
});
var ProgrammableMoveCall = bcs.struct("ProgrammableMoveCall", {
  package: Address,
  module: bcs.string(),
  function: bcs.string(),
  typeArguments: bcs.vector(TypeTag),
  arguments: bcs.vector(Argument)
});
var Command = bcs.enum("Command", {
  /**
   * A Move Call - any public Move function can be called via
   * this transaction. The results can be used that instant to pass
   * into the next transaction.
   */
  MoveCall: ProgrammableMoveCall,
  /**
   * Transfer vector of objects to a receiver.
   */
  TransferObjects: bcs.struct("TransferObjects", {
    objects: bcs.vector(Argument),
    address: Argument
  }),
  // /**
  //  * Split `amount` from a `coin`.
  //  */
  SplitCoins: bcs.struct("SplitCoins", {
    coin: Argument,
    amounts: bcs.vector(Argument)
  }),
  // /**
  //  * Merge Vector of Coins (`sources`) into a `destination`.
  //  */
  MergeCoins: bcs.struct("MergeCoins", {
    destination: Argument,
    sources: bcs.vector(Argument)
  }),
  // /**
  //  * Publish a Move module.
  //  */
  Publish: bcs.struct("Publish", {
    modules: bcs.vector(
      bcs.vector(bcs.u8()).transform({
        input: (val) => typeof val === "string" ? fromBase64(val) : val,
        output: (val) => toBase64(new Uint8Array(val))
      })
    ),
    dependencies: bcs.vector(Address)
  }),
  // /**
  //  * Build a vector of objects using the input arguments.
  //  * It is impossible to export construct a `vector<T: key>` otherwise,
  //  * so this call serves a utility function.
  //  */
  MakeMoveVec: bcs.struct("MakeMoveVec", {
    type: optionEnum(TypeTag).transform({
      input: (val) => val === null ? {
        None: true
      } : {
        Some: val
      },
      output: (val) => val.Some ?? null
    }),
    elements: bcs.vector(Argument)
  }),
  Upgrade: bcs.struct("Upgrade", {
    modules: bcs.vector(
      bcs.vector(bcs.u8()).transform({
        input: (val) => typeof val === "string" ? fromBase64(val) : val,
        output: (val) => toBase64(new Uint8Array(val))
      })
    ),
    dependencies: bcs.vector(Address),
    package: Address,
    ticket: Argument
  })
});
var ProgrammableTransaction = bcs.struct("ProgrammableTransaction", {
  inputs: bcs.vector(CallArg),
  commands: bcs.vector(Command)
});
var TransactionKind = bcs.enum("TransactionKind", {
  ProgrammableTransaction,
  ChangeEpoch: null,
  Genesis: null,
  ConsensusCommitPrologue: null
});
var TransactionExpiration = bcs.enum("TransactionExpiration", {
  None: null,
  Epoch: unsafe_u64()
});
var StructTag = bcs.struct("StructTag", {
  address: Address,
  module: bcs.string(),
  name: bcs.string(),
  typeParams: bcs.vector(InnerTypeTag)
});
var GasData = bcs.struct("GasData", {
  payment: bcs.vector(SuiObjectRef),
  owner: Address,
  price: bcs.u64(),
  budget: bcs.u64()
});
var TransactionDataV1 = bcs.struct("TransactionDataV1", {
  kind: TransactionKind,
  sender: Address,
  gasData: GasData,
  expiration: TransactionExpiration
});
var TransactionData = bcs.enum("TransactionData", {
  V1: TransactionDataV1
});
var IntentScope = bcs.enum("IntentScope", {
  TransactionData: null,
  TransactionEffects: null,
  CheckpointSummary: null,
  PersonalMessage: null
});
var IntentVersion = bcs.enum("IntentVersion", {
  V0: null
});
var AppId = bcs.enum("AppId", {
  Sui: null
});
var Intent = bcs.struct("Intent", {
  scope: IntentScope,
  version: IntentVersion,
  appId: AppId
});
function IntentMessage(T) {
  return bcs.struct(`IntentMessage<${T.name}>`, {
    intent: Intent,
    value: T
  });
}
var CompressedSignature = bcs.enum("CompressedSignature", {
  ED25519: bcs.fixedArray(64, bcs.u8()),
  Secp256k1: bcs.fixedArray(64, bcs.u8()),
  Secp256r1: bcs.fixedArray(64, bcs.u8()),
  ZkLogin: bcs.vector(bcs.u8())
});
var PublicKey = bcs.enum("PublicKey", {
  ED25519: bcs.fixedArray(32, bcs.u8()),
  Secp256k1: bcs.fixedArray(33, bcs.u8()),
  Secp256r1: bcs.fixedArray(33, bcs.u8()),
  ZkLogin: bcs.vector(bcs.u8())
});
var MultiSigPkMap = bcs.struct("MultiSigPkMap", {
  pubKey: PublicKey,
  weight: bcs.u8()
});
var MultiSigPublicKey = bcs.struct("MultiSigPublicKey", {
  pk_map: bcs.vector(MultiSigPkMap),
  threshold: bcs.u16()
});
var MultiSig = bcs.struct("MultiSig", {
  sigs: bcs.vector(CompressedSignature),
  bitmap: bcs.u16(),
  multisig_pk: MultiSigPublicKey
});
var base64String = bcs.vector(bcs.u8()).transform({
  input: (val) => typeof val === "string" ? fromBase64(val) : val,
  output: (val) => toBase64(new Uint8Array(val))
});
var SenderSignedTransaction = bcs.struct("SenderSignedTransaction", {
  intentMessage: IntentMessage(TransactionData),
  txSignatures: bcs.vector(base64String)
});
var SenderSignedData = bcs.vector(SenderSignedTransaction, {
  name: "SenderSignedData"
});

// ../../node_modules/@mysten/sui/dist/esm/bcs/effects.js
var PackageUpgradeError = bcs.enum("PackageUpgradeError", {
  UnableToFetchPackage: bcs.struct("UnableToFetchPackage", { packageId: Address }),
  NotAPackage: bcs.struct("NotAPackage", { objectId: Address }),
  IncompatibleUpgrade: null,
  DigestDoesNotMatch: bcs.struct("DigestDoesNotMatch", { digest: bcs.vector(bcs.u8()) }),
  UnknownUpgradePolicy: bcs.struct("UnknownUpgradePolicy", { policy: bcs.u8() }),
  PackageIDDoesNotMatch: bcs.struct("PackageIDDoesNotMatch", {
    packageId: Address,
    ticketId: Address
  })
});
var ModuleId = bcs.struct("ModuleId", {
  address: Address,
  name: bcs.string()
});
var MoveLocation = bcs.struct("MoveLocation", {
  module: ModuleId,
  function: bcs.u16(),
  instruction: bcs.u16(),
  functionName: bcs.option(bcs.string())
});
var CommandArgumentError = bcs.enum("CommandArgumentError", {
  TypeMismatch: null,
  InvalidBCSBytes: null,
  InvalidUsageOfPureArg: null,
  InvalidArgumentToPrivateEntryFunction: null,
  IndexOutOfBounds: bcs.struct("IndexOutOfBounds", { idx: bcs.u16() }),
  SecondaryIndexOutOfBounds: bcs.struct("SecondaryIndexOutOfBounds", {
    resultIdx: bcs.u16(),
    secondaryIdx: bcs.u16()
  }),
  InvalidResultArity: bcs.struct("InvalidResultArity", { resultIdx: bcs.u16() }),
  InvalidGasCoinUsage: null,
  InvalidValueUsage: null,
  InvalidObjectByValue: null,
  InvalidObjectByMutRef: null,
  SharedObjectOperationNotAllowed: null
});
var TypeArgumentError = bcs.enum("TypeArgumentError", {
  TypeNotFound: null,
  ConstraintNotSatisfied: null
});
var ExecutionFailureStatus = bcs.enum("ExecutionFailureStatus", {
  InsufficientGas: null,
  InvalidGasObject: null,
  InvariantViolation: null,
  FeatureNotYetSupported: null,
  MoveObjectTooBig: bcs.struct("MoveObjectTooBig", {
    objectSize: bcs.u64(),
    maxObjectSize: bcs.u64()
  }),
  MovePackageTooBig: bcs.struct("MovePackageTooBig", {
    objectSize: bcs.u64(),
    maxObjectSize: bcs.u64()
  }),
  CircularObjectOwnership: bcs.struct("CircularObjectOwnership", { object: Address }),
  InsufficientCoinBalance: null,
  CoinBalanceOverflow: null,
  PublishErrorNonZeroAddress: null,
  SuiMoveVerificationError: null,
  MovePrimitiveRuntimeError: bcs.option(MoveLocation),
  MoveAbort: bcs.tuple([MoveLocation, bcs.u64()]),
  VMVerificationOrDeserializationError: null,
  VMInvariantViolation: null,
  FunctionNotFound: null,
  ArityMismatch: null,
  TypeArityMismatch: null,
  NonEntryFunctionInvoked: null,
  CommandArgumentError: bcs.struct("CommandArgumentError", {
    argIdx: bcs.u16(),
    kind: CommandArgumentError
  }),
  TypeArgumentError: bcs.struct("TypeArgumentError", {
    argumentIdx: bcs.u16(),
    kind: TypeArgumentError
  }),
  UnusedValueWithoutDrop: bcs.struct("UnusedValueWithoutDrop", {
    resultIdx: bcs.u16(),
    secondaryIdx: bcs.u16()
  }),
  InvalidPublicFunctionReturnType: bcs.struct("InvalidPublicFunctionReturnType", {
    idx: bcs.u16()
  }),
  InvalidTransferObject: null,
  EffectsTooLarge: bcs.struct("EffectsTooLarge", { currentSize: bcs.u64(), maxSize: bcs.u64() }),
  PublishUpgradeMissingDependency: null,
  PublishUpgradeDependencyDowngrade: null,
  PackageUpgradeError: bcs.struct("PackageUpgradeError", { upgradeError: PackageUpgradeError }),
  WrittenObjectsTooLarge: bcs.struct("WrittenObjectsTooLarge", {
    currentSize: bcs.u64(),
    maxSize: bcs.u64()
  }),
  CertificateDenied: null,
  SuiMoveVerificationTimedout: null,
  SharedObjectOperationNotAllowed: null,
  InputObjectDeleted: null,
  ExecutionCancelledDueToSharedObjectCongestion: bcs.struct(
    "ExecutionCancelledDueToSharedObjectCongestion",
    {
      congestedObjects: bcs.vector(Address)
    }
  ),
  AddressDeniedForCoin: bcs.struct("AddressDeniedForCoin", {
    address: Address,
    coinType: bcs.string()
  }),
  CoinTypeGlobalPause: bcs.struct("CoinTypeGlobalPause", { coinType: bcs.string() }),
  ExecutionCancelledDueToRandomnessUnavailable: null
});
var ExecutionStatus = bcs.enum("ExecutionStatus", {
  Success: null,
  Failed: bcs.struct("ExecutionFailed", {
    error: ExecutionFailureStatus,
    command: bcs.option(bcs.u64())
  })
});
var GasCostSummary = bcs.struct("GasCostSummary", {
  computationCost: bcs.u64(),
  storageCost: bcs.u64(),
  storageRebate: bcs.u64(),
  nonRefundableStorageFee: bcs.u64()
});
var Owner = bcs.enum("Owner", {
  AddressOwner: Address,
  ObjectOwner: Address,
  Shared: bcs.struct("Shared", {
    initialSharedVersion: bcs.u64()
  }),
  Immutable: null
});
var TransactionEffectsV1 = bcs.struct("TransactionEffectsV1", {
  status: ExecutionStatus,
  executedEpoch: bcs.u64(),
  gasUsed: GasCostSummary,
  modifiedAtVersions: bcs.vector(bcs.tuple([Address, bcs.u64()])),
  sharedObjects: bcs.vector(SuiObjectRef),
  transactionDigest: ObjectDigest,
  created: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),
  mutated: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),
  unwrapped: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),
  deleted: bcs.vector(SuiObjectRef),
  unwrappedThenDeleted: bcs.vector(SuiObjectRef),
  wrapped: bcs.vector(SuiObjectRef),
  gasObject: bcs.tuple([SuiObjectRef, Owner]),
  eventsDigest: bcs.option(ObjectDigest),
  dependencies: bcs.vector(ObjectDigest)
});
var VersionDigest = bcs.tuple([bcs.u64(), ObjectDigest]);
var ObjectIn = bcs.enum("ObjectIn", {
  NotExist: null,
  Exist: bcs.tuple([VersionDigest, Owner])
});
var ObjectOut = bcs.enum("ObjectOut", {
  NotExist: null,
  ObjectWrite: bcs.tuple([ObjectDigest, Owner]),
  PackageWrite: VersionDigest
});
var IDOperation = bcs.enum("IDOperation", {
  None: null,
  Created: null,
  Deleted: null
});
var EffectsObjectChange = bcs.struct("EffectsObjectChange", {
  inputState: ObjectIn,
  outputState: ObjectOut,
  idOperation: IDOperation
});
var UnchangedSharedKind = bcs.enum("UnchangedSharedKind", {
  ReadOnlyRoot: VersionDigest,
  MutateDeleted: bcs.u64(),
  ReadDeleted: bcs.u64(),
  Cancelled: bcs.u64(),
  PerEpochConfig: null
});
var TransactionEffectsV2 = bcs.struct("TransactionEffectsV2", {
  status: ExecutionStatus,
  executedEpoch: bcs.u64(),
  gasUsed: GasCostSummary,
  transactionDigest: ObjectDigest,
  gasObjectIndex: bcs.option(bcs.u32()),
  eventsDigest: bcs.option(ObjectDigest),
  dependencies: bcs.vector(ObjectDigest),
  lamportVersion: bcs.u64(),
  changedObjects: bcs.vector(bcs.tuple([Address, EffectsObjectChange])),
  unchangedSharedObjects: bcs.vector(bcs.tuple([Address, UnchangedSharedKind])),
  auxDataDigest: bcs.option(ObjectDigest)
});
var TransactionEffects = bcs.enum("TransactionEffects", {
  V1: TransactionEffectsV1,
  V2: TransactionEffectsV2
});

// ../../node_modules/@mysten/sui/dist/esm/bcs/index.js
var suiBcs = {
  ...bcs,
  U8: bcs.u8(),
  U16: bcs.u16(),
  U32: bcs.u32(),
  U64: bcs.u64(),
  U128: bcs.u128(),
  U256: bcs.u256(),
  ULEB128: bcs.uleb128(),
  Bool: bcs.bool(),
  String: bcs.string(),
  Address,
  AppId,
  Argument,
  CallArg,
  CompressedSignature,
  GasData,
  Intent,
  IntentMessage,
  IntentScope,
  IntentVersion,
  MultiSig,
  MultiSigPkMap,
  MultiSigPublicKey,
  ObjectArg,
  ObjectDigest,
  ProgrammableMoveCall,
  ProgrammableTransaction,
  PublicKey,
  SenderSignedData,
  SenderSignedTransaction,
  SharedObjectRef,
  StructTag,
  SuiObjectRef,
  Command,
  TransactionData,
  TransactionDataV1,
  TransactionExpiration,
  TransactionKind,
  TypeTag,
  TransactionEffects
};

// ../../node_modules/@mysten/sui/dist/esm/utils/suins.js
var SUI_NS_NAME_REGEX = /^(?!.*(^(?!@)|[-.@])($|[-.@]))(?:[a-z0-9-]{0,63}(?:\.[a-z0-9-]{0,63})*)?@[a-z0-9-]{0,63}$/i;
var SUI_NS_DOMAIN_REGEX = /^(?!.*(^|[-.])($|[-.]))(?:[a-z0-9-]{0,63}\.)+sui$/i;
function normalizeSuiNSName(name, format = "at") {
  const lowerCase = name.toLowerCase();
  let parts;
  if (lowerCase.includes("@")) {
    if (!SUI_NS_NAME_REGEX.test(lowerCase)) {
      throw new Error(`Invalid SuiNS name ${name}`);
    }
    const [labels, domain] = lowerCase.split("@");
    parts = [...labels ? labels.split(".") : [], domain];
  } else {
    if (!SUI_NS_DOMAIN_REGEX.test(lowerCase)) {
      throw new Error(`Invalid SuiNS name ${name}`);
    }
    parts = lowerCase.split(".").slice(0, -1);
  }
  if (format === "dot") {
    return `${parts.join(".")}.sui`;
  }
  return `${parts.slice(0, -1).join(".")}@${parts[parts.length - 1]}`;
}

// ../../node_modules/@mysten/sui/dist/esm/utils/constants.js
var MIST_PER_SUI = BigInt(1e9);
var MOVE_STDLIB_ADDRESS = "0x1";
var SUI_FRAMEWORK_ADDRESS = "0x2";
var SUI_CLOCK_OBJECT_ID = normalizeSuiObjectId("0x6");
var SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;
var SUI_SYSTEM_STATE_OBJECT_ID = normalizeSuiObjectId("0x5");

// ../../node_modules/@noble/hashes/esm/_assert.js
function number2(n2) {
  if (!Number.isSafeInteger(n2) || n2 < 0)
    throw new Error(`positive integer expected, not ${n2}`);
}
function isBytes(a) {
  return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
}
function bytes2(b2, ...lengths) {
  if (!isBytes(b2))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b2.length))
    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b2.length}`);
}
function exists2(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function output2(out, instance) {
  bytes2(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error(`digestInto() expects output buffer of length at least ${min}`);
  }
}

// ../../node_modules/@noble/hashes/esm/utils.js
var u323 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
var isLE2 = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
var byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
var byteSwapIfBE = isLE2 ? (n2) => n2 : (n2) => byteSwap(n2);
function byteSwap32(arr) {
  for (let i = 0; i < arr.length; i++) {
    arr[i] = byteSwap(arr[i]);
  }
}
function utf8ToBytes2(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes2(data) {
  if (typeof data === "string")
    data = utf8ToBytes2(data);
  bytes2(data);
  return data;
}
var Hash2 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
var toStr2 = {}.toString;
function wrapConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}

// ../../node_modules/@noble/hashes/esm/_blake.js
var SIGMA = /* @__PURE__ */ new Uint8Array([
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3,
  11,
  8,
  12,
  0,
  5,
  2,
  15,
  13,
  10,
  14,
  3,
  6,
  7,
  1,
  9,
  4,
  7,
  9,
  3,
  1,
  13,
  12,
  11,
  14,
  2,
  6,
  5,
  10,
  4,
  0,
  15,
  8,
  9,
  0,
  5,
  7,
  2,
  4,
  10,
  15,
  14,
  1,
  11,
  12,
  6,
  8,
  3,
  13,
  2,
  12,
  6,
  10,
  0,
  11,
  8,
  3,
  4,
  13,
  7,
  5,
  15,
  14,
  1,
  9,
  12,
  5,
  1,
  15,
  14,
  13,
  4,
  10,
  0,
  7,
  6,
  3,
  9,
  2,
  8,
  11,
  13,
  11,
  7,
  14,
  12,
  1,
  3,
  9,
  5,
  0,
  15,
  4,
  8,
  6,
  2,
  10,
  6,
  15,
  14,
  9,
  11,
  3,
  0,
  8,
  12,
  2,
  13,
  7,
  1,
  4,
  10,
  5,
  10,
  2,
  8,
  4,
  7,
  6,
  1,
  5,
  15,
  11,
  9,
  14,
  3,
  12,
  13,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3
]);
var BLAKE = class extends Hash2 {
  constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.length = 0;
    this.pos = 0;
    this.finished = false;
    this.destroyed = false;
    number2(blockLen);
    number2(outputLen);
    number2(keyLen);
    if (outputLen < 0 || outputLen > keyLen)
      throw new Error("outputLen bigger than keyLen");
    if (opts.key !== void 0 && (opts.key.length < 1 || opts.key.length > keyLen))
      throw new Error(`key must be up 1..${keyLen} byte long or undefined`);
    if (opts.salt !== void 0 && opts.salt.length !== saltLen)
      throw new Error(`salt must be ${saltLen} byte long or undefined`);
    if (opts.personalization !== void 0 && opts.personalization.length !== persLen)
      throw new Error(`personalization must be ${persLen} byte long or undefined`);
    this.buffer32 = u323(this.buffer = new Uint8Array(blockLen));
  }
  update(data) {
    exists2(this);
    const { blockLen, buffer, buffer32 } = this;
    data = toBytes2(data);
    const len = data.length;
    const offset = data.byteOffset;
    const buf = data.buffer;
    for (let pos = 0; pos < len; ) {
      if (this.pos === blockLen) {
        if (!isLE2)
          byteSwap32(buffer32);
        this.compress(buffer32, 0, false);
        if (!isLE2)
          byteSwap32(buffer32);
        this.pos = 0;
      }
      const take = Math.min(blockLen - this.pos, len - pos);
      const dataOffset = offset + pos;
      if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
        const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
        if (!isLE2)
          byteSwap32(data32);
        for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
          this.length += blockLen;
          this.compress(data32, pos32, false);
        }
        if (!isLE2)
          byteSwap32(data32);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      this.length += take;
      pos += take;
    }
    return this;
  }
  digestInto(out) {
    exists2(this);
    output2(out, this);
    const { pos, buffer32 } = this;
    this.finished = true;
    this.buffer.subarray(pos).fill(0);
    if (!isLE2)
      byteSwap32(buffer32);
    this.compress(buffer32, 0, true);
    if (!isLE2)
      byteSwap32(buffer32);
    const out32 = u323(out);
    this.get().forEach((v, i) => out32[i] = byteSwapIfBE(v));
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    const { buffer, length, finished, destroyed, outputLen, pos } = this;
    to || (to = new this.constructor({ dkLen: outputLen }));
    to.set(...this.get());
    to.length = length;
    to.finished = finished;
    to.destroyed = destroyed;
    to.outputLen = outputLen;
    to.buffer.set(buffer);
    to.pos = pos;
    return to;
  }
};

// ../../node_modules/@noble/hashes/esm/_u64.js
var U32_MASK642 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
var _32n2 = /* @__PURE__ */ BigInt(32);
function fromBig2(n2, le = false) {
  if (le)
    return { h: Number(n2 & U32_MASK642), l: Number(n2 >> _32n2 & U32_MASK642) };
  return { h: Number(n2 >> _32n2 & U32_MASK642) | 0, l: Number(n2 & U32_MASK642) | 0 };
}
function split2(lst, le = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i = 0; i < lst.length; i++) {
    const { h, l } = fromBig2(lst[i], le);
    [Ah[i], Al[i]] = [h, l];
  }
  return [Ah, Al];
}
var toBig = (h, l) => BigInt(h >>> 0) << _32n2 | BigInt(l >>> 0);
var shrSH = (h, _l, s) => h >>> s;
var shrSL = (h, l, s) => h << 32 - s | l >>> s;
var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
var rotr32H = (_h, l) => l;
var rotr32L = (h, _l) => h;
var rotlSH2 = (h, l, s) => h << s | l >>> 32 - s;
var rotlSL2 = (h, l, s) => l << s | h >>> 32 - s;
var rotlBH2 = (h, l, s) => l << s - 32 | h >>> 64 - s;
var rotlBL2 = (h, l, s) => h << s - 32 | l >>> 64 - s;
function add(Ah, Al, Bh, Bl) {
  const l = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
}
var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
var u64 = {
  fromBig: fromBig2,
  split: split2,
  toBig,
  shrSH,
  shrSL,
  rotrSH,
  rotrSL,
  rotrBH,
  rotrBL,
  rotr32H,
  rotr32L,
  rotlSH: rotlSH2,
  rotlSL: rotlSL2,
  rotlBH: rotlBH2,
  rotlBL: rotlBL2,
  add,
  add3L,
  add3H,
  add4L,
  add4H,
  add5H,
  add5L
};
var u64_default = u64;

// ../../node_modules/@noble/hashes/esm/blake2b.js
var B2B_IV = /* @__PURE__ */ new Uint32Array([
  4089235720,
  1779033703,
  2227873595,
  3144134277,
  4271175723,
  1013904242,
  1595750129,
  2773480762,
  2917565137,
  1359893119,
  725511199,
  2600822924,
  4215389547,
  528734635,
  327033209,
  1541459225
]);
var BBUF = /* @__PURE__ */ new Uint32Array(32);
function G1b(a, b2, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1];
  let Bl = BBUF[2 * b2], Bh = BBUF[2 * b2 + 1];
  let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1];
  let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1];
  let ll = u64_default.add3L(Al, Bl, Xl);
  Ah = u64_default.add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: u64_default.rotr32H(Dh, Dl), Dl: u64_default.rotr32L(Dh, Dl) });
  ({ h: Ch, l: Cl } = u64_default.add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: u64_default.rotrSH(Bh, Bl, 24), Bl: u64_default.rotrSL(Bh, Bl, 24) });
  BBUF[2 * a] = Al, BBUF[2 * a + 1] = Ah;
  BBUF[2 * b2] = Bl, BBUF[2 * b2 + 1] = Bh;
  BBUF[2 * c] = Cl, BBUF[2 * c + 1] = Ch;
  BBUF[2 * d] = Dl, BBUF[2 * d + 1] = Dh;
}
function G2b(a, b2, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1];
  let Bl = BBUF[2 * b2], Bh = BBUF[2 * b2 + 1];
  let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1];
  let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1];
  let ll = u64_default.add3L(Al, Bl, Xl);
  Ah = u64_default.add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: u64_default.rotrSH(Dh, Dl, 16), Dl: u64_default.rotrSL(Dh, Dl, 16) });
  ({ h: Ch, l: Cl } = u64_default.add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: u64_default.rotrBH(Bh, Bl, 63), Bl: u64_default.rotrBL(Bh, Bl, 63) });
  BBUF[2 * a] = Al, BBUF[2 * a + 1] = Ah;
  BBUF[2 * b2] = Bl, BBUF[2 * b2 + 1] = Bh;
  BBUF[2 * c] = Cl, BBUF[2 * c + 1] = Ch;
  BBUF[2 * d] = Dl, BBUF[2 * d + 1] = Dh;
}
var BLAKE2b = class extends BLAKE {
  constructor(opts = {}) {
    super(128, opts.dkLen === void 0 ? 64 : opts.dkLen, opts, 64, 16, 16);
    this.v0l = B2B_IV[0] | 0;
    this.v0h = B2B_IV[1] | 0;
    this.v1l = B2B_IV[2] | 0;
    this.v1h = B2B_IV[3] | 0;
    this.v2l = B2B_IV[4] | 0;
    this.v2h = B2B_IV[5] | 0;
    this.v3l = B2B_IV[6] | 0;
    this.v3h = B2B_IV[7] | 0;
    this.v4l = B2B_IV[8] | 0;
    this.v4h = B2B_IV[9] | 0;
    this.v5l = B2B_IV[10] | 0;
    this.v5h = B2B_IV[11] | 0;
    this.v6l = B2B_IV[12] | 0;
    this.v6h = B2B_IV[13] | 0;
    this.v7l = B2B_IV[14] | 0;
    this.v7h = B2B_IV[15] | 0;
    const keyLength = opts.key ? opts.key.length : 0;
    this.v0l ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
    if (opts.salt) {
      const salt = u323(toBytes2(opts.salt));
      this.v4l ^= byteSwapIfBE(salt[0]);
      this.v4h ^= byteSwapIfBE(salt[1]);
      this.v5l ^= byteSwapIfBE(salt[2]);
      this.v5h ^= byteSwapIfBE(salt[3]);
    }
    if (opts.personalization) {
      const pers = u323(toBytes2(opts.personalization));
      this.v6l ^= byteSwapIfBE(pers[0]);
      this.v6h ^= byteSwapIfBE(pers[1]);
      this.v7l ^= byteSwapIfBE(pers[2]);
      this.v7h ^= byteSwapIfBE(pers[3]);
    }
    if (opts.key) {
      const tmp = new Uint8Array(this.blockLen);
      tmp.set(toBytes2(opts.key));
      this.update(tmp);
    }
  }
  // prettier-ignore
  get() {
    let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
    return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
  }
  // prettier-ignore
  set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
    this.v0l = v0l | 0;
    this.v0h = v0h | 0;
    this.v1l = v1l | 0;
    this.v1h = v1h | 0;
    this.v2l = v2l | 0;
    this.v2h = v2h | 0;
    this.v3l = v3l | 0;
    this.v3h = v3h | 0;
    this.v4l = v4l | 0;
    this.v4h = v4h | 0;
    this.v5l = v5l | 0;
    this.v5h = v5h | 0;
    this.v6l = v6l | 0;
    this.v6h = v6h | 0;
    this.v7l = v7l | 0;
    this.v7h = v7h | 0;
  }
  compress(msg, offset, isLast) {
    this.get().forEach((v, i) => BBUF[i] = v);
    BBUF.set(B2B_IV, 16);
    let { h, l } = u64_default.fromBig(BigInt(this.length));
    BBUF[24] = B2B_IV[8] ^ l;
    BBUF[25] = B2B_IV[9] ^ h;
    if (isLast) {
      BBUF[28] = ~BBUF[28];
      BBUF[29] = ~BBUF[29];
    }
    let j = 0;
    const s = SIGMA;
    for (let i = 0; i < 12; i++) {
      G1b(0, 4, 8, 12, msg, offset + 2 * s[j++]);
      G2b(0, 4, 8, 12, msg, offset + 2 * s[j++]);
      G1b(1, 5, 9, 13, msg, offset + 2 * s[j++]);
      G2b(1, 5, 9, 13, msg, offset + 2 * s[j++]);
      G1b(2, 6, 10, 14, msg, offset + 2 * s[j++]);
      G2b(2, 6, 10, 14, msg, offset + 2 * s[j++]);
      G1b(3, 7, 11, 15, msg, offset + 2 * s[j++]);
      G2b(3, 7, 11, 15, msg, offset + 2 * s[j++]);
      G1b(0, 5, 10, 15, msg, offset + 2 * s[j++]);
      G2b(0, 5, 10, 15, msg, offset + 2 * s[j++]);
      G1b(1, 6, 11, 12, msg, offset + 2 * s[j++]);
      G2b(1, 6, 11, 12, msg, offset + 2 * s[j++]);
      G1b(2, 7, 8, 13, msg, offset + 2 * s[j++]);
      G2b(2, 7, 8, 13, msg, offset + 2 * s[j++]);
      G1b(3, 4, 9, 14, msg, offset + 2 * s[j++]);
      G2b(3, 4, 9, 14, msg, offset + 2 * s[j++]);
    }
    this.v0l ^= BBUF[0] ^ BBUF[16];
    this.v0h ^= BBUF[1] ^ BBUF[17];
    this.v1l ^= BBUF[2] ^ BBUF[18];
    this.v1h ^= BBUF[3] ^ BBUF[19];
    this.v2l ^= BBUF[4] ^ BBUF[20];
    this.v2h ^= BBUF[5] ^ BBUF[21];
    this.v3l ^= BBUF[6] ^ BBUF[22];
    this.v3h ^= BBUF[7] ^ BBUF[23];
    this.v4l ^= BBUF[8] ^ BBUF[24];
    this.v4h ^= BBUF[9] ^ BBUF[25];
    this.v5l ^= BBUF[10] ^ BBUF[26];
    this.v5h ^= BBUF[11] ^ BBUF[27];
    this.v6l ^= BBUF[12] ^ BBUF[28];
    this.v6h ^= BBUF[13] ^ BBUF[29];
    this.v7l ^= BBUF[14] ^ BBUF[30];
    this.v7h ^= BBUF[15] ^ BBUF[31];
    BBUF.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer32.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var blake2b = /* @__PURE__ */ wrapConstructorWithOpts((opts) => new BLAKE2b(opts));

// ../../node_modules/@mysten/sui/dist/esm/transactions/serializer.js
var OBJECT_MODULE_NAME = "object";
var ID_STRUCT_NAME = "ID";
var STD_ASCII_MODULE_NAME = "ascii";
var STD_ASCII_STRUCT_NAME = "String";
var STD_UTF8_MODULE_NAME = "string";
var STD_UTF8_STRUCT_NAME = "String";
var STD_OPTION_MODULE_NAME = "option";
var STD_OPTION_STRUCT_NAME = "Option";
function isTxContext(param) {
  const struct = typeof param.body === "object" && "datatype" in param.body ? param.body.datatype : null;
  return !!struct && normalizeSuiAddress(struct.package) === normalizeSuiAddress("0x2") && struct.module === "tx_context" && struct.type === "TxContext";
}
function getPureBcsSchema(typeSignature) {
  if (typeof typeSignature === "string") {
    switch (typeSignature) {
      case "address":
        return suiBcs.Address;
      case "bool":
        return suiBcs.Bool;
      case "u8":
        return suiBcs.U8;
      case "u16":
        return suiBcs.U16;
      case "u32":
        return suiBcs.U32;
      case "u64":
        return suiBcs.U64;
      case "u128":
        return suiBcs.U128;
      case "u256":
        return suiBcs.U256;
      default:
        throw new Error(`Unknown type signature ${typeSignature}`);
    }
  }
  if ("vector" in typeSignature) {
    if (typeSignature.vector === "u8") {
      return suiBcs.vector(suiBcs.U8).transform({
        input: (val) => typeof val === "string" ? new TextEncoder().encode(val) : val,
        output: (val) => val
      });
    }
    const type = getPureBcsSchema(typeSignature.vector);
    return type ? suiBcs.vector(type) : null;
  }
  if ("datatype" in typeSignature) {
    const pkg = normalizeSuiAddress(typeSignature.datatype.package);
    if (pkg === normalizeSuiAddress(MOVE_STDLIB_ADDRESS)) {
      if (typeSignature.datatype.module === STD_ASCII_MODULE_NAME && typeSignature.datatype.type === STD_ASCII_STRUCT_NAME) {
        return suiBcs.String;
      }
      if (typeSignature.datatype.module === STD_UTF8_MODULE_NAME && typeSignature.datatype.type === STD_UTF8_STRUCT_NAME) {
        return suiBcs.String;
      }
      if (typeSignature.datatype.module === STD_OPTION_MODULE_NAME && typeSignature.datatype.type === STD_OPTION_STRUCT_NAME) {
        const type = getPureBcsSchema(typeSignature.datatype.typeParameters[0]);
        return type ? suiBcs.vector(type) : null;
      }
    }
    if (pkg === normalizeSuiAddress(SUI_FRAMEWORK_ADDRESS) && typeSignature.datatype.module === OBJECT_MODULE_NAME && typeSignature.datatype.type === ID_STRUCT_NAME) {
      return suiBcs.Address;
    }
  }
  return null;
}
function normalizedTypeToMoveTypeSignature(type) {
  if (typeof type === "object" && "Reference" in type) {
    return {
      ref: "&",
      body: normalizedTypeToMoveTypeSignatureBody(type.Reference)
    };
  }
  if (typeof type === "object" && "MutableReference" in type) {
    return {
      ref: "&mut",
      body: normalizedTypeToMoveTypeSignatureBody(type.MutableReference)
    };
  }
  return {
    ref: null,
    body: normalizedTypeToMoveTypeSignatureBody(type)
  };
}
function normalizedTypeToMoveTypeSignatureBody(type) {
  if (typeof type === "string") {
    switch (type) {
      case "Address":
        return "address";
      case "Bool":
        return "bool";
      case "U8":
        return "u8";
      case "U16":
        return "u16";
      case "U32":
        return "u32";
      case "U64":
        return "u64";
      case "U128":
        return "u128";
      case "U256":
        return "u256";
      default:
        throw new Error(`Unexpected type ${type}`);
    }
  }
  if ("Vector" in type) {
    return { vector: normalizedTypeToMoveTypeSignatureBody(type.Vector) };
  }
  if ("Struct" in type) {
    return {
      datatype: {
        package: type.Struct.address,
        module: type.Struct.module,
        type: type.Struct.name,
        typeParameters: type.Struct.typeArguments.map(normalizedTypeToMoveTypeSignatureBody)
      }
    };
  }
  if ("TypeParameter" in type) {
    return { typeParameter: type.TypeParameter };
  }
  throw new Error(`Unexpected type ${JSON.stringify(type)}`);
}

// ../../node_modules/@mysten/sui/dist/esm/transactions/Inputs.js
function Pure(data) {
  return {
    $kind: "Pure",
    Pure: {
      bytes: data instanceof Uint8Array ? toBase64(data) : data.toBase64()
    }
  };
}
var Inputs = {
  Pure,
  ObjectRef({ objectId, digest, version: version2 }) {
    return {
      $kind: "Object",
      Object: {
        $kind: "ImmOrOwnedObject",
        ImmOrOwnedObject: {
          digest,
          version: version2,
          objectId: normalizeSuiAddress(objectId)
        }
      }
    };
  },
  SharedObjectRef({
    objectId,
    mutable,
    initialSharedVersion
  }) {
    return {
      $kind: "Object",
      Object: {
        $kind: "SharedObject",
        SharedObject: {
          mutable,
          initialSharedVersion,
          objectId: normalizeSuiAddress(objectId)
        }
      }
    };
  },
  ReceivingRef({ objectId, digest, version: version2 }) {
    return {
      $kind: "Object",
      Object: {
        $kind: "Receiving",
        Receiving: {
          digest,
          version: version2,
          objectId: normalizeSuiAddress(objectId)
        }
      }
    };
  }
};

// ../../node_modules/valibot/dist/index.js
var store;
function getGlobalConfig(config2) {
  return {
    lang: config2?.lang ?? store?.lang,
    message: config2?.message,
    abortEarly: config2?.abortEarly ?? store?.abortEarly,
    abortPipeEarly: config2?.abortPipeEarly ?? store?.abortPipeEarly
  };
}
var store2;
function getGlobalMessage(lang) {
  return store2?.get(lang);
}
var store3;
function getSchemaMessage(lang) {
  return store3?.get(lang);
}
var store4;
function getSpecificMessage(reference, lang) {
  return store4?.get(reference)?.get(lang);
}
function _stringify(input) {
  const type = typeof input;
  if (type === "string") {
    return `"${input}"`;
  }
  if (type === "number" || type === "bigint" || type === "boolean") {
    return `${input}`;
  }
  if (type === "object" || type === "function") {
    return (input && Object.getPrototypeOf(input)?.constructor?.name) ?? "null";
  }
  return type;
}
function _addIssue(context, label, dataset, config2, other) {
  const input = other && "input" in other ? other.input : dataset.value;
  const expected = other?.expected ?? context.expects ?? null;
  const received = other?.received ?? _stringify(input);
  const issue = {
    kind: context.kind,
    type: context.type,
    input,
    expected,
    received,
    message: `Invalid ${label}: ${expected ? `Expected ${expected} but r` : "R"}eceived ${received}`,
    // @ts-expect-error
    requirement: context.requirement,
    path: other?.path,
    issues: other?.issues,
    lang: config2.lang,
    abortEarly: config2.abortEarly,
    abortPipeEarly: config2.abortPipeEarly
  };
  const isSchema = context.kind === "schema";
  const message2 = other?.message ?? // @ts-expect-error
  context.message ?? getSpecificMessage(context.reference, issue.lang) ?? (isSchema ? getSchemaMessage(issue.lang) : null) ?? config2.message ?? getGlobalMessage(issue.lang);
  if (message2) {
    issue.message = typeof message2 === "function" ? message2(issue) : message2;
  }
  if (isSchema) {
    dataset.typed = false;
  }
  if (dataset.issues) {
    dataset.issues.push(issue);
  } else {
    dataset.issues = [issue];
  }
}
function _isValidObjectKey(object2, key) {
  return Object.hasOwn(object2, key) && key !== "__proto__" && key !== "prototype" && key !== "constructor";
}
var ValiError = class extends Error {
  /**
   * The error issues.
   */
  issues;
  /**
   * Creates a Valibot error with useful information.
   *
   * @param issues The error issues.
   */
  constructor(issues) {
    super(issues[0].message);
    this.name = "ValiError";
    this.issues = issues;
  }
};
function check(requirement, message2) {
  return {
    kind: "validation",
    type: "check",
    reference: check,
    async: false,
    expects: null,
    requirement,
    message: message2,
    _run(dataset, config2) {
      if (dataset.typed && !this.requirement(dataset.value)) {
        _addIssue(this, "input", dataset, config2);
      }
      return dataset;
    }
  };
}
function integer(message2) {
  return {
    kind: "validation",
    type: "integer",
    reference: integer,
    async: false,
    expects: null,
    requirement: Number.isInteger,
    message: message2,
    _run(dataset, config2) {
      if (dataset.typed && !this.requirement(dataset.value)) {
        _addIssue(this, "integer", dataset, config2);
      }
      return dataset;
    }
  };
}
function transform(operation) {
  return {
    kind: "transformation",
    type: "transform",
    reference: transform,
    async: false,
    operation,
    _run(dataset) {
      dataset.value = this.operation(dataset.value);
      return dataset;
    }
  };
}
function getDefault(schema, dataset, config2) {
  return typeof schema.default === "function" ? (
    // @ts-expect-error
    schema.default(dataset, config2)
  ) : (
    // @ts-expect-error
    schema.default
  );
}
function is(schema, input) {
  return !schema._run({ typed: false, value: input }, { abortEarly: true }).issues;
}
function array(item, message2) {
  return {
    kind: "schema",
    type: "array",
    reference: array,
    expects: "Array",
    async: false,
    item,
    message: message2,
    _run(dataset, config2) {
      const input = dataset.value;
      if (Array.isArray(input)) {
        dataset.typed = true;
        dataset.value = [];
        for (let key = 0; key < input.length; key++) {
          const value2 = input[key];
          const itemDataset = this.item._run({ typed: false, value: value2 }, config2);
          if (itemDataset.issues) {
            const pathItem = {
              type: "array",
              origin: "value",
              input,
              key,
              value: value2
            };
            for (const issue of itemDataset.issues) {
              if (issue.path) {
                issue.path.unshift(pathItem);
              } else {
                issue.path = [pathItem];
              }
              dataset.issues?.push(issue);
            }
            if (!dataset.issues) {
              dataset.issues = itemDataset.issues;
            }
            if (config2.abortEarly) {
              dataset.typed = false;
              break;
            }
          }
          if (!itemDataset.typed) {
            dataset.typed = false;
          }
          dataset.value.push(itemDataset.value);
        }
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function bigint(message2) {
  return {
    kind: "schema",
    type: "bigint",
    reference: bigint,
    expects: "bigint",
    async: false,
    message: message2,
    _run(dataset, config2) {
      if (typeof dataset.value === "bigint") {
        dataset.typed = true;
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function boolean(message2) {
  return {
    kind: "schema",
    type: "boolean",
    reference: boolean,
    expects: "boolean",
    async: false,
    message: message2,
    _run(dataset, config2) {
      if (typeof dataset.value === "boolean") {
        dataset.typed = true;
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function lazy(getter) {
  return {
    kind: "schema",
    type: "lazy",
    reference: lazy,
    expects: "unknown",
    async: false,
    getter,
    _run(dataset, config2) {
      return this.getter(dataset.value)._run(dataset, config2);
    }
  };
}
function literal(literal_, message2) {
  return {
    kind: "schema",
    type: "literal",
    reference: literal,
    expects: _stringify(literal_),
    async: false,
    literal: literal_,
    message: message2,
    _run(dataset, config2) {
      if (dataset.value === this.literal) {
        dataset.typed = true;
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function nullable(wrapped, ...args) {
  const schema = {
    kind: "schema",
    type: "nullable",
    reference: nullable,
    expects: `${wrapped.expects} | null`,
    async: false,
    wrapped,
    _run(dataset, config2) {
      if (dataset.value === null) {
        if ("default" in this) {
          dataset.value = getDefault(
            this,
            dataset,
            config2
          );
        }
        if (dataset.value === null) {
          dataset.typed = true;
          return dataset;
        }
      }
      return this.wrapped._run(dataset, config2);
    }
  };
  if (0 in args) {
    schema.default = args[0];
  }
  return schema;
}
function nullish(wrapped, ...args) {
  const schema = {
    kind: "schema",
    type: "nullish",
    reference: nullish,
    expects: `${wrapped.expects} | null | undefined`,
    async: false,
    wrapped,
    _run(dataset, config2) {
      if (dataset.value === null || dataset.value === void 0) {
        if ("default" in this) {
          dataset.value = getDefault(
            this,
            dataset,
            config2
          );
        }
        if (dataset.value === null || dataset.value === void 0) {
          dataset.typed = true;
          return dataset;
        }
      }
      return this.wrapped._run(dataset, config2);
    }
  };
  if (0 in args) {
    schema.default = args[0];
  }
  return schema;
}
function number3(message2) {
  return {
    kind: "schema",
    type: "number",
    reference: number3,
    expects: "number",
    async: false,
    message: message2,
    _run(dataset, config2) {
      if (typeof dataset.value === "number" && !isNaN(dataset.value)) {
        dataset.typed = true;
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function object(entries, message2) {
  return {
    kind: "schema",
    type: "object",
    reference: object,
    expects: "Object",
    async: false,
    entries,
    message: message2,
    _run(dataset, config2) {
      const input = dataset.value;
      if (input && typeof input === "object") {
        dataset.typed = true;
        dataset.value = {};
        for (const key in this.entries) {
          const value2 = input[key];
          const valueDataset = this.entries[key]._run(
            { typed: false, value: value2 },
            config2
          );
          if (valueDataset.issues) {
            const pathItem = {
              type: "object",
              origin: "value",
              input,
              key,
              value: value2
            };
            for (const issue of valueDataset.issues) {
              if (issue.path) {
                issue.path.unshift(pathItem);
              } else {
                issue.path = [pathItem];
              }
              dataset.issues?.push(issue);
            }
            if (!dataset.issues) {
              dataset.issues = valueDataset.issues;
            }
            if (config2.abortEarly) {
              dataset.typed = false;
              break;
            }
          }
          if (!valueDataset.typed) {
            dataset.typed = false;
          }
          if (valueDataset.value !== void 0 || key in input) {
            dataset.value[key] = valueDataset.value;
          }
        }
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function optional(wrapped, ...args) {
  const schema = {
    kind: "schema",
    type: "optional",
    reference: optional,
    expects: `${wrapped.expects} | undefined`,
    async: false,
    wrapped,
    _run(dataset, config2) {
      if (dataset.value === void 0) {
        if ("default" in this) {
          dataset.value = getDefault(
            this,
            dataset,
            config2
          );
        }
        if (dataset.value === void 0) {
          dataset.typed = true;
          return dataset;
        }
      }
      return this.wrapped._run(dataset, config2);
    }
  };
  if (0 in args) {
    schema.default = args[0];
  }
  return schema;
}
function record(key, value2, message2) {
  return {
    kind: "schema",
    type: "record",
    reference: record,
    expects: "Object",
    async: false,
    key,
    value: value2,
    message: message2,
    _run(dataset, config2) {
      const input = dataset.value;
      if (input && typeof input === "object") {
        dataset.typed = true;
        dataset.value = {};
        for (const entryKey in input) {
          if (_isValidObjectKey(input, entryKey)) {
            const entryValue = input[entryKey];
            const keyDataset = this.key._run(
              { typed: false, value: entryKey },
              config2
            );
            if (keyDataset.issues) {
              const pathItem = {
                type: "object",
                origin: "key",
                input,
                key: entryKey,
                value: entryValue
              };
              for (const issue of keyDataset.issues) {
                issue.path = [pathItem];
                dataset.issues?.push(issue);
              }
              if (!dataset.issues) {
                dataset.issues = keyDataset.issues;
              }
              if (config2.abortEarly) {
                dataset.typed = false;
                break;
              }
            }
            const valueDataset = this.value._run(
              { typed: false, value: entryValue },
              config2
            );
            if (valueDataset.issues) {
              const pathItem = {
                type: "object",
                origin: "value",
                input,
                key: entryKey,
                value: entryValue
              };
              for (const issue of valueDataset.issues) {
                if (issue.path) {
                  issue.path.unshift(pathItem);
                } else {
                  issue.path = [pathItem];
                }
                dataset.issues?.push(issue);
              }
              if (!dataset.issues) {
                dataset.issues = valueDataset.issues;
              }
              if (config2.abortEarly) {
                dataset.typed = false;
                break;
              }
            }
            if (!keyDataset.typed || !valueDataset.typed) {
              dataset.typed = false;
            }
            if (keyDataset.typed) {
              dataset.value[keyDataset.value] = valueDataset.value;
            }
          }
        }
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function string(message2) {
  return {
    kind: "schema",
    type: "string",
    reference: string,
    expects: "string",
    async: false,
    message: message2,
    _run(dataset, config2) {
      if (typeof dataset.value === "string") {
        dataset.typed = true;
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function tuple(items, message2) {
  return {
    kind: "schema",
    type: "tuple",
    reference: tuple,
    expects: "Array",
    async: false,
    items,
    message: message2,
    _run(dataset, config2) {
      const input = dataset.value;
      if (Array.isArray(input)) {
        dataset.typed = true;
        dataset.value = [];
        for (let key = 0; key < this.items.length; key++) {
          const value2 = input[key];
          const itemDataset = this.items[key]._run(
            { typed: false, value: value2 },
            config2
          );
          if (itemDataset.issues) {
            const pathItem = {
              type: "array",
              origin: "value",
              input,
              key,
              value: value2
            };
            for (const issue of itemDataset.issues) {
              if (issue.path) {
                issue.path.unshift(pathItem);
              } else {
                issue.path = [pathItem];
              }
              dataset.issues?.push(issue);
            }
            if (!dataset.issues) {
              dataset.issues = itemDataset.issues;
            }
            if (config2.abortEarly) {
              dataset.typed = false;
              break;
            }
          }
          if (!itemDataset.typed) {
            dataset.typed = false;
          }
          dataset.value.push(itemDataset.value);
        }
      } else {
        _addIssue(this, "type", dataset, config2);
      }
      return dataset;
    }
  };
}
function _subIssues(datasets) {
  let issues;
  if (datasets) {
    for (const dataset of datasets) {
      if (issues) {
        issues.push(...dataset.issues);
      } else {
        issues = dataset.issues;
      }
    }
  }
  return issues;
}
function union(options, message2) {
  return {
    kind: "schema",
    type: "union",
    reference: union,
    expects: [...new Set(options.map((option) => option.expects))].join(" | ") || "never",
    async: false,
    options,
    message: message2,
    _run(dataset, config2) {
      let validDataset;
      let typedDatasets;
      let untypedDatasets;
      for (const schema of this.options) {
        const optionDataset = schema._run(
          { typed: false, value: dataset.value },
          config2
        );
        if (optionDataset.typed) {
          if (optionDataset.issues) {
            if (typedDatasets) {
              typedDatasets.push(optionDataset);
            } else {
              typedDatasets = [optionDataset];
            }
          } else {
            validDataset = optionDataset;
            break;
          }
        } else {
          if (untypedDatasets) {
            untypedDatasets.push(optionDataset);
          } else {
            untypedDatasets = [optionDataset];
          }
        }
      }
      if (validDataset) {
        return validDataset;
      }
      if (typedDatasets) {
        if (typedDatasets.length === 1) {
          return typedDatasets[0];
        }
        _addIssue(this, "type", dataset, config2, {
          issues: _subIssues(typedDatasets)
        });
        dataset.typed = true;
      } else if (untypedDatasets?.length === 1) {
        return untypedDatasets[0];
      } else {
        _addIssue(this, "type", dataset, config2, {
          issues: _subIssues(untypedDatasets)
        });
      }
      return dataset;
    }
  };
}
function unknown() {
  return {
    kind: "schema",
    type: "unknown",
    reference: unknown,
    expects: "unknown",
    async: false,
    _run(dataset) {
      dataset.typed = true;
      return dataset;
    }
  };
}
function parse(schema, input, config2) {
  const dataset = schema._run(
    { typed: false, value: input },
    getGlobalConfig(config2)
  );
  if (dataset.issues) {
    throw new ValiError(dataset.issues);
  }
  return dataset.value;
}
function pipe(...pipe2) {
  return {
    ...pipe2[0],
    pipe: pipe2,
    _run(dataset, config2) {
      for (let index = 0; index < pipe2.length; index++) {
        if (dataset.issues && (pipe2[index].kind === "schema" || pipe2[index].kind === "transformation")) {
          dataset.typed = false;
          break;
        }
        if (!dataset.issues || !config2.abortEarly && !config2.abortPipeEarly) {
          dataset = pipe2[index]._run(dataset, config2);
        }
      }
      return dataset;
    }
  };
}

// ../../node_modules/@mysten/sui/dist/esm/transactions/data/internal.js
function safeEnum(options) {
  const unionOptions = Object.entries(options).map(([key, value]) => object({ [key]: value }));
  return pipe(
    union(unionOptions),
    transform((value) => ({
      ...value,
      $kind: Object.keys(value)[0]
    }))
  );
}
var SuiAddress = pipe(
  string(),
  transform((value) => normalizeSuiAddress(value)),
  check(isValidSuiAddress)
);
var ObjectID = SuiAddress;
var BCSBytes = string();
var JsonU64 = pipe(
  union([string(), pipe(number3(), integer())]),
  check((val) => {
    try {
      BigInt(val);
      return BigInt(val) >= 0 && BigInt(val) <= 18446744073709551615n;
    } catch {
      return false;
    }
  }, "Invalid u64")
);
var ObjectRef = object({
  objectId: SuiAddress,
  version: JsonU64,
  digest: string()
});
var Argument2 = pipe(
  union([
    object({ GasCoin: literal(true) }),
    object({ Input: pipe(number3(), integer()), type: optional(literal("pure")) }),
    object({ Input: pipe(number3(), integer()), type: optional(literal("object")) }),
    object({ Result: pipe(number3(), integer()) }),
    object({ NestedResult: tuple([pipe(number3(), integer()), pipe(number3(), integer())]) })
  ]),
  transform((value) => ({
    ...value,
    $kind: Object.keys(value)[0]
  }))
  // Defined manually to add `type?: 'pure' | 'object'` to Input
);
var GasData2 = object({
  budget: nullable(JsonU64),
  price: nullable(JsonU64),
  owner: nullable(SuiAddress),
  payment: nullable(array(ObjectRef))
});
var StructTag2 = object({
  address: string(),
  module: string(),
  name: string(),
  // type_params in rust, should be updated to use camelCase
  typeParams: array(string())
});
var OpenMoveTypeSignatureBody = union([
  literal("address"),
  literal("bool"),
  literal("u8"),
  literal("u16"),
  literal("u32"),
  literal("u64"),
  literal("u128"),
  literal("u256"),
  object({ vector: lazy(() => OpenMoveTypeSignatureBody) }),
  object({
    datatype: object({
      package: string(),
      module: string(),
      type: string(),
      typeParameters: array(lazy(() => OpenMoveTypeSignatureBody))
    })
  }),
  object({ typeParameter: pipe(number3(), integer()) })
]);
var OpenMoveTypeSignature = object({
  ref: nullable(union([literal("&"), literal("&mut")])),
  body: OpenMoveTypeSignatureBody
});
var ProgrammableMoveCall2 = object({
  package: ObjectID,
  module: string(),
  function: string(),
  // snake case in rust
  typeArguments: array(string()),
  arguments: array(Argument2),
  _argumentTypes: optional(nullable(array(OpenMoveTypeSignature)))
});
var $Intent = object({
  name: string(),
  inputs: record(string(), union([Argument2, array(Argument2)])),
  data: record(string(), unknown())
});
var Command2 = safeEnum({
  MoveCall: ProgrammableMoveCall2,
  TransferObjects: object({
    objects: array(Argument2),
    address: Argument2
  }),
  SplitCoins: object({
    coin: Argument2,
    amounts: array(Argument2)
  }),
  MergeCoins: object({
    destination: Argument2,
    sources: array(Argument2)
  }),
  Publish: object({
    modules: array(BCSBytes),
    dependencies: array(ObjectID)
  }),
  MakeMoveVec: object({
    type: nullable(string()),
    elements: array(Argument2)
  }),
  Upgrade: object({
    modules: array(BCSBytes),
    dependencies: array(ObjectID),
    package: ObjectID,
    ticket: Argument2
  }),
  $Intent
});
var ObjectArg2 = safeEnum({
  ImmOrOwnedObject: ObjectRef,
  SharedObject: object({
    objectId: ObjectID,
    // snake case in rust
    initialSharedVersion: JsonU64,
    mutable: boolean()
  }),
  Receiving: ObjectRef
});
var CallArg2 = safeEnum({
  Object: ObjectArg2,
  Pure: object({
    bytes: BCSBytes
  }),
  UnresolvedPure: object({
    value: unknown()
  }),
  UnresolvedObject: object({
    objectId: ObjectID,
    version: optional(nullable(JsonU64)),
    digest: optional(nullable(string())),
    initialSharedVersion: optional(nullable(JsonU64))
  })
});
var NormalizedCallArg = safeEnum({
  Object: ObjectArg2,
  Pure: object({
    bytes: BCSBytes
  })
});
var TransactionExpiration2 = safeEnum({
  None: literal(true),
  Epoch: JsonU64
});
var TransactionData2 = object({
  version: literal(2),
  sender: nullish(SuiAddress),
  expiration: nullish(TransactionExpiration2),
  gasData: GasData2,
  inputs: array(CallArg2),
  commands: array(Command2)
});

// ../../node_modules/@mysten/sui/dist/esm/transactions/Commands.js
var Commands = {
  MoveCall(input) {
    const [pkg, mod = "", fn = ""] = "target" in input ? input.target.split("::") : [input.package, input.module, input.function];
    return {
      $kind: "MoveCall",
      MoveCall: {
        package: pkg,
        module: mod,
        function: fn,
        typeArguments: input.typeArguments ?? [],
        arguments: input.arguments ?? []
      }
    };
  },
  TransferObjects(objects, address) {
    return {
      $kind: "TransferObjects",
      TransferObjects: {
        objects: objects.map((o) => parse(Argument2, o)),
        address: parse(Argument2, address)
      }
    };
  },
  SplitCoins(coin, amounts) {
    return {
      $kind: "SplitCoins",
      SplitCoins: {
        coin: parse(Argument2, coin),
        amounts: amounts.map((o) => parse(Argument2, o))
      }
    };
  },
  MergeCoins(destination, sources) {
    return {
      $kind: "MergeCoins",
      MergeCoins: {
        destination: parse(Argument2, destination),
        sources: sources.map((o) => parse(Argument2, o))
      }
    };
  },
  Publish({
    modules,
    dependencies
  }) {
    return {
      $kind: "Publish",
      Publish: {
        modules: modules.map(
          (module2) => typeof module2 === "string" ? module2 : toBase64(new Uint8Array(module2))
        ),
        dependencies: dependencies.map((dep) => normalizeSuiObjectId(dep))
      }
    };
  },
  Upgrade({
    modules,
    dependencies,
    package: packageId,
    ticket
  }) {
    return {
      $kind: "Upgrade",
      Upgrade: {
        modules: modules.map(
          (module2) => typeof module2 === "string" ? module2 : toBase64(new Uint8Array(module2))
        ),
        dependencies: dependencies.map((dep) => normalizeSuiObjectId(dep)),
        package: packageId,
        ticket: parse(Argument2, ticket)
      }
    };
  },
  MakeMoveVec({
    type,
    elements
  }) {
    return {
      $kind: "MakeMoveVec",
      MakeMoveVec: {
        type: type ?? null,
        elements: elements.map((o) => parse(Argument2, o))
      }
    };
  },
  Intent({
    name,
    inputs = {},
    data = {}
  }) {
    return {
      $kind: "$Intent",
      $Intent: {
        name,
        inputs: Object.fromEntries(
          Object.entries(inputs).map(([key, value]) => [
            key,
            Array.isArray(value) ? value.map((o) => parse(Argument2, o)) : parse(Argument2, value)
          ])
        ),
        data
      }
    };
  }
};

// ../../node_modules/@mysten/sui/dist/esm/transactions/data/v1.js
var ObjectRef2 = object({
  digest: string(),
  objectId: string(),
  version: union([pipe(number3(), integer()), string(), bigint()])
});
var ObjectArg3 = safeEnum({
  ImmOrOwned: ObjectRef2,
  Shared: object({
    objectId: ObjectID,
    initialSharedVersion: JsonU64,
    mutable: boolean()
  }),
  Receiving: ObjectRef2
});
var NormalizedCallArg2 = safeEnum({
  Object: ObjectArg3,
  Pure: array(pipe(number3(), integer()))
});
var TransactionInput = union([
  object({
    kind: literal("Input"),
    index: pipe(number3(), integer()),
    value: unknown(),
    type: optional(literal("object"))
  }),
  object({
    kind: literal("Input"),
    index: pipe(number3(), integer()),
    value: unknown(),
    type: literal("pure")
  })
]);
var TransactionExpiration3 = union([
  object({ Epoch: pipe(number3(), integer()) }),
  object({ None: nullable(literal(true)) })
]);
var StringEncodedBigint = pipe(
  union([number3(), string(), bigint()]),
  check((val) => {
    if (!["string", "number", "bigint"].includes(typeof val)) return false;
    try {
      BigInt(val);
      return true;
    } catch {
      return false;
    }
  })
);
var TypeTag2 = union([
  object({ bool: nullable(literal(true)) }),
  object({ u8: nullable(literal(true)) }),
  object({ u64: nullable(literal(true)) }),
  object({ u128: nullable(literal(true)) }),
  object({ address: nullable(literal(true)) }),
  object({ signer: nullable(literal(true)) }),
  object({ vector: lazy(() => TypeTag2) }),
  object({ struct: lazy(() => StructTag3) }),
  object({ u16: nullable(literal(true)) }),
  object({ u32: nullable(literal(true)) }),
  object({ u256: nullable(literal(true)) })
]);
var StructTag3 = object({
  address: string(),
  module: string(),
  name: string(),
  typeParams: array(TypeTag2)
});
var GasConfig = object({
  budget: optional(StringEncodedBigint),
  price: optional(StringEncodedBigint),
  payment: optional(array(ObjectRef2)),
  owner: optional(string())
});
var TransactionArgumentTypes = [
  TransactionInput,
  object({ kind: literal("GasCoin") }),
  object({ kind: literal("Result"), index: pipe(number3(), integer()) }),
  object({
    kind: literal("NestedResult"),
    index: pipe(number3(), integer()),
    resultIndex: pipe(number3(), integer())
  })
];
var TransactionArgument = union([...TransactionArgumentTypes]);
var MoveCallTransaction = object({
  kind: literal("MoveCall"),
  target: pipe(
    string(),
    check((target) => target.split("::").length === 3)
  ),
  typeArguments: array(string()),
  arguments: array(TransactionArgument)
});
var TransferObjectsTransaction = object({
  kind: literal("TransferObjects"),
  objects: array(TransactionArgument),
  address: TransactionArgument
});
var SplitCoinsTransaction = object({
  kind: literal("SplitCoins"),
  coin: TransactionArgument,
  amounts: array(TransactionArgument)
});
var MergeCoinsTransaction = object({
  kind: literal("MergeCoins"),
  destination: TransactionArgument,
  sources: array(TransactionArgument)
});
var MakeMoveVecTransaction = object({
  kind: literal("MakeMoveVec"),
  type: union([object({ Some: TypeTag2 }), object({ None: nullable(literal(true)) })]),
  objects: array(TransactionArgument)
});
var PublishTransaction = object({
  kind: literal("Publish"),
  modules: array(array(pipe(number3(), integer()))),
  dependencies: array(string())
});
var UpgradeTransaction = object({
  kind: literal("Upgrade"),
  modules: array(array(pipe(number3(), integer()))),
  dependencies: array(string()),
  packageId: string(),
  ticket: TransactionArgument
});
var TransactionTypes = [
  MoveCallTransaction,
  TransferObjectsTransaction,
  SplitCoinsTransaction,
  MergeCoinsTransaction,
  PublishTransaction,
  UpgradeTransaction,
  MakeMoveVecTransaction
];
var TransactionType = union([...TransactionTypes]);
var SerializedTransactionDataV1 = object({
  version: literal(1),
  sender: optional(string()),
  expiration: nullish(TransactionExpiration3),
  gasConfig: GasConfig,
  inputs: array(TransactionInput),
  transactions: array(TransactionType)
});
function serializeV1TransactionData(transactionData) {
  const inputs = transactionData.inputs.map(
    (input, index) => {
      if (input.Object) {
        return {
          kind: "Input",
          index,
          value: {
            Object: input.Object.ImmOrOwnedObject ? {
              ImmOrOwned: input.Object.ImmOrOwnedObject
            } : input.Object.Receiving ? {
              Receiving: {
                digest: input.Object.Receiving.digest,
                version: input.Object.Receiving.version,
                objectId: input.Object.Receiving.objectId
              }
            } : {
              Shared: {
                mutable: input.Object.SharedObject.mutable,
                initialSharedVersion: input.Object.SharedObject.initialSharedVersion,
                objectId: input.Object.SharedObject.objectId
              }
            }
          },
          type: "object"
        };
      }
      if (input.Pure) {
        return {
          kind: "Input",
          index,
          value: {
            Pure: Array.from(fromBase64(input.Pure.bytes))
          },
          type: "pure"
        };
      }
      if (input.UnresolvedPure) {
        return {
          kind: "Input",
          type: "pure",
          index,
          value: input.UnresolvedPure.value
        };
      }
      if (input.UnresolvedObject) {
        return {
          kind: "Input",
          type: "object",
          index,
          value: input.UnresolvedObject.objectId
        };
      }
      throw new Error("Invalid input");
    }
  );
  return {
    version: 1,
    sender: transactionData.sender ?? void 0,
    expiration: transactionData.expiration?.$kind === "Epoch" ? { Epoch: Number(transactionData.expiration.Epoch) } : transactionData.expiration ? { None: true } : null,
    gasConfig: {
      owner: transactionData.gasData.owner ?? void 0,
      budget: transactionData.gasData.budget ?? void 0,
      price: transactionData.gasData.price ?? void 0,
      payment: transactionData.gasData.payment ?? void 0
    },
    inputs,
    transactions: transactionData.commands.map((command) => {
      if (command.MakeMoveVec) {
        return {
          kind: "MakeMoveVec",
          type: command.MakeMoveVec.type === null ? { None: true } : { Some: TypeTagSerializer.parseFromStr(command.MakeMoveVec.type) },
          objects: command.MakeMoveVec.elements.map(
            (arg) => convertTransactionArgument(arg, inputs)
          )
        };
      }
      if (command.MergeCoins) {
        return {
          kind: "MergeCoins",
          destination: convertTransactionArgument(command.MergeCoins.destination, inputs),
          sources: command.MergeCoins.sources.map((arg) => convertTransactionArgument(arg, inputs))
        };
      }
      if (command.MoveCall) {
        return {
          kind: "MoveCall",
          target: `${command.MoveCall.package}::${command.MoveCall.module}::${command.MoveCall.function}`,
          typeArguments: command.MoveCall.typeArguments,
          arguments: command.MoveCall.arguments.map(
            (arg) => convertTransactionArgument(arg, inputs)
          )
        };
      }
      if (command.Publish) {
        return {
          kind: "Publish",
          modules: command.Publish.modules.map((mod) => Array.from(fromBase64(mod))),
          dependencies: command.Publish.dependencies
        };
      }
      if (command.SplitCoins) {
        return {
          kind: "SplitCoins",
          coin: convertTransactionArgument(command.SplitCoins.coin, inputs),
          amounts: command.SplitCoins.amounts.map((arg) => convertTransactionArgument(arg, inputs))
        };
      }
      if (command.TransferObjects) {
        return {
          kind: "TransferObjects",
          objects: command.TransferObjects.objects.map(
            (arg) => convertTransactionArgument(arg, inputs)
          ),
          address: convertTransactionArgument(command.TransferObjects.address, inputs)
        };
      }
      if (command.Upgrade) {
        return {
          kind: "Upgrade",
          modules: command.Upgrade.modules.map((mod) => Array.from(fromBase64(mod))),
          dependencies: command.Upgrade.dependencies,
          packageId: command.Upgrade.package,
          ticket: convertTransactionArgument(command.Upgrade.ticket, inputs)
        };
      }
      throw new Error(`Unknown transaction ${Object.keys(command)}`);
    })
  };
}
function convertTransactionArgument(arg, inputs) {
  if (arg.$kind === "GasCoin") {
    return { kind: "GasCoin" };
  }
  if (arg.$kind === "Result") {
    return { kind: "Result", index: arg.Result };
  }
  if (arg.$kind === "NestedResult") {
    return { kind: "NestedResult", index: arg.NestedResult[0], resultIndex: arg.NestedResult[1] };
  }
  if (arg.$kind === "Input") {
    return inputs[arg.Input];
  }
  throw new Error(`Invalid argument ${Object.keys(arg)}`);
}
function transactionDataFromV1(data) {
  return parse(TransactionData2, {
    version: 2,
    sender: data.sender ?? null,
    expiration: data.expiration ? "Epoch" in data.expiration ? { Epoch: data.expiration.Epoch } : { None: true } : null,
    gasData: {
      owner: data.gasConfig.owner ?? null,
      budget: data.gasConfig.budget?.toString() ?? null,
      price: data.gasConfig.price?.toString() ?? null,
      payment: data.gasConfig.payment?.map((ref) => ({
        digest: ref.digest,
        objectId: ref.objectId,
        version: ref.version.toString()
      })) ?? null
    },
    inputs: data.inputs.map((input) => {
      if (input.kind === "Input") {
        if (is(NormalizedCallArg2, input.value)) {
          const value = parse(NormalizedCallArg2, input.value);
          if (value.Object) {
            if (value.Object.ImmOrOwned) {
              return {
                Object: {
                  ImmOrOwnedObject: {
                    objectId: value.Object.ImmOrOwned.objectId,
                    version: String(value.Object.ImmOrOwned.version),
                    digest: value.Object.ImmOrOwned.digest
                  }
                }
              };
            }
            if (value.Object.Shared) {
              return {
                Object: {
                  SharedObject: {
                    mutable: value.Object.Shared.mutable ?? null,
                    initialSharedVersion: value.Object.Shared.initialSharedVersion,
                    objectId: value.Object.Shared.objectId
                  }
                }
              };
            }
            if (value.Object.Receiving) {
              return {
                Object: {
                  Receiving: {
                    digest: value.Object.Receiving.digest,
                    version: String(value.Object.Receiving.version),
                    objectId: value.Object.Receiving.objectId
                  }
                }
              };
            }
            throw new Error("Invalid object input");
          }
          return {
            Pure: {
              bytes: toBase64(new Uint8Array(value.Pure))
            }
          };
        }
        if (input.type === "object") {
          return {
            UnresolvedObject: {
              objectId: input.value
            }
          };
        }
        return {
          UnresolvedPure: {
            value: input.value
          }
        };
      }
      throw new Error("Invalid input");
    }),
    commands: data.transactions.map((transaction) => {
      switch (transaction.kind) {
        case "MakeMoveVec":
          return {
            MakeMoveVec: {
              type: "Some" in transaction.type ? TypeTagSerializer.tagToString(transaction.type.Some) : null,
              elements: transaction.objects.map((arg) => parseV1TransactionArgument(arg))
            }
          };
        case "MergeCoins": {
          return {
            MergeCoins: {
              destination: parseV1TransactionArgument(transaction.destination),
              sources: transaction.sources.map((arg) => parseV1TransactionArgument(arg))
            }
          };
        }
        case "MoveCall": {
          const [pkg, mod, fn] = transaction.target.split("::");
          return {
            MoveCall: {
              package: pkg,
              module: mod,
              function: fn,
              typeArguments: transaction.typeArguments,
              arguments: transaction.arguments.map((arg) => parseV1TransactionArgument(arg))
            }
          };
        }
        case "Publish": {
          return {
            Publish: {
              modules: transaction.modules.map((mod) => toBase64(Uint8Array.from(mod))),
              dependencies: transaction.dependencies
            }
          };
        }
        case "SplitCoins": {
          return {
            SplitCoins: {
              coin: parseV1TransactionArgument(transaction.coin),
              amounts: transaction.amounts.map((arg) => parseV1TransactionArgument(arg))
            }
          };
        }
        case "TransferObjects": {
          return {
            TransferObjects: {
              objects: transaction.objects.map((arg) => parseV1TransactionArgument(arg)),
              address: parseV1TransactionArgument(transaction.address)
            }
          };
        }
        case "Upgrade": {
          return {
            Upgrade: {
              modules: transaction.modules.map((mod) => toBase64(Uint8Array.from(mod))),
              dependencies: transaction.dependencies,
              package: transaction.packageId,
              ticket: parseV1TransactionArgument(transaction.ticket)
            }
          };
        }
      }
      throw new Error(`Unknown transaction ${Object.keys(transaction)}`);
    })
  });
}
function parseV1TransactionArgument(arg) {
  switch (arg.kind) {
    case "GasCoin": {
      return { GasCoin: true };
    }
    case "Result":
      return { Result: arg.index };
    case "NestedResult": {
      return { NestedResult: [arg.index, arg.resultIndex] };
    }
    case "Input": {
      return { Input: arg.index };
    }
  }
}

// ../../node_modules/@mysten/sui/dist/esm/transactions/data/v2.js
function enumUnion(options) {
  return union(
    Object.entries(options).map(([key, value]) => object({ [key]: value }))
  );
}
var Argument3 = enumUnion({
  GasCoin: literal(true),
  Input: pipe(number3(), integer()),
  Result: pipe(number3(), integer()),
  NestedResult: tuple([pipe(number3(), integer()), pipe(number3(), integer())])
});
var GasData3 = object({
  budget: nullable(JsonU64),
  price: nullable(JsonU64),
  owner: nullable(SuiAddress),
  payment: nullable(array(ObjectRef))
});
var ProgrammableMoveCall3 = object({
  package: ObjectID,
  module: string(),
  function: string(),
  // snake case in rust
  typeArguments: array(string()),
  arguments: array(Argument3)
});
var $Intent2 = object({
  name: string(),
  inputs: record(string(), union([Argument3, array(Argument3)])),
  data: record(string(), unknown())
});
var Command3 = enumUnion({
  MoveCall: ProgrammableMoveCall3,
  TransferObjects: object({
    objects: array(Argument3),
    address: Argument3
  }),
  SplitCoins: object({
    coin: Argument3,
    amounts: array(Argument3)
  }),
  MergeCoins: object({
    destination: Argument3,
    sources: array(Argument3)
  }),
  Publish: object({
    modules: array(BCSBytes),
    dependencies: array(ObjectID)
  }),
  MakeMoveVec: object({
    type: nullable(string()),
    elements: array(Argument3)
  }),
  Upgrade: object({
    modules: array(BCSBytes),
    dependencies: array(ObjectID),
    package: ObjectID,
    ticket: Argument3
  }),
  $Intent: $Intent2
});
var ObjectArg4 = enumUnion({
  ImmOrOwnedObject: ObjectRef,
  SharedObject: object({
    objectId: ObjectID,
    // snake case in rust
    initialSharedVersion: JsonU64,
    mutable: boolean()
  }),
  Receiving: ObjectRef
});
var CallArg3 = enumUnion({
  Object: ObjectArg4,
  Pure: object({
    bytes: BCSBytes
  }),
  UnresolvedPure: object({
    value: unknown()
  }),
  UnresolvedObject: object({
    objectId: ObjectID,
    version: optional(nullable(JsonU64)),
    digest: optional(nullable(string())),
    initialSharedVersion: optional(nullable(JsonU64))
  })
});
var TransactionExpiration4 = enumUnion({
  None: literal(true),
  Epoch: JsonU64
});
var SerializedTransactionDataV2 = object({
  version: literal(2),
  sender: nullish(SuiAddress),
  expiration: nullish(TransactionExpiration4),
  gasData: GasData3,
  inputs: array(CallArg3),
  commands: array(Command3)
});

// ../../node_modules/@mysten/sui/dist/esm/transactions/json-rpc-resolver.js
var MAX_OBJECTS_PER_FETCH = 50;
var GAS_SAFE_OVERHEAD = 1000n;
var MAX_GAS = 5e10;
async function resolveTransactionData(transactionData, options, next) {
  await normalizeInputs(transactionData, options);
  await resolveObjectReferences(transactionData, options);
  if (!options.onlyTransactionKind) {
    await setGasPrice(transactionData, options);
    await setGasBudget(transactionData, options);
    await setGasPayment(transactionData, options);
  }
  await validate(transactionData);
  return await next();
}
async function setGasPrice(transactionData, options) {
  if (!transactionData.gasConfig.price) {
    transactionData.gasConfig.price = String(await getClient(options).getReferenceGasPrice());
  }
}
async function setGasBudget(transactionData, options) {
  if (transactionData.gasConfig.budget) {
    return;
  }
  const dryRunResult = await getClient(options).dryRunTransactionBlock({
    transactionBlock: transactionData.build({
      overrides: {
        gasData: {
          budget: String(MAX_GAS),
          payment: []
        }
      }
    })
  });
  if (dryRunResult.effects.status.status !== "success") {
    throw new Error(
      `Dry run failed, could not automatically determine a budget: ${dryRunResult.effects.status.error}`,
      { cause: dryRunResult }
    );
  }
  const safeOverhead = GAS_SAFE_OVERHEAD * BigInt(transactionData.gasConfig.price || 1n);
  const baseComputationCostWithOverhead = BigInt(dryRunResult.effects.gasUsed.computationCost) + safeOverhead;
  const gasBudget = baseComputationCostWithOverhead + BigInt(dryRunResult.effects.gasUsed.storageCost) - BigInt(dryRunResult.effects.gasUsed.storageRebate);
  transactionData.gasConfig.budget = String(
    gasBudget > baseComputationCostWithOverhead ? gasBudget : baseComputationCostWithOverhead
  );
}
async function setGasPayment(transactionData, options) {
  if (!transactionData.gasConfig.payment) {
    const coins = await getClient(options).getCoins({
      owner: transactionData.gasConfig.owner || transactionData.sender,
      coinType: SUI_TYPE_ARG
    });
    const paymentCoins = coins.data.filter((coin) => {
      const matchingInput = transactionData.inputs.find((input) => {
        if (input.Object?.ImmOrOwnedObject) {
          return coin.coinObjectId === input.Object.ImmOrOwnedObject.objectId;
        }
        return false;
      });
      return !matchingInput;
    }).map((coin) => ({
      objectId: coin.coinObjectId,
      digest: coin.digest,
      version: coin.version
    }));
    if (!paymentCoins.length) {
      throw new Error("No valid gas coins found for the transaction.");
    }
    transactionData.gasConfig.payment = paymentCoins.map((payment) => parse(ObjectRef, payment));
  }
}
async function resolveObjectReferences(transactionData, options) {
  const objectsToResolve = transactionData.inputs.filter((input) => {
    return input.UnresolvedObject && !(input.UnresolvedObject.version || input.UnresolvedObject?.initialSharedVersion);
  });
  const dedupedIds = [
    ...new Set(
      objectsToResolve.map((input) => normalizeSuiObjectId(input.UnresolvedObject.objectId))
    )
  ];
  const objectChunks = dedupedIds.length ? chunk(dedupedIds, MAX_OBJECTS_PER_FETCH) : [];
  const resolved = (await Promise.all(
    objectChunks.map(
      (chunk2) => getClient(options).multiGetObjects({
        ids: chunk2,
        options: { showOwner: true }
      })
    )
  )).flat();
  const responsesById = new Map(
    dedupedIds.map((id2, index) => {
      return [id2, resolved[index]];
    })
  );
  const invalidObjects = Array.from(responsesById).filter(([_, obj]) => obj.error).map(([_, obj]) => JSON.stringify(obj.error));
  if (invalidObjects.length) {
    throw new Error(`The following input objects are invalid: ${invalidObjects.join(", ")}`);
  }
  const objects = resolved.map((object2) => {
    if (object2.error || !object2.data) {
      throw new Error(`Failed to fetch object: ${object2.error}`);
    }
    const owner = object2.data.owner;
    const initialSharedVersion = owner && typeof owner === "object" && "Shared" in owner ? owner.Shared.initial_shared_version : null;
    return {
      objectId: object2.data.objectId,
      digest: object2.data.digest,
      version: object2.data.version,
      initialSharedVersion
    };
  });
  const objectsById = new Map(
    dedupedIds.map((id2, index) => {
      return [id2, objects[index]];
    })
  );
  for (const [index, input] of transactionData.inputs.entries()) {
    if (!input.UnresolvedObject) {
      continue;
    }
    let updated;
    const id2 = normalizeSuiAddress(input.UnresolvedObject.objectId);
    const object2 = objectsById.get(id2);
    if (input.UnresolvedObject.initialSharedVersion ?? object2?.initialSharedVersion) {
      updated = Inputs.SharedObjectRef({
        objectId: id2,
        initialSharedVersion: input.UnresolvedObject.initialSharedVersion || object2?.initialSharedVersion,
        mutable: isUsedAsMutable(transactionData, index)
      });
    } else if (isUsedAsReceiving(transactionData, index)) {
      updated = Inputs.ReceivingRef(
        {
          objectId: id2,
          digest: input.UnresolvedObject.digest ?? object2?.digest,
          version: input.UnresolvedObject.version ?? object2?.version
        }
      );
    }
    transactionData.inputs[transactionData.inputs.indexOf(input)] = updated ?? Inputs.ObjectRef({
      objectId: id2,
      digest: input.UnresolvedObject.digest ?? object2?.digest,
      version: input.UnresolvedObject.version ?? object2?.version
    });
  }
}
async function normalizeInputs(transactionData, options) {
  const { inputs, commands } = transactionData;
  const moveCallsToResolve = [];
  const moveFunctionsToResolve = /* @__PURE__ */ new Set();
  commands.forEach((command) => {
    if (command.MoveCall) {
      if (command.MoveCall._argumentTypes) {
        return;
      }
      const inputs2 = command.MoveCall.arguments.map((arg) => {
        if (arg.$kind === "Input") {
          return transactionData.inputs[arg.Input];
        }
        return null;
      });
      const needsResolution = inputs2.some(
        (input) => input?.UnresolvedPure || input?.UnresolvedObject
      );
      if (needsResolution) {
        const functionName = `${command.MoveCall.package}::${command.MoveCall.module}::${command.MoveCall.function}`;
        moveFunctionsToResolve.add(functionName);
        moveCallsToResolve.push(command.MoveCall);
      }
    }
    switch (command.$kind) {
      case "SplitCoins":
        command.SplitCoins.amounts.forEach((amount) => {
          normalizeRawArgument(amount, suiBcs.U64, transactionData);
        });
        break;
      case "TransferObjects":
        normalizeRawArgument(command.TransferObjects.address, suiBcs.Address, transactionData);
        break;
    }
  });
  const moveFunctionParameters = /* @__PURE__ */ new Map();
  if (moveFunctionsToResolve.size > 0) {
    const client = getClient(options);
    await Promise.all(
      [...moveFunctionsToResolve].map(async (functionName) => {
        const [packageId, moduleId, functionId] = functionName.split("::");
        const def = await client.getNormalizedMoveFunction({
          package: packageId,
          module: moduleId,
          function: functionId
        });
        moveFunctionParameters.set(
          functionName,
          def.parameters.map((param) => normalizedTypeToMoveTypeSignature(param))
        );
      })
    );
  }
  if (moveCallsToResolve.length) {
    await Promise.all(
      moveCallsToResolve.map(async (moveCall) => {
        const parameters = moveFunctionParameters.get(
          `${moveCall.package}::${moveCall.module}::${moveCall.function}`
        );
        if (!parameters) {
          return;
        }
        const hasTxContext = parameters.length > 0 && isTxContext(parameters.at(-1));
        const params = hasTxContext ? parameters.slice(0, parameters.length - 1) : parameters;
        moveCall._argumentTypes = params;
      })
    );
  }
  commands.forEach((command) => {
    if (!command.MoveCall) {
      return;
    }
    const moveCall = command.MoveCall;
    const fnName = `${moveCall.package}::${moveCall.module}::${moveCall.function}`;
    const params = moveCall._argumentTypes;
    if (!params) {
      return;
    }
    if (params.length !== command.MoveCall.arguments.length) {
      throw new Error(`Incorrect number of arguments for ${fnName}`);
    }
    params.forEach((param, i) => {
      const arg = moveCall.arguments[i];
      if (arg.$kind !== "Input") return;
      const input = inputs[arg.Input];
      if (!input.UnresolvedPure && !input.UnresolvedObject) {
        return;
      }
      const inputValue = input.UnresolvedPure?.value ?? input.UnresolvedObject?.objectId;
      const schema = getPureBcsSchema(param.body);
      if (schema) {
        arg.type = "pure";
        inputs[inputs.indexOf(input)] = Inputs.Pure(schema.serialize(inputValue));
        return;
      }
      if (typeof inputValue !== "string") {
        throw new Error(
          `Expect the argument to be an object id string, got ${JSON.stringify(
            inputValue,
            null,
            2
          )}`
        );
      }
      arg.type = "object";
      const unresolvedObject = input.UnresolvedPure ? {
        $kind: "UnresolvedObject",
        UnresolvedObject: {
          objectId: inputValue
        }
      } : input;
      inputs[arg.Input] = unresolvedObject;
    });
  });
}
function validate(transactionData) {
  transactionData.inputs.forEach((input, index) => {
    if (input.$kind !== "Object" && input.$kind !== "Pure") {
      throw new Error(
        `Input at index ${index} has not been resolved.  Expected a Pure or Object input, but found ${JSON.stringify(
          input
        )}`
      );
    }
  });
}
function normalizeRawArgument(arg, schema, transactionData) {
  if (arg.$kind !== "Input") {
    return;
  }
  const input = transactionData.inputs[arg.Input];
  if (input.$kind !== "UnresolvedPure") {
    return;
  }
  transactionData.inputs[arg.Input] = Inputs.Pure(schema.serialize(input.UnresolvedPure.value));
}
function isUsedAsMutable(transactionData, index) {
  let usedAsMutable = false;
  transactionData.getInputUses(index, (arg, tx) => {
    if (tx.MoveCall && tx.MoveCall._argumentTypes) {
      const argIndex = tx.MoveCall.arguments.indexOf(arg);
      usedAsMutable = tx.MoveCall._argumentTypes[argIndex].ref !== "&" || usedAsMutable;
    }
    if (tx.$kind === "MakeMoveVec" || tx.$kind === "MergeCoins" || tx.$kind === "SplitCoins") {
      usedAsMutable = true;
    }
  });
  return usedAsMutable;
}
function isUsedAsReceiving(transactionData, index) {
  let usedAsReceiving = false;
  transactionData.getInputUses(index, (arg, tx) => {
    if (tx.MoveCall && tx.MoveCall._argumentTypes) {
      const argIndex = tx.MoveCall.arguments.indexOf(arg);
      usedAsReceiving = isReceivingType(tx.MoveCall._argumentTypes[argIndex]) || usedAsReceiving;
    }
  });
  return usedAsReceiving;
}
function isReceivingType(type) {
  if (typeof type.body !== "object" || !("datatype" in type.body)) {
    return false;
  }
  return type.body.datatype.package === "0x2" && type.body.datatype.module === "transfer" && type.body.datatype.type === "Receiving";
}
function getClient(options) {
  if (!options.client) {
    throw new Error(
      `No sui client passed to Transaction#build, but transaction data was not sufficient to build offline.`
    );
  }
  return options.client;
}
function chunk(arr, size) {
  return Array.from(
    { length: Math.ceil(arr.length / size) },
    (_, i) => arr.slice(i * size, i * size + size)
  );
}

// ../../node_modules/@mysten/sui/dist/esm/transactions/object.js
function createObjectMethods(makeObject) {
  function object2(value) {
    return makeObject(value);
  }
  object2.system = () => object2("0x5");
  object2.clock = () => object2("0x6");
  object2.random = () => object2("0x8");
  object2.denyList = () => object2("0x403");
  return object2;
}

// ../../node_modules/@mysten/sui/dist/esm/transactions/pure.js
function createPure(makePure) {
  function pure(typeOrSerializedValue, value) {
    if (typeof typeOrSerializedValue === "string") {
      return makePure(schemaFromName(typeOrSerializedValue).serialize(value));
    }
    if (typeOrSerializedValue instanceof Uint8Array || isSerializedBcs(typeOrSerializedValue)) {
      return makePure(typeOrSerializedValue);
    }
    throw new Error("tx.pure must be called either a bcs type name, or a serialized bcs value");
  }
  pure.u8 = (value) => makePure(suiBcs.U8.serialize(value));
  pure.u16 = (value) => makePure(suiBcs.U16.serialize(value));
  pure.u32 = (value) => makePure(suiBcs.U32.serialize(value));
  pure.u64 = (value) => makePure(suiBcs.U64.serialize(value));
  pure.u128 = (value) => makePure(suiBcs.U128.serialize(value));
  pure.u256 = (value) => makePure(suiBcs.U256.serialize(value));
  pure.bool = (value) => makePure(suiBcs.Bool.serialize(value));
  pure.string = (value) => makePure(suiBcs.String.serialize(value));
  pure.address = (value) => makePure(suiBcs.Address.serialize(value));
  pure.id = pure.address;
  pure.vector = (type, value) => {
    return makePure(suiBcs.vector(schemaFromName(type)).serialize(value));
  };
  pure.option = (type, value) => {
    return makePure(suiBcs.option(schemaFromName(type)).serialize(value));
  };
  return pure;
}
function schemaFromName(name) {
  switch (name) {
    case "u8":
      return suiBcs.u8();
    case "u16":
      return suiBcs.u16();
    case "u32":
      return suiBcs.u32();
    case "u64":
      return suiBcs.u64();
    case "u128":
      return suiBcs.u128();
    case "u256":
      return suiBcs.u256();
    case "bool":
      return suiBcs.bool();
    case "string":
      return suiBcs.string();
    case "id":
    case "address":
      return suiBcs.Address;
  }
  const generic = name.match(/^(vector|option)<(.+)>$/);
  if (generic) {
    const [kind, inner] = generic.slice(1);
    if (kind === "vector") {
      return suiBcs.vector(schemaFromName(inner));
    } else {
      return suiBcs.option(schemaFromName(inner));
    }
  }
  throw new Error(`Invalid Pure type name: ${name}`);
}

// ../../node_modules/@mysten/sui/dist/esm/transactions/hash.js
function hashTypedData(typeTag, data) {
  const typeTagBytes = Array.from(`${typeTag}::`).map((e) => e.charCodeAt(0));
  const dataWithTag = new Uint8Array(typeTagBytes.length + data.length);
  dataWithTag.set(typeTagBytes);
  dataWithTag.set(data, typeTagBytes.length);
  return blake2b(dataWithTag, { dkLen: 32 });
}

// ../../node_modules/@mysten/sui/dist/esm/transactions/TransactionData.js
function prepareSuiAddress(address) {
  return normalizeSuiAddress(address).replace("0x", "");
}
var TransactionDataBuilder = class _TransactionDataBuilder {
  constructor(clone) {
    this.version = 2;
    this.sender = clone?.sender ?? null;
    this.expiration = clone?.expiration ?? null;
    this.inputs = clone?.inputs ?? [];
    this.commands = clone?.commands ?? [];
    this.gasData = clone?.gasData ?? {
      budget: null,
      price: null,
      owner: null,
      payment: null
    };
  }
  static fromKindBytes(bytes4) {
    const kind = suiBcs.TransactionKind.parse(bytes4);
    const programmableTx = kind.ProgrammableTransaction;
    if (!programmableTx) {
      throw new Error("Unable to deserialize from bytes.");
    }
    return _TransactionDataBuilder.restore({
      version: 2,
      sender: null,
      expiration: null,
      gasData: {
        budget: null,
        owner: null,
        payment: null,
        price: null
      },
      inputs: programmableTx.inputs,
      commands: programmableTx.commands
    });
  }
  static fromBytes(bytes4) {
    const rawData = suiBcs.TransactionData.parse(bytes4);
    const data = rawData?.V1;
    const programmableTx = data.kind.ProgrammableTransaction;
    if (!data || !programmableTx) {
      throw new Error("Unable to deserialize from bytes.");
    }
    return _TransactionDataBuilder.restore({
      version: 2,
      sender: data.sender,
      expiration: data.expiration,
      gasData: data.gasData,
      inputs: programmableTx.inputs,
      commands: programmableTx.commands
    });
  }
  static restore(data) {
    if (data.version === 2) {
      return new _TransactionDataBuilder(parse(TransactionData2, data));
    } else {
      return new _TransactionDataBuilder(parse(TransactionData2, transactionDataFromV1(data)));
    }
  }
  /**
   * Generate transaction digest.
   *
   * @param bytes BCS serialized transaction data
   * @returns transaction digest.
   */
  static getDigestFromBytes(bytes4) {
    const hash = hashTypedData("TransactionData", bytes4);
    return toBase58(hash);
  }
  // @deprecated use gasData instead
  get gasConfig() {
    return this.gasData;
  }
  // @deprecated use gasData instead
  set gasConfig(value) {
    this.gasData = value;
  }
  build({
    maxSizeBytes = Infinity,
    overrides,
    onlyTransactionKind
  } = {}) {
    const inputs = this.inputs;
    const commands = this.commands;
    const kind = {
      ProgrammableTransaction: {
        inputs,
        commands
      }
    };
    if (onlyTransactionKind) {
      return suiBcs.TransactionKind.serialize(kind, { maxSize: maxSizeBytes }).toBytes();
    }
    const expiration = overrides?.expiration ?? this.expiration;
    const sender = overrides?.sender ?? this.sender;
    const gasData = { ...this.gasData, ...overrides?.gasConfig, ...overrides?.gasData };
    if (!sender) {
      throw new Error("Missing transaction sender");
    }
    if (!gasData.budget) {
      throw new Error("Missing gas budget");
    }
    if (!gasData.payment) {
      throw new Error("Missing gas payment");
    }
    if (!gasData.price) {
      throw new Error("Missing gas price");
    }
    const transactionData = {
      sender: prepareSuiAddress(sender),
      expiration: expiration ? expiration : { None: true },
      gasData: {
        payment: gasData.payment,
        owner: prepareSuiAddress(this.gasData.owner ?? sender),
        price: BigInt(gasData.price),
        budget: BigInt(gasData.budget)
      },
      kind: {
        ProgrammableTransaction: {
          inputs,
          commands
        }
      }
    };
    return suiBcs.TransactionData.serialize(
      { V1: transactionData },
      { maxSize: maxSizeBytes }
    ).toBytes();
  }
  addInput(type, arg) {
    const index = this.inputs.length;
    this.inputs.push(arg);
    return { Input: index, type, $kind: "Input" };
  }
  getInputUses(index, fn) {
    this.mapArguments((arg, command) => {
      if (arg.$kind === "Input" && arg.Input === index) {
        fn(arg, command);
      }
      return arg;
    });
  }
  mapArguments(fn) {
    for (const command of this.commands) {
      switch (command.$kind) {
        case "MoveCall":
          command.MoveCall.arguments = command.MoveCall.arguments.map((arg) => fn(arg, command));
          break;
        case "TransferObjects":
          command.TransferObjects.objects = command.TransferObjects.objects.map(
            (arg) => fn(arg, command)
          );
          command.TransferObjects.address = fn(command.TransferObjects.address, command);
          break;
        case "SplitCoins":
          command.SplitCoins.coin = fn(command.SplitCoins.coin, command);
          command.SplitCoins.amounts = command.SplitCoins.amounts.map((arg) => fn(arg, command));
          break;
        case "MergeCoins":
          command.MergeCoins.destination = fn(command.MergeCoins.destination, command);
          command.MergeCoins.sources = command.MergeCoins.sources.map((arg) => fn(arg, command));
          break;
        case "MakeMoveVec":
          command.MakeMoveVec.elements = command.MakeMoveVec.elements.map(
            (arg) => fn(arg, command)
          );
          break;
        case "Upgrade":
          command.Upgrade.ticket = fn(command.Upgrade.ticket, command);
          break;
        case "$Intent":
          const inputs = command.$Intent.inputs;
          command.$Intent.inputs = {};
          for (const [key, value] of Object.entries(inputs)) {
            command.$Intent.inputs[key] = Array.isArray(value) ? value.map((arg) => fn(arg, command)) : fn(value, command);
          }
          break;
        case "Publish":
          break;
        default:
          throw new Error(`Unexpected transaction kind: ${command.$kind}`);
      }
    }
  }
  replaceCommand(index, replacement) {
    if (!Array.isArray(replacement)) {
      this.commands[index] = replacement;
      return;
    }
    const sizeDiff = replacement.length - 1;
    this.commands.splice(index, 1, ...replacement);
    if (sizeDiff !== 0) {
      this.mapArguments((arg) => {
        switch (arg.$kind) {
          case "Result":
            if (arg.Result > index) {
              arg.Result += sizeDiff;
            }
            break;
          case "NestedResult":
            if (arg.NestedResult[0] > index) {
              arg.NestedResult[0] += sizeDiff;
            }
            break;
        }
        return arg;
      });
    }
  }
  getDigest() {
    const bytes4 = this.build({ onlyTransactionKind: false });
    return _TransactionDataBuilder.getDigestFromBytes(bytes4);
  }
  snapshot() {
    return parse(TransactionData2, this);
  }
};

// ../../node_modules/@mysten/sui/dist/esm/transactions/utils.js
function getIdFromCallArg(arg) {
  if (typeof arg === "string") {
    return normalizeSuiAddress(arg);
  }
  if (arg.Object) {
    if (arg.Object.ImmOrOwnedObject) {
      return normalizeSuiAddress(arg.Object.ImmOrOwnedObject.objectId);
    }
    if (arg.Object.Receiving) {
      return normalizeSuiAddress(arg.Object.Receiving.objectId);
    }
    return normalizeSuiAddress(arg.Object.SharedObject.objectId);
  }
  if (arg.UnresolvedObject) {
    return normalizeSuiAddress(arg.UnresolvedObject.objectId);
  }
  return void 0;
}

// ../../node_modules/@mysten/sui/dist/esm/transactions/Transaction.js
var __typeError4 = (msg) => {
  throw TypeError(msg);
};
var __accessCheck4 = (obj, member, msg) => member.has(obj) || __typeError4("Cannot " + msg);
var __privateGet4 = (obj, member, getter) => (__accessCheck4(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd4 = (obj, member, value) => member.has(obj) ? __typeError4("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet4 = (obj, member, value, setter) => (__accessCheck4(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod3 = (obj, member, method) => (__accessCheck4(obj, member, "access private method"), method);
var _serializationPlugins;
var _buildPlugins;
var _intentResolvers;
var _data;
var _Transaction_instances;
var normalizeTransactionArgument_fn;
var resolveArgument_fn;
var prepareBuild_fn;
var runPlugins_fn;
function createTransactionResult(index) {
  const baseResult = { $kind: "Result", Result: index };
  const nestedResults = [];
  const nestedResultFor = (resultIndex) => nestedResults[resultIndex] ?? (nestedResults[resultIndex] = {
    $kind: "NestedResult",
    NestedResult: [index, resultIndex]
  });
  return new Proxy(baseResult, {
    set() {
      throw new Error(
        "The transaction result is a proxy, and does not support setting properties directly"
      );
    },
    // TODO: Instead of making this return a concrete argument, we should ideally
    // make it reference-based (so that this gets resolved at build-time), which
    // allows re-ordering transactions.
    get(target, property) {
      if (property in target) {
        return Reflect.get(target, property);
      }
      if (property === Symbol.iterator) {
        return function* () {
          let i = 0;
          while (true) {
            yield nestedResultFor(i);
            i++;
          }
        };
      }
      if (typeof property === "symbol") return;
      const resultIndex = parseInt(property, 10);
      if (Number.isNaN(resultIndex) || resultIndex < 0) return;
      return nestedResultFor(resultIndex);
    }
  });
}
var TRANSACTION_BRAND = Symbol.for("@mysten/transaction");
function isTransaction(obj) {
  return !!obj && typeof obj === "object" && obj[TRANSACTION_BRAND] === true;
}
var modulePluginRegistry = {
  buildPlugins: /* @__PURE__ */ new Map(),
  serializationPlugins: /* @__PURE__ */ new Map()
};
var TRANSACTION_REGISTRY_KEY = Symbol.for("@mysten/transaction/registry");
function getGlobalPluginRegistry() {
  try {
    const target = globalThis;
    if (!target[TRANSACTION_REGISTRY_KEY]) {
      target[TRANSACTION_REGISTRY_KEY] = modulePluginRegistry;
    }
    return target[TRANSACTION_REGISTRY_KEY];
  } catch (e) {
    return modulePluginRegistry;
  }
}
var _Transaction = class _Transaction2 {
  constructor() {
    __privateAdd4(this, _Transaction_instances);
    __privateAdd4(this, _serializationPlugins);
    __privateAdd4(this, _buildPlugins);
    __privateAdd4(this, _intentResolvers, /* @__PURE__ */ new Map());
    __privateAdd4(this, _data);
    this.object = createObjectMethods(
      (value) => {
        if (typeof value === "function") {
          return this.object(value(this));
        }
        if (typeof value === "object" && is(Argument2, value)) {
          return value;
        }
        const id2 = getIdFromCallArg(value);
        const inserted = __privateGet4(this, _data).inputs.find((i) => id2 === getIdFromCallArg(i));
        if (inserted?.Object?.SharedObject && typeof value === "object" && value.Object?.SharedObject) {
          inserted.Object.SharedObject.mutable = inserted.Object.SharedObject.mutable || value.Object.SharedObject.mutable;
        }
        return inserted ? { $kind: "Input", Input: __privateGet4(this, _data).inputs.indexOf(inserted), type: "object" } : __privateGet4(this, _data).addInput(
          "object",
          typeof value === "string" ? {
            $kind: "UnresolvedObject",
            UnresolvedObject: { objectId: normalizeSuiAddress(value) }
          } : value
        );
      }
    );
    const globalPlugins = getGlobalPluginRegistry();
    __privateSet4(this, _data, new TransactionDataBuilder());
    __privateSet4(this, _buildPlugins, [...globalPlugins.buildPlugins.values()]);
    __privateSet4(this, _serializationPlugins, [...globalPlugins.serializationPlugins.values()]);
  }
  /**
   * Converts from a serialize transaction kind (built with `build({ onlyTransactionKind: true })`) to a `Transaction` class.
   * Supports either a byte array, or base64-encoded bytes.
   */
  static fromKind(serialized) {
    const tx = new _Transaction2();
    __privateSet4(tx, _data, TransactionDataBuilder.fromKindBytes(
      typeof serialized === "string" ? fromBase64(serialized) : serialized
    ));
    return tx;
  }
  /**
   * Converts from a serialized transaction format to a `Transaction` class.
   * There are two supported serialized formats:
   * - A string returned from `Transaction#serialize`. The serialized format must be compatible, or it will throw an error.
   * - A byte array (or base64-encoded bytes) containing BCS transaction data.
   */
  static from(transaction) {
    const newTransaction = new _Transaction2();
    if (isTransaction(transaction)) {
      __privateSet4(newTransaction, _data, new TransactionDataBuilder(transaction.getData()));
    } else if (typeof transaction !== "string" || !transaction.startsWith("{")) {
      __privateSet4(newTransaction, _data, TransactionDataBuilder.fromBytes(
        typeof transaction === "string" ? fromBase64(transaction) : transaction
      ));
    } else {
      __privateSet4(newTransaction, _data, TransactionDataBuilder.restore(JSON.parse(transaction)));
    }
    return newTransaction;
  }
  static registerGlobalSerializationPlugin(stepOrStep, step) {
    getGlobalPluginRegistry().serializationPlugins.set(
      stepOrStep,
      step ?? stepOrStep
    );
  }
  static unregisterGlobalSerializationPlugin(name) {
    getGlobalPluginRegistry().serializationPlugins.delete(name);
  }
  static registerGlobalBuildPlugin(stepOrStep, step) {
    getGlobalPluginRegistry().buildPlugins.set(
      stepOrStep,
      step ?? stepOrStep
    );
  }
  static unregisterGlobalBuildPlugin(name) {
    getGlobalPluginRegistry().buildPlugins.delete(name);
  }
  addSerializationPlugin(step) {
    __privateGet4(this, _serializationPlugins).push(step);
  }
  addBuildPlugin(step) {
    __privateGet4(this, _buildPlugins).push(step);
  }
  addIntentResolver(intent, resolver) {
    if (__privateGet4(this, _intentResolvers).has(intent) && __privateGet4(this, _intentResolvers).get(intent) !== resolver) {
      throw new Error(`Intent resolver for ${intent} already exists`);
    }
    __privateGet4(this, _intentResolvers).set(intent, resolver);
  }
  setSender(sender) {
    __privateGet4(this, _data).sender = sender;
  }
  /**
   * Sets the sender only if it has not already been set.
   * This is useful for sponsored transaction flows where the sender may not be the same as the signer address.
   */
  setSenderIfNotSet(sender) {
    if (!__privateGet4(this, _data).sender) {
      __privateGet4(this, _data).sender = sender;
    }
  }
  setExpiration(expiration) {
    __privateGet4(this, _data).expiration = expiration ? parse(TransactionExpiration2, expiration) : null;
  }
  setGasPrice(price6) {
    __privateGet4(this, _data).gasConfig.price = String(price6);
  }
  setGasBudget(budget) {
    __privateGet4(this, _data).gasConfig.budget = String(budget);
  }
  setGasBudgetIfNotSet(budget) {
    if (__privateGet4(this, _data).gasData.budget == null) {
      __privateGet4(this, _data).gasConfig.budget = String(budget);
    }
  }
  setGasOwner(owner) {
    __privateGet4(this, _data).gasConfig.owner = owner;
  }
  setGasPayment(payments) {
    __privateGet4(this, _data).gasConfig.payment = payments.map((payment) => parse(ObjectRef, payment));
  }
  /** @deprecated Use `getData()` instead. */
  get blockData() {
    return serializeV1TransactionData(__privateGet4(this, _data).snapshot());
  }
  /** Get a snapshot of the transaction data, in JSON form: */
  getData() {
    return __privateGet4(this, _data).snapshot();
  }
  // Used to brand transaction classes so that they can be identified, even between multiple copies
  // of the builder.
  get [TRANSACTION_BRAND]() {
    return true;
  }
  // Temporary workaround for the wallet interface accidentally serializing transactions via postMessage
  get pure() {
    Object.defineProperty(this, "pure", {
      enumerable: false,
      value: createPure((value) => {
        if (isSerializedBcs(value)) {
          return __privateGet4(this, _data).addInput("pure", {
            $kind: "Pure",
            Pure: {
              bytes: value.toBase64()
            }
          });
        }
        return __privateGet4(this, _data).addInput(
          "pure",
          is(NormalizedCallArg, value) ? parse(NormalizedCallArg, value) : value instanceof Uint8Array ? Inputs.Pure(value) : { $kind: "UnresolvedPure", UnresolvedPure: { value } }
        );
      })
    });
    return this.pure;
  }
  /** Returns an argument for the gas coin, to be used in a transaction. */
  get gas() {
    return { $kind: "GasCoin", GasCoin: true };
  }
  /**
   * Add a new object input to the transaction using the fully-resolved object reference.
   * If you only have an object ID, use `builder.object(id)` instead.
   */
  objectRef(...args) {
    return this.object(Inputs.ObjectRef(...args));
  }
  /**
   * Add a new receiving input to the transaction using the fully-resolved object reference.
   * If you only have an object ID, use `builder.object(id)` instead.
   */
  receivingRef(...args) {
    return this.object(Inputs.ReceivingRef(...args));
  }
  /**
   * Add a new shared object input to the transaction using the fully-resolved shared object reference.
   * If you only have an object ID, use `builder.object(id)` instead.
   */
  sharedObjectRef(...args) {
    return this.object(Inputs.SharedObjectRef(...args));
  }
  /** Add a transaction to the transaction */
  add(command) {
    if (typeof command === "function") {
      return command(this);
    }
    const index = __privateGet4(this, _data).commands.push(command);
    return createTransactionResult(index - 1);
  }
  // Method shorthands:
  splitCoins(coin, amounts) {
    return this.add(
      Commands.SplitCoins(
        typeof coin === "string" ? this.object(coin) : __privateMethod3(this, _Transaction_instances, resolveArgument_fn).call(this, coin),
        amounts.map(
          (amount) => typeof amount === "number" || typeof amount === "bigint" || typeof amount === "string" ? this.pure.u64(amount) : __privateMethod3(this, _Transaction_instances, normalizeTransactionArgument_fn).call(this, amount)
        )
      )
    );
  }
  mergeCoins(destination, sources) {
    return this.add(
      Commands.MergeCoins(
        this.object(destination),
        sources.map((src) => this.object(src))
      )
    );
  }
  publish({ modules, dependencies }) {
    return this.add(
      Commands.Publish({
        modules,
        dependencies
      })
    );
  }
  upgrade({
    modules,
    dependencies,
    package: packageId,
    ticket
  }) {
    return this.add(
      Commands.Upgrade({
        modules,
        dependencies,
        package: packageId,
        ticket: this.object(ticket)
      })
    );
  }
  moveCall({
    arguments: args,
    ...input
  }) {
    return this.add(
      Commands.MoveCall({
        ...input,
        arguments: args?.map((arg) => __privateMethod3(this, _Transaction_instances, normalizeTransactionArgument_fn).call(this, arg))
      })
    );
  }
  transferObjects(objects, address) {
    return this.add(
      Commands.TransferObjects(
        objects.map((obj) => this.object(obj)),
        typeof address === "string" ? this.pure.address(address) : __privateMethod3(this, _Transaction_instances, normalizeTransactionArgument_fn).call(this, address)
      )
    );
  }
  makeMoveVec({
    type,
    elements
  }) {
    return this.add(
      Commands.MakeMoveVec({
        type,
        elements: elements.map((obj) => this.object(obj))
      })
    );
  }
  /**
   * @deprecated Use toJSON instead.
   * For synchronous serialization, you can use `getData()`
   * */
  serialize() {
    return JSON.stringify(serializeV1TransactionData(__privateGet4(this, _data).snapshot()));
  }
  async toJSON(options = {}) {
    await this.prepareForSerialization(options);
    return JSON.stringify(
      parse(SerializedTransactionDataV2, __privateGet4(this, _data).snapshot()),
      (_key, value) => typeof value === "bigint" ? value.toString() : value,
      2
    );
  }
  /** Build the transaction to BCS bytes, and sign it with the provided keypair. */
  async sign(options) {
    const { signer, ...buildOptions } = options;
    const bytes4 = await this.build(buildOptions);
    return signer.signTransaction(bytes4);
  }
  /** Build the transaction to BCS bytes. */
  async build(options = {}) {
    await this.prepareForSerialization(options);
    await __privateMethod3(this, _Transaction_instances, prepareBuild_fn).call(this, options);
    return __privateGet4(this, _data).build({
      onlyTransactionKind: options.onlyTransactionKind
    });
  }
  /** Derive transaction digest */
  async getDigest(options = {}) {
    await __privateMethod3(this, _Transaction_instances, prepareBuild_fn).call(this, options);
    return __privateGet4(this, _data).getDigest();
  }
  async prepareForSerialization(options) {
    const intents = /* @__PURE__ */ new Set();
    for (const command of __privateGet4(this, _data).commands) {
      if (command.$Intent) {
        intents.add(command.$Intent.name);
      }
    }
    const steps = [...__privateGet4(this, _serializationPlugins)];
    for (const intent of intents) {
      if (options.supportedIntents?.includes(intent)) {
        continue;
      }
      if (!__privateGet4(this, _intentResolvers).has(intent)) {
        throw new Error(`Missing intent resolver for ${intent}`);
      }
      steps.push(__privateGet4(this, _intentResolvers).get(intent));
    }
    await __privateMethod3(this, _Transaction_instances, runPlugins_fn).call(this, steps, options);
  }
};
_serializationPlugins = /* @__PURE__ */ new WeakMap();
_buildPlugins = /* @__PURE__ */ new WeakMap();
_intentResolvers = /* @__PURE__ */ new WeakMap();
_data = /* @__PURE__ */ new WeakMap();
_Transaction_instances = /* @__PURE__ */ new WeakSet();
normalizeTransactionArgument_fn = function(arg) {
  if (isSerializedBcs(arg)) {
    return this.pure(arg);
  }
  return __privateMethod3(this, _Transaction_instances, resolveArgument_fn).call(this, arg);
};
resolveArgument_fn = function(arg) {
  if (typeof arg === "function") {
    return parse(Argument2, arg(this));
  }
  return parse(Argument2, arg);
};
prepareBuild_fn = async function(options) {
  if (!options.onlyTransactionKind && !__privateGet4(this, _data).sender) {
    throw new Error("Missing transaction sender");
  }
  await __privateMethod3(this, _Transaction_instances, runPlugins_fn).call(this, [...__privateGet4(this, _buildPlugins), resolveTransactionData], options);
};
runPlugins_fn = async function(plugins, options) {
  const createNext = (i) => {
    if (i >= plugins.length) {
      return () => {
      };
    }
    const plugin = plugins[i];
    return async () => {
      const next = createNext(i + 1);
      let calledNext = false;
      let nextResolved = false;
      await plugin(__privateGet4(this, _data), options, async () => {
        if (calledNext) {
          throw new Error(`next() was call multiple times in TransactionPlugin ${i}`);
        }
        calledNext = true;
        await next();
        nextResolved = true;
      });
      if (!calledNext) {
        throw new Error(`next() was not called in TransactionPlugin ${i}`);
      }
      if (!nextResolved) {
        throw new Error(`next() was not awaited in TransactionPlugin ${i}`);
      }
    };
  };
  await createNext(0)();
};
var Transaction = _Transaction;

// ../../node_modules/@mysten/sui/dist/esm/client/client.js
var SUI_CLIENT_BRAND = Symbol.for("@mysten/SuiClient");
var SuiClient = class {
  get [SUI_CLIENT_BRAND]() {
    return true;
  }
  /**
   * Establish a connection to a Sui RPC endpoint
   *
   * @param options configuration options for the API Client
   */
  constructor(options) {
    this.transport = options.transport ?? new SuiHTTPTransport({ url: options.url });
  }
  async getRpcApiVersion() {
    const resp = await this.transport.request({
      method: "rpc.discover",
      params: []
    });
    return resp.info.version;
  }
  /**
   * Get all Coin<`coin_type`> objects owned by an address.
   */
  async getCoins(input) {
    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {
      throw new Error("Invalid Sui address");
    }
    return await this.transport.request({
      method: "suix_getCoins",
      params: [input.owner, input.coinType, input.cursor, input.limit]
    });
  }
  /**
   * Get all Coin objects owned by an address.
   */
  async getAllCoins(input) {
    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {
      throw new Error("Invalid Sui address");
    }
    return await this.transport.request({
      method: "suix_getAllCoins",
      params: [input.owner, input.cursor, input.limit]
    });
  }
  /**
   * Get the total coin balance for one coin type, owned by the address owner.
   */
  async getBalance(input) {
    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {
      throw new Error("Invalid Sui address");
    }
    return await this.transport.request({
      method: "suix_getBalance",
      params: [input.owner, input.coinType]
    });
  }
  /**
   * Get the total coin balance for all coin types, owned by the address owner.
   */
  async getAllBalances(input) {
    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {
      throw new Error("Invalid Sui address");
    }
    return await this.transport.request({ method: "suix_getAllBalances", params: [input.owner] });
  }
  /**
   * Fetch CoinMetadata for a given coin type
   */
  async getCoinMetadata(input) {
    return await this.transport.request({
      method: "suix_getCoinMetadata",
      params: [input.coinType]
    });
  }
  /**
   *  Fetch total supply for a coin
   */
  async getTotalSupply(input) {
    return await this.transport.request({
      method: "suix_getTotalSupply",
      params: [input.coinType]
    });
  }
  /**
   * Invoke any RPC method
   * @param method the method to be invoked
   * @param args the arguments to be passed to the RPC request
   */
  async call(method, params) {
    return await this.transport.request({ method, params });
  }
  /**
   * Get Move function argument types like read, write and full access
   */
  async getMoveFunctionArgTypes(input) {
    return await this.transport.request({
      method: "sui_getMoveFunctionArgTypes",
      params: [input.package, input.module, input.function]
    });
  }
  /**
   * Get a map from module name to
   * structured representations of Move modules
   */
  async getNormalizedMoveModulesByPackage(input) {
    return await this.transport.request({
      method: "sui_getNormalizedMoveModulesByPackage",
      params: [input.package]
    });
  }
  /**
   * Get a structured representation of Move module
   */
  async getNormalizedMoveModule(input) {
    return await this.transport.request({
      method: "sui_getNormalizedMoveModule",
      params: [input.package, input.module]
    });
  }
  /**
   * Get a structured representation of Move function
   */
  async getNormalizedMoveFunction(input) {
    return await this.transport.request({
      method: "sui_getNormalizedMoveFunction",
      params: [input.package, input.module, input.function]
    });
  }
  /**
   * Get a structured representation of Move struct
   */
  async getNormalizedMoveStruct(input) {
    return await this.transport.request({
      method: "sui_getNormalizedMoveStruct",
      params: [input.package, input.module, input.struct]
    });
  }
  /**
   * Get all objects owned by an address
   */
  async getOwnedObjects(input) {
    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {
      throw new Error("Invalid Sui address");
    }
    return await this.transport.request({
      method: "suix_getOwnedObjects",
      params: [
        input.owner,
        {
          filter: input.filter,
          options: input.options
        },
        input.cursor,
        input.limit
      ]
    });
  }
  /**
   * Get details about an object
   */
  async getObject(input) {
    if (!input.id || !isValidSuiObjectId(normalizeSuiObjectId(input.id))) {
      throw new Error("Invalid Sui Object id");
    }
    return await this.transport.request({
      method: "sui_getObject",
      params: [input.id, input.options]
    });
  }
  async tryGetPastObject(input) {
    return await this.transport.request({
      method: "sui_tryGetPastObject",
      params: [input.id, input.version, input.options]
    });
  }
  /**
   * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail
   */
  async multiGetObjects(input) {
    input.ids.forEach((id2) => {
      if (!id2 || !isValidSuiObjectId(normalizeSuiObjectId(id2))) {
        throw new Error(`Invalid Sui Object id ${id2}`);
      }
    });
    const hasDuplicates = input.ids.length !== new Set(input.ids).size;
    if (hasDuplicates) {
      throw new Error(`Duplicate object ids in batch call ${input.ids}`);
    }
    return await this.transport.request({
      method: "sui_multiGetObjects",
      params: [input.ids, input.options]
    });
  }
  /**
   * Get transaction blocks for a given query criteria
   */
  async queryTransactionBlocks(input) {
    return await this.transport.request({
      method: "suix_queryTransactionBlocks",
      params: [
        {
          filter: input.filter,
          options: input.options
        },
        input.cursor,
        input.limit,
        (input.order || "descending") === "descending"
      ]
    });
  }
  async getTransactionBlock(input) {
    if (!isValidTransactionDigest(input.digest)) {
      throw new Error("Invalid Transaction digest");
    }
    return await this.transport.request({
      method: "sui_getTransactionBlock",
      params: [input.digest, input.options]
    });
  }
  async multiGetTransactionBlocks(input) {
    input.digests.forEach((d) => {
      if (!isValidTransactionDigest(d)) {
        throw new Error(`Invalid Transaction digest ${d}`);
      }
    });
    const hasDuplicates = input.digests.length !== new Set(input.digests).size;
    if (hasDuplicates) {
      throw new Error(`Duplicate digests in batch call ${input.digests}`);
    }
    return await this.transport.request({
      method: "sui_multiGetTransactionBlocks",
      params: [input.digests, input.options]
    });
  }
  async executeTransactionBlock({
    transactionBlock,
    signature,
    options,
    requestType
  }) {
    const result = await this.transport.request({
      method: "sui_executeTransactionBlock",
      params: [
        typeof transactionBlock === "string" ? transactionBlock : toBase64(transactionBlock),
        Array.isArray(signature) ? signature : [signature],
        options
      ]
    });
    if (requestType === "WaitForLocalExecution") {
      try {
        await this.waitForTransaction({
          digest: result.digest
        });
      } catch (_) {
      }
    }
    return result;
  }
  async signAndExecuteTransaction({
    transaction,
    signer,
    ...input
  }) {
    let transactionBytes;
    if (transaction instanceof Uint8Array) {
      transactionBytes = transaction;
    } else {
      transaction.setSenderIfNotSet(signer.toSuiAddress());
      transactionBytes = await transaction.build({ client: this });
    }
    const { signature, bytes: bytes4 } = await signer.signTransaction(transactionBytes);
    return this.executeTransactionBlock({
      transactionBlock: bytes4,
      signature,
      ...input
    });
  }
  /**
   * Get total number of transactions
   */
  async getTotalTransactionBlocks() {
    const resp = await this.transport.request({
      method: "sui_getTotalTransactionBlocks",
      params: []
    });
    return BigInt(resp);
  }
  /**
   * Getting the reference gas price for the network
   */
  async getReferenceGasPrice() {
    const resp = await this.transport.request({
      method: "suix_getReferenceGasPrice",
      params: []
    });
    return BigInt(resp);
  }
  /**
   * Return the delegated stakes for an address
   */
  async getStakes(input) {
    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {
      throw new Error("Invalid Sui address");
    }
    return await this.transport.request({ method: "suix_getStakes", params: [input.owner] });
  }
  /**
   * Return the delegated stakes queried by id.
   */
  async getStakesByIds(input) {
    input.stakedSuiIds.forEach((id2) => {
      if (!id2 || !isValidSuiObjectId(normalizeSuiObjectId(id2))) {
        throw new Error(`Invalid Sui Stake id ${id2}`);
      }
    });
    return await this.transport.request({
      method: "suix_getStakesByIds",
      params: [input.stakedSuiIds]
    });
  }
  /**
   * Return the latest system state content.
   */
  async getLatestSuiSystemState() {
    return await this.transport.request({ method: "suix_getLatestSuiSystemState", params: [] });
  }
  /**
   * Get events for a given query criteria
   */
  async queryEvents(input) {
    return await this.transport.request({
      method: "suix_queryEvents",
      params: [
        input.query,
        input.cursor,
        input.limit,
        (input.order || "descending") === "descending"
      ]
    });
  }
  /**
   * Subscribe to get notifications whenever an event matching the filter occurs
   *
   * @deprecated
   */
  async subscribeEvent(input) {
    return this.transport.subscribe({
      method: "suix_subscribeEvent",
      unsubscribe: "suix_unsubscribeEvent",
      params: [input.filter],
      onMessage: input.onMessage
    });
  }
  /**
   * @deprecated
   */
  async subscribeTransaction(input) {
    return this.transport.subscribe({
      method: "suix_subscribeTransaction",
      unsubscribe: "suix_unsubscribeTransaction",
      params: [input.filter],
      onMessage: input.onMessage
    });
  }
  /**
   * Runs the transaction block in dev-inspect mode. Which allows for nearly any
   * transaction (or Move call) with any arguments. Detailed results are
   * provided, including both the transaction effects and any return values.
   */
  async devInspectTransactionBlock(input) {
    let devInspectTxBytes;
    if (isTransaction(input.transactionBlock)) {
      input.transactionBlock.setSenderIfNotSet(input.sender);
      devInspectTxBytes = toBase64(
        await input.transactionBlock.build({
          client: this,
          onlyTransactionKind: true
        })
      );
    } else if (typeof input.transactionBlock === "string") {
      devInspectTxBytes = input.transactionBlock;
    } else if (input.transactionBlock instanceof Uint8Array) {
      devInspectTxBytes = toBase64(input.transactionBlock);
    } else {
      throw new Error("Unknown transaction block format.");
    }
    return await this.transport.request({
      method: "sui_devInspectTransactionBlock",
      params: [input.sender, devInspectTxBytes, input.gasPrice?.toString(), input.epoch]
    });
  }
  /**
   * Dry run a transaction block and return the result.
   */
  async dryRunTransactionBlock(input) {
    return await this.transport.request({
      method: "sui_dryRunTransactionBlock",
      params: [
        typeof input.transactionBlock === "string" ? input.transactionBlock : toBase64(input.transactionBlock)
      ]
    });
  }
  /**
   * Return the list of dynamic field objects owned by an object
   */
  async getDynamicFields(input) {
    if (!input.parentId || !isValidSuiObjectId(normalizeSuiObjectId(input.parentId))) {
      throw new Error("Invalid Sui Object id");
    }
    return await this.transport.request({
      method: "suix_getDynamicFields",
      params: [input.parentId, input.cursor, input.limit]
    });
  }
  /**
   * Return the dynamic field object information for a specified object
   */
  async getDynamicFieldObject(input) {
    return await this.transport.request({
      method: "suix_getDynamicFieldObject",
      params: [input.parentId, input.name]
    });
  }
  /**
   * Get the sequence number of the latest checkpoint that has been executed
   */
  async getLatestCheckpointSequenceNumber() {
    const resp = await this.transport.request({
      method: "sui_getLatestCheckpointSequenceNumber",
      params: []
    });
    return String(resp);
  }
  /**
   * Returns information about a given checkpoint
   */
  async getCheckpoint(input) {
    return await this.transport.request({ method: "sui_getCheckpoint", params: [input.id] });
  }
  /**
   * Returns historical checkpoints paginated
   */
  async getCheckpoints(input) {
    return await this.transport.request({
      method: "sui_getCheckpoints",
      params: [input.cursor, input?.limit, input.descendingOrder]
    });
  }
  /**
   * Return the committee information for the asked epoch
   */
  async getCommitteeInfo(input) {
    return await this.transport.request({
      method: "suix_getCommitteeInfo",
      params: [input?.epoch]
    });
  }
  async getNetworkMetrics() {
    return await this.transport.request({ method: "suix_getNetworkMetrics", params: [] });
  }
  async getAddressMetrics() {
    return await this.transport.request({ method: "suix_getLatestAddressMetrics", params: [] });
  }
  async getEpochMetrics(input) {
    return await this.transport.request({
      method: "suix_getEpochMetrics",
      params: [input?.cursor, input?.limit, input?.descendingOrder]
    });
  }
  async getAllEpochAddressMetrics(input) {
    return await this.transport.request({
      method: "suix_getAllEpochAddressMetrics",
      params: [input?.descendingOrder]
    });
  }
  /**
   * Return the committee information for the asked epoch
   */
  async getEpochs(input) {
    return await this.transport.request({
      method: "suix_getEpochs",
      params: [input?.cursor, input?.limit, input?.descendingOrder]
    });
  }
  /**
   * Returns list of top move calls by usage
   */
  async getMoveCallMetrics() {
    return await this.transport.request({ method: "suix_getMoveCallMetrics", params: [] });
  }
  /**
   * Return the committee information for the asked epoch
   */
  async getCurrentEpoch() {
    return await this.transport.request({ method: "suix_getCurrentEpoch", params: [] });
  }
  /**
   * Return the Validators APYs
   */
  async getValidatorsApy() {
    return await this.transport.request({ method: "suix_getValidatorsApy", params: [] });
  }
  // TODO: Migrate this to `sui_getChainIdentifier` once it is widely available.
  async getChainIdentifier() {
    const checkpoint = await this.getCheckpoint({ id: "0" });
    const bytes4 = fromBase58(checkpoint.digest);
    return toHex(bytes4.slice(0, 4));
  }
  async resolveNameServiceAddress(input) {
    return await this.transport.request({
      method: "suix_resolveNameServiceAddress",
      params: [input.name]
    });
  }
  async resolveNameServiceNames({
    format = "dot",
    ...input
  }) {
    const { nextCursor, hasNextPage, data } = await this.transport.request({
      method: "suix_resolveNameServiceNames",
      params: [input.address, input.cursor, input.limit]
    });
    return {
      hasNextPage,
      nextCursor,
      data: data.map((name) => normalizeSuiNSName(name, format))
    };
  }
  async getProtocolConfig(input) {
    return await this.transport.request({
      method: "sui_getProtocolConfig",
      params: [input?.version]
    });
  }
  /**
   * Wait for a transaction block result to be available over the API.
   * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to
   * be available via the API.
   * This currently polls the `getTransactionBlock` API to check for the transaction.
   */
  async waitForTransaction({
    signal,
    timeout = 60 * 1e3,
    pollInterval = 2 * 1e3,
    ...input
  }) {
    const timeoutSignal = AbortSignal.timeout(timeout);
    const timeoutPromise = new Promise((_, reject) => {
      timeoutSignal.addEventListener("abort", () => reject(timeoutSignal.reason));
    });
    timeoutPromise.catch(() => {
    });
    while (!timeoutSignal.aborted) {
      signal?.throwIfAborted();
      try {
        return await this.getTransactionBlock(input);
      } catch (e) {
        await Promise.race([
          new Promise((resolve) => setTimeout(resolve, pollInterval)),
          timeoutPromise
        ]);
      }
    }
    timeoutSignal.throwIfAborted();
    throw new Error("Unexpected error while waiting for transaction block.");
  }
};

// ../../node_modules/@typemove/sui/dist/esm/to-internal.js
function toInternalModule(module2) {
  return {
    address: module2.address,
    exposedFunctions: Object.entries(module2.exposedFunctions).map(([n2, f]) => toInternalFunction(n2, f)),
    name: module2.name,
    structs: Object.entries(module2.structs).map(([n2, s]) => toInternalStruct(n2, s))
  };
}
function toInternalFunction(name, func) {
  let visibility;
  switch (func.visibility) {
    case "Private":
      visibility = InternalMoveFunctionVisibility.PRIVATE;
      break;
    case "Public":
      visibility = InternalMoveFunctionVisibility.PUBLIC;
      break;
    case "Friend":
      visibility = InternalMoveFunctionVisibility.FRIEND;
      break;
    default:
      throw Error("No visibility for function" + name);
  }
  return {
    typeParams: func.typeParameters.map((p) => {
      return { constraints: p.abilities };
    }),
    isEntry: func.isEntry,
    name,
    params: func.parameters.map(toTypeDescriptor),
    return: func.return.map(toTypeDescriptor),
    visibility
  };
}
function toInternalStruct(name, struct) {
  return {
    abilities: struct.abilities.abilities,
    fields: struct.fields.map(toInternalField),
    typeParams: struct.typeParameters.map((p) => {
      return { constraints: p.constraints.abilities };
    }),
    isNative: false,
    name
  };
}
function toInternalField(module2) {
  return {
    name: module2.name,
    type: toTypeDescriptor(module2.type)
  };
}
function toTypeDescriptor(normalizedType) {
  if (typeof normalizedType === "string") {
    return new TypeDescriptor(normalizedType);
  }
  if ("Struct" in normalizedType) {
    const qname = [normalizedType.Struct.address, normalizedType.Struct.module, normalizedType.Struct.name].join(SPLITTER);
    const args = normalizedType.Struct.typeArguments.map(toTypeDescriptor);
    return new TypeDescriptor(qname, args);
  }
  if ("Vector" in normalizedType) {
    return new TypeDescriptor("Vector", [toTypeDescriptor(normalizedType.Vector)]);
  }
  if ("TypeParameter" in normalizedType) {
    return new TypeDescriptor("T" + normalizedType.TypeParameter);
  }
  if ("Reference" in normalizedType) {
    const res = toTypeDescriptor(normalizedType.Reference);
    res.reference = true;
    return res;
  }
  if ("MutableReference" in normalizedType) {
    const res = toTypeDescriptor(normalizedType.MutableReference);
    res.reference = true;
    res.mutable = true;
    return res;
  }
  throw new Error("Unexpected sui type");
}

// ../../node_modules/@typemove/sui/dist/esm/sui-chain-adapter.js
var SuiChainAdapter = class extends ChainAdapter {
  async getChainId() {
    return this.client.getChainIdentifier();
  }
  // static INSTANCE = new SuiChainAdapter()
  client;
  constructor(client) {
    super();
    this.client = client;
  }
  async fetchModule(account, module2) {
    return await this.client.getNormalizedMoveModule({ package: account, module: module2 });
  }
  async fetchModules(account) {
    const modules = await this.client.getNormalizedMoveModulesByPackage({
      package: account
    });
    return Object.values(modules);
  }
  getMeaningfulFunctionParams(params) {
    return params;
  }
  toInternalModules(modules) {
    return Object.values(modules).map(toInternalModule);
  }
  getAllEventStructs(modules) {
    const eventMap = /* @__PURE__ */ new Map();
    for (const module2 of modules) {
      const qname = moduleQname(module2);
      for (const struct of module2.structs) {
        const abilities = new Set(struct.abilities);
        if (abilities.has("Drop") && abilities.has("Copy")) {
          eventMap.set(qname + SPLITTER + struct.name, struct);
        }
      }
    }
    return eventMap;
  }
  getType(base2) {
    return base2.type;
  }
  getData(val) {
    if (val === void 0) {
      throw Error("val is undefined");
    }
    if ("parsedJson" in val) {
      return val.parsedJson;
    }
    if (val.dataType === "moveObject") {
      return val.fields;
    }
    if ("fields" in val) {
      if ("type" in val && Object.keys(val).length === 2) {
        return val.fields;
      }
    }
    return val;
  }
};

// ../../node_modules/@typemove/sui/dist/esm/move-coder.js
var MoveCoder = class extends AbstractMoveCoder {
  constructor(client) {
    super(new SuiChainAdapter(client));
  }
  load(module2, address) {
    let m = this.moduleMapping.get(module2.address + "::" + module2.name);
    const mDeclared = this.moduleMapping.get(address + "::" + module2.name);
    if (m && mDeclared) {
      return m;
    }
    m = toInternalModule(module2);
    this.loadInternal(m, address);
    return m;
  }
  async decode(data, type) {
    switch (type.qname) {
      case "0x1::ascii::Char":
        if (data !== void 0 && typeof data !== "string") {
          const byte = (await super.decode(data, type)).byte;
          return String.fromCharCode(byte);
        }
      case "0x1::ascii::String":
        if (data !== void 0 && typeof data !== "string") {
          const bytes4 = (await super.decode(data, type)).bytes;
          return new TextDecoder().decode(new Uint8Array(bytes4));
        }
      case "0x2::object::ID":
        if (data !== void 0 && typeof data !== "string") {
          const bytes4 = (await super.decode(data, type)).bytes;
          return normalizeSuiObjectId(bytes4);
        }
      case "0x2::url::Url":
        if (data !== void 0 && typeof data !== "string") {
          return (await super.decode(data, type)).url;
        }
      case "0x2::coin::Coin":
        if (data !== void 0 && typeof data !== "string") {
          const bytes4 = (await super.decode(data, type)).id.id.bytes;
          return new TextDecoder().decode(new Uint8Array(bytes4));
        }
        return data;
      case "0x2::balance::Balance":
        if (data.value) {
          const balance = await super.decode(data, type);
          return balance.value;
        }
        return BigInt(data);
      case "0x1::option::Option":
        if (data === null) {
          return data;
        }
        if (data.vec) {
          let vec = await super.decode(data, type);
          vec = vec.vec;
          if (vec.length === 0) {
            return null;
          }
          return vec[0];
        }
        return this.decode(data, type.typeArgs[0]);
      case "Address":
        const str = data;
        return normalizeSuiAddress(str);
      case "0x1::string::String":
        if (typeof data !== "string") {
          return new TextDecoder().decode(new Uint8Array(data.bytes));
        }
      default:
        return super.decode(data, type);
    }
  }
  decodeEvent(event4) {
    return this.decodedStruct(event4);
  }
  filterAndDecodeEvents(type, resources) {
    if (typeof type === "string") {
      type = parseMoveType(type);
    }
    return this.filterAndDecodeStruct(type, resources);
  }
  async getDynamicFields(objects, keyType = ANY_TYPE, valueType = ANY_TYPE) {
    const type = new TypeDescriptor("0x2::dynamic_field::Field");
    type.typeArgs = [keyType, valueType];
    const res = await this.filterAndDecodeObjects(type, objects);
    return res.map((o) => o.data_decoded);
  }
  filterAndDecodeObjects(type, objects) {
    return this.filterAndDecodeStruct(type, objects);
  }
  async decodeFunctionPayload(payload, inputs) {
    const functionType = [payload.package, payload.module, payload.function].join(SPLITTER);
    const func = await this.getMoveFunction(functionType);
    const params = this.adapter.getMeaningfulFunctionParams(func.params);
    const args = [];
    for (const value of payload.arguments || []) {
      const argValue = value;
      if ("Input" in argValue) {
        const idx = argValue.Input;
        const arg = inputs[idx];
        if (arg.type === "pure") {
          args.push(arg.value);
        } else if (arg.type === "object") {
          args.push(void 0);
        } else {
          console.error("unexpected function arg value");
          args.push(void 0);
        }
      } else {
        args.push(void 0);
      }
    }
    const argumentsTyped = await this.decodeArray(args, params, false);
    return {
      ...payload,
      arguments_decoded: argumentsTyped
    };
  }
  bcsRegistered = /* @__PURE__ */ new Set();
  bcsRegistry = /* @__PURE__ */ new Map();
  async getBCSTypeWithArgs(type, args = []) {
    const qname = type.qname;
    const sig = type.getNormalizedSignature();
    const cached = this.bcsRegistry.get(sig);
    if (cached) {
      return cached;
    }
    const lowerQname = qname.toLowerCase();
    switch (lowerQname) {
      case "u8":
      case "u16":
      case "u32":
      case "u64":
      case "u128":
      case "u256":
      case "bool":
        return suiBcs[lowerQname]();
      case "address":
        return suiBcs.Address;
      case "vector":
        return suiBcs.vector(args[0]);
      default:
        if (!qname.includes("::")) {
          throw `Unimplemented builtin type ${qname}`;
        }
    }
    let moveStruct;
    try {
      moveStruct = await this.getMoveStruct(qname);
    } catch (e) {
      console.error("Invalid move address", qname);
      throw e;
    }
    const structDef = {};
    for (const field of moveStruct.fields) {
      if (field.type.qname.startsWith("T") && args.length) {
        const index = +field.type.qname.slice(1);
        structDef[field.name] = args[index];
      } else if (field.type.typeArgs.length && args.length) {
        structDef[field.name] = await this.getBCSTypeWithArgs(field.type, args);
      } else {
        structDef[field.name] = await this.getBCSType(field.type);
      }
    }
    return suiBcs.struct(qname, structDef);
  }
  async getBCSType(type) {
    const args = await Promise.all(type.typeArgs.map((x) => this.getBCSType(x)));
    const bcsType = await this.getBCSTypeWithArgs(type, args);
    this.bcsRegistry.set(type.getNormalizedSignature(), bcsType);
    return bcsType;
  }
  async registerBCSTypes(type) {
    const sig = type.getNormalizedSignature();
    if (this.bcsRegistered.has(sig)) {
      return;
    }
    this.bcsRegistered.add(sig);
    const bcsType = await this.getBCSType(type);
    this.bcsRegistry.set(type.getNormalizedSignature(), bcsType);
  }
  async decodeBCS(type, data, encoding) {
    await this.registerBCSTypes(type);
    if (typeof data == "string") {
      const buf = Buffer.from(data, encoding);
      data = new Uint8Array(buf, buf.byteOffset, buf.byteLength);
    }
    const bcsType = this.bcsRegistry.get(type.getNormalizedSignature());
    return bcsType?.parse(data);
  }
  async decodeDevInspectResult(inspectRes) {
    const returnValues = [];
    if (inspectRes.results != null) {
      for (const r of inspectRes.results) {
        if (r.returnValues) {
          for (const returnValue of r.returnValues) {
            const type = parseMoveType(returnValue[1]);
            const bcsDecoded = await this.decodeBCS(type, new Uint8Array(returnValue[0]));
            const decoded = await this.decodedType(bcsDecoded, type);
            returnValues.push(decoded);
          }
        } else {
          returnValues.push(null);
        }
      }
    }
    return { ...inspectRes, results_decoded: returnValues };
  }
};
var DEFAULT_ENDPOINT = "https://fullnode.mainnet.sui.io/";
var CODER_MAP = /* @__PURE__ */ new Map();
function defaultMoveCoder3(endpoint = DEFAULT_ENDPOINT) {
  let coder = CODER_MAP.get(endpoint);
  if (!coder) {
    coder = new MoveCoder(new SuiClient({ url: endpoint }));
    CODER_MAP.set(endpoint, coder);
  }
  return coder;
}
var PROVIDER_CODER_MAP = /* @__PURE__ */ new Map();
var DEFAULT_CHAIN_ID;
async function getMoveCoder(client) {
  let coder = PROVIDER_CODER_MAP.get(client);
  if (!coder) {
    coder = new MoveCoder(client);
    const id2 = await client.getChainIdentifier();
    const defaultCoder2 = defaultMoveCoder3();
    if (!DEFAULT_CHAIN_ID) {
      DEFAULT_CHAIN_ID = await defaultCoder2.adapter.getChainId();
    }
    if (id2 === DEFAULT_CHAIN_ID) {
      coder = defaultCoder2;
    }
    PROVIDER_CODER_MAP.set(client, coder);
  }
  return coder;
}

// src/types/sui/0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e.ts
var import_sui8 = require("@sentio/sdk/sui");

// src/types/sui/0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a.ts
var import_sui = require("@sentio/sdk/sui");
var import_sui4 = require("@sentio/sdk/sui");
var _0x2 = __toESM(require("@sentio/sdk/sui/builtin/0x2"), 1);
var _0x13 = __toESM(require("@sentio/sdk/sui/builtin/0x1"), 1);
var bytes3;
((bytes4) => {
  let builder;
  ((builder2) => {
    function pushU128Be(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes::push_u128_be",
        arguments: _args
      });
    }
    builder2.pushU128Be = pushU128Be;
    function pushU16Be(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU16(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes::push_u16_be",
        arguments: _args
      });
    }
    builder2.pushU16Be = pushU16Be;
    function pushU256Be(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU256(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes::push_u256_be",
        arguments: _args
      });
    }
    builder2.pushU256Be = pushU256Be;
    function pushU32Be(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes::push_u32_be",
        arguments: _args
      });
    }
    builder2.pushU32Be = pushU32Be;
    function pushU64Be(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes::push_u64_be",
        arguments: _args
      });
    }
    builder2.pushU64Be = pushU64Be;
    function pushU8(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes::push_u8",
        arguments: _args
      });
    }
    builder2.pushU8 = pushU8;
    function takeBytes(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes::take_bytes",
        arguments: _args
      });
    }
    builder2.takeBytes = takeBytes;
    function takeU128Be(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes::take_u128_be",
        arguments: _args
      });
    }
    builder2.takeU128Be = takeU128Be;
    function takeU16Be(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes::take_u16_be",
        arguments: _args
      });
    }
    builder2.takeU16Be = takeU16Be;
    function takeU256Be(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes::take_u256_be",
        arguments: _args
      });
    }
    builder2.takeU256Be = takeU256Be;
    function takeU32Be(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes::take_u32_be",
        arguments: _args
      });
    }
    builder2.takeU32Be = takeU32Be;
    function takeU64Be(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes::take_u64_be",
        arguments: _args
      });
    }
    builder2.takeU64Be = takeU64Be;
    function takeU8(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes::take_u8",
        arguments: _args
      });
    }
    builder2.takeU8 = takeU8;
  })(builder = bytes4.builder || (bytes4.builder = {}));
  let view;
  ((view2) => {
    async function pushU128Be(client, args) {
      const tx = new Transaction();
      builder.pushU128Be(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.pushU128Be = pushU128Be;
    async function pushU16Be(client, args) {
      const tx = new Transaction();
      builder.pushU16Be(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.pushU16Be = pushU16Be;
    async function pushU256Be(client, args) {
      const tx = new Transaction();
      builder.pushU256Be(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.pushU256Be = pushU256Be;
    async function pushU32Be(client, args) {
      const tx = new Transaction();
      builder.pushU32Be(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.pushU32Be = pushU32Be;
    async function pushU64Be(client, args) {
      const tx = new Transaction();
      builder.pushU64Be(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.pushU64Be = pushU64Be;
    async function pushU8(client, args) {
      const tx = new Transaction();
      builder.pushU8(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.pushU8 = pushU8;
    async function takeBytes(client, args) {
      const tx = new Transaction();
      builder.takeBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.takeBytes = takeBytes;
    async function takeU128Be(client, args) {
      const tx = new Transaction();
      builder.takeU128Be(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.takeU128Be = takeU128Be;
    async function takeU16Be(client, args) {
      const tx = new Transaction();
      builder.takeU16Be(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.takeU16Be = takeU16Be;
    async function takeU256Be(client, args) {
      const tx = new Transaction();
      builder.takeU256Be(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.takeU256Be = takeU256Be;
    async function takeU32Be(client, args) {
      const tx = new Transaction();
      builder.takeU32Be(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.takeU32Be = takeU32Be;
    async function takeU64Be(client, args) {
      const tx = new Transaction();
      builder.takeU64Be(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.takeU64Be = takeU64Be;
    async function takeU8(client, args) {
      const tx = new Transaction();
      builder.takeU8(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.takeU8 = takeU8;
  })(view = bytes4.view || (bytes4.view = {}));
})(bytes3 || (bytes3 = {}));
var bytes20 = class _bytes20 extends import_sui4.SuiBaseProcessor {
  constructor(options) {
    super("bytes20", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a",
    network: import_sui4.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _bytes20({ ..._bytes20.DEFAULT_OPTIONS, ...options });
  }
  onEventBytes20(func, fetchConfig) {
    this.onMoveEvent(func, { type: "bytes20::Bytes20" }, fetchConfig);
    return this;
  }
};
((bytes202) => {
  let Bytes20;
  ((Bytes202) => {
    Bytes202.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes20::Bytes20";
    const TYPE = new TypeDescriptor(Bytes202.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Bytes202.type = type;
  })(Bytes20 = bytes202.Bytes20 || (bytes202.Bytes20 = {}));
  let builder;
  ((builder2) => {
    function data(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes20::data",
        arguments: _args
      });
    }
    builder2.data = data;
    function default_(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes20::default",
        arguments: _args
      });
    }
    builder2.default_ = default_;
    function fromBytes(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes20::from_bytes",
        arguments: _args
      });
    }
    builder2.fromBytes = fromBytes;
    function isNonzero(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes20::is_nonzero",
        arguments: _args
      });
    }
    builder2.isNonzero = isNonzero;
    function length(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes20::length",
        arguments: _args
      });
    }
    builder2.length = length;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes20::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
    function take(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes20::take",
        arguments: _args
      });
    }
    builder2.take = take;
    function toBytes3(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes20::to_bytes",
        arguments: _args
      });
    }
    builder2.toBytes = toBytes3;
  })(builder = bytes202.builder || (bytes202.builder = {}));
  let view;
  ((view2) => {
    async function data(client, args) {
      const tx = new Transaction();
      builder.data(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.data = data;
    async function default_(client, args) {
      const tx = new Transaction();
      builder.default_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.default_ = default_;
    async function fromBytes(client, args) {
      const tx = new Transaction();
      builder.fromBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromBytes = fromBytes;
    async function isNonzero(client, args) {
      const tx = new Transaction();
      builder.isNonzero(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.isNonzero = isNonzero;
    async function length(client, args) {
      const tx = new Transaction();
      builder.length(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.length = length;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
    async function take(client, args) {
      const tx = new Transaction();
      builder.take(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.take = take;
    async function toBytes3(client, args) {
      const tx = new Transaction();
      builder.toBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.toBytes = toBytes3;
  })(view = bytes202.view || (bytes202.view = {}));
})(bytes20 || (bytes20 = {}));
var bytes32 = class _bytes32 extends import_sui4.SuiBaseProcessor {
  constructor(options) {
    super("bytes32", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a",
    network: import_sui4.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _bytes32({ ..._bytes32.DEFAULT_OPTIONS, ...options });
  }
  onEventBytes32(func, fetchConfig) {
    this.onMoveEvent(func, { type: "bytes32::Bytes32" }, fetchConfig);
    return this;
  }
};
((bytes322) => {
  let Bytes32;
  ((Bytes322) => {
    Bytes322.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::Bytes32";
    const TYPE = new TypeDescriptor(Bytes322.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Bytes322.type = type;
  })(Bytes32 = bytes322.Bytes32 || (bytes322.Bytes32 = {}));
  let builder;
  ((builder2) => {
    function data(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::data",
        arguments: _args
      });
    }
    builder2.data = data;
    function default_(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::default",
        arguments: _args
      });
    }
    builder2.default_ = default_;
    function fromAddress(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureAddress(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::from_address",
        arguments: _args
      });
    }
    builder2.fromAddress = fromAddress;
    function fromBytes(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::from_bytes",
        arguments: _args
      });
    }
    builder2.fromBytes = fromBytes;
    function fromU256Be(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::from_u256_be",
        arguments: _args
      });
    }
    builder2.fromU256Be = fromU256Be;
    function fromU64Be(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::from_u64_be",
        arguments: _args
      });
    }
    builder2.fromU64Be = fromU64Be;
    function fromUtf8(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::from_utf8",
        arguments: _args
      });
    }
    builder2.fromUtf8 = fromUtf8;
    function isNonzero(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::is_nonzero",
        arguments: _args
      });
    }
    builder2.isNonzero = isNonzero;
    function length(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::length",
        arguments: _args
      });
    }
    builder2.length = length;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
    function takeBytes(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::take_bytes",
        arguments: _args
      });
    }
    builder2.takeBytes = takeBytes;
    function toAddress(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::to_address",
        arguments: _args
      });
    }
    builder2.toAddress = toAddress;
    function toBytes3(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::to_bytes",
        arguments: _args
      });
    }
    builder2.toBytes = toBytes3;
    function toU256Be(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::to_u256_be",
        arguments: _args
      });
    }
    builder2.toU256Be = toU256Be;
    function toU64Be(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::to_u64_be",
        arguments: _args
      });
    }
    builder2.toU64Be = toU64Be;
    function toUtf8(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::bytes32::to_utf8",
        arguments: _args
      });
    }
    builder2.toUtf8 = toUtf8;
  })(builder = bytes322.builder || (bytes322.builder = {}));
  let view;
  ((view2) => {
    async function data(client, args) {
      const tx = new Transaction();
      builder.data(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.data = data;
    async function default_(client, args) {
      const tx = new Transaction();
      builder.default_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.default_ = default_;
    async function fromAddress(client, args) {
      const tx = new Transaction();
      builder.fromAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromAddress = fromAddress;
    async function fromBytes(client, args) {
      const tx = new Transaction();
      builder.fromBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromBytes = fromBytes;
    async function fromU256Be(client, args) {
      const tx = new Transaction();
      builder.fromU256Be(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromU256Be = fromU256Be;
    async function fromU64Be(client, args) {
      const tx = new Transaction();
      builder.fromU64Be(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromU64Be = fromU64Be;
    async function fromUtf8(client, args) {
      const tx = new Transaction();
      builder.fromUtf8(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromUtf8 = fromUtf8;
    async function isNonzero(client, args) {
      const tx = new Transaction();
      builder.isNonzero(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.isNonzero = isNonzero;
    async function length(client, args) {
      const tx = new Transaction();
      builder.length(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.length = length;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
    async function takeBytes(client, args) {
      const tx = new Transaction();
      builder.takeBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.takeBytes = takeBytes;
    async function toAddress(client, args) {
      const tx = new Transaction();
      builder.toAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.toAddress = toAddress;
    async function toBytes3(client, args) {
      const tx = new Transaction();
      builder.toBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.toBytes = toBytes3;
    async function toU256Be(client, args) {
      const tx = new Transaction();
      builder.toU256Be(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.toU256Be = toU256Be;
    async function toU64Be(client, args) {
      const tx = new Transaction();
      builder.toU64Be(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.toU64Be = toU64Be;
    async function toUtf8(client, args) {
      const tx = new Transaction();
      builder.toUtf8(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.toUtf8 = toUtf8;
  })(view = bytes322.view || (bytes322.view = {}));
})(bytes32 || (bytes32 = {}));
var consumed_vaas;
((consumed_vaas2) => {
  let ConsumedVAAs;
  ((ConsumedVAAs2) => {
    ConsumedVAAs2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::consumed_vaas::ConsumedVAAs";
    const TYPE = new TypeDescriptor(ConsumedVAAs2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    ConsumedVAAs2.type = type;
  })(ConsumedVAAs = consumed_vaas2.ConsumedVAAs || (consumed_vaas2.ConsumedVAAs = {}));
  let builder;
  ((builder2) => {
    function consume(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::consumed_vaas::consume",
        arguments: _args
      });
    }
    builder2.consume = consume;
    function new_(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::consumed_vaas::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
  })(builder = consumed_vaas2.builder || (consumed_vaas2.builder = {}));
  let view;
  ((view2) => {
    async function consume(client, args) {
      const tx = new Transaction();
      builder.consume(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.consume = consume;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
  })(view = consumed_vaas2.view || (consumed_vaas2.view = {}));
})(consumed_vaas || (consumed_vaas = {}));
var cursor2;
((cursor3) => {
  let Cursor;
  ((Cursor2) => {
    Cursor2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::cursor::Cursor";
    const TYPE = new TypeDescriptor(Cursor2.TYPE_QNAME);
    function type(arg0 = ANY_TYPE) {
      return TYPE.apply(arg0);
    }
    Cursor2.type = type;
  })(Cursor = cursor3.Cursor || (cursor3.Cursor = {}));
  let builder;
  ((builder2) => {
    function data(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::cursor::data",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.data = data;
    function destroyEmpty(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::cursor::destroy_empty",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.destroyEmpty = destroyEmpty;
    function isEmpty(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::cursor::is_empty",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.isEmpty = isEmpty;
    function new_(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::cursor::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.new_ = new_;
    function poke(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::cursor::poke",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.poke = poke;
    function takeRest(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::cursor::take_rest",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.takeRest = takeRest;
  })(builder = cursor3.builder || (cursor3.builder = {}));
  let view;
  ((view2) => {
    async function data(client, args, typeArguments) {
      const tx = new Transaction();
      builder.data(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.data = data;
    async function destroyEmpty(client, args, typeArguments) {
      const tx = new Transaction();
      builder.destroyEmpty(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.destroyEmpty = destroyEmpty;
    async function isEmpty(client, args, typeArguments) {
      const tx = new Transaction();
      builder.isEmpty(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.isEmpty = isEmpty;
    async function new_(client, args, typeArguments) {
      const tx = new Transaction();
      builder.new_(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
    async function poke(client, args, typeArguments) {
      const tx = new Transaction();
      builder.poke(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.poke = poke;
    async function takeRest(client, args, typeArguments) {
      const tx = new Transaction();
      builder.takeRest(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.takeRest = takeRest;
  })(view = cursor3.view || (cursor3.view = {}));
})(cursor2 || (cursor2 = {}));
var emitter2 = class _emitter extends import_sui4.SuiBaseProcessor {
  constructor(options) {
    super("emitter", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a",
    network: import_sui4.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _emitter({ ..._emitter.DEFAULT_OPTIONS, ...options });
  }
  onEventEmitterCreated(func, fetchConfig) {
    this.onMoveEvent(func, { type: "emitter::EmitterCreated" }, fetchConfig);
    return this;
  }
  onEventEmitterDestroyed(func, fetchConfig) {
    this.onMoveEvent(func, { type: "emitter::EmitterDestroyed" }, fetchConfig);
    return this;
  }
};
((emitter3) => {
  let EmitterCap;
  ((EmitterCap2) => {
    EmitterCap2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::emitter::EmitterCap";
    const TYPE = new TypeDescriptor(EmitterCap2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    EmitterCap2.type = type;
  })(EmitterCap = emitter3.EmitterCap || (emitter3.EmitterCap = {}));
  let EmitterCreated;
  ((EmitterCreated2) => {
    EmitterCreated2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::emitter::EmitterCreated";
    const TYPE = new TypeDescriptor(EmitterCreated2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    EmitterCreated2.type = type;
  })(EmitterCreated = emitter3.EmitterCreated || (emitter3.EmitterCreated = {}));
  let EmitterDestroyed;
  ((EmitterDestroyed2) => {
    EmitterDestroyed2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::emitter::EmitterDestroyed";
    const TYPE = new TypeDescriptor(
      EmitterDestroyed2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    EmitterDestroyed2.type = type;
  })(EmitterDestroyed = emitter3.EmitterDestroyed || (emitter3.EmitterDestroyed = {}));
  let builder;
  ((builder2) => {
    function destroy(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::emitter::destroy",
        arguments: _args
      });
    }
    builder2.destroy = destroy;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::emitter::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
    function sequence(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::emitter::sequence",
        arguments: _args
      });
    }
    builder2.sequence = sequence;
    function useSequence(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::emitter::use_sequence",
        arguments: _args
      });
    }
    builder2.useSequence = useSequence;
  })(builder = emitter3.builder || (emitter3.builder = {}));
  let view;
  ((view2) => {
    async function destroy(client, args) {
      const tx = new Transaction();
      builder.destroy(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.destroy = destroy;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
    async function sequence(client, args) {
      const tx = new Transaction();
      builder.sequence(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.sequence = sequence;
    async function useSequence(client, args) {
      const tx = new Transaction();
      builder.useSequence(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.useSequence = useSequence;
  })(view = emitter3.view || (emitter3.view = {}));
})(emitter2 || (emitter2 = {}));
var external_address2 = class _external_address extends import_sui4.SuiBaseProcessor {
  constructor(options) {
    super("external_address", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a",
    network: import_sui4.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _external_address({
      ..._external_address.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventExternalAddress(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "external_address::ExternalAddress" },
      fetchConfig
    );
    return this;
  }
};
((external_address3) => {
  let ExternalAddress;
  ((ExternalAddress2) => {
    ExternalAddress2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::external_address::ExternalAddress";
    const TYPE = new TypeDescriptor(
      ExternalAddress2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    ExternalAddress2.type = type;
  })(ExternalAddress = external_address3.ExternalAddress || (external_address3.ExternalAddress = {}));
  let builder;
  ((builder2) => {
    function default_(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::external_address::default",
        arguments: _args
      });
    }
    builder2.default_ = default_;
    function fromAddress(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureAddress(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::external_address::from_address",
        arguments: _args
      });
    }
    builder2.fromAddress = fromAddress;
    function fromId(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::external_address::from_id",
        arguments: _args
      });
    }
    builder2.fromId = fromId;
    function isNonzero(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::external_address::is_nonzero",
        arguments: _args
      });
    }
    builder2.isNonzero = isNonzero;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::external_address::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
    function newNonzero(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::external_address::new_nonzero",
        arguments: _args
      });
    }
    builder2.newNonzero = newNonzero;
    function takeBytes(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::external_address::take_bytes",
        arguments: _args
      });
    }
    builder2.takeBytes = takeBytes;
    function takeNonzero(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::external_address::take_nonzero",
        arguments: _args
      });
    }
    builder2.takeNonzero = takeNonzero;
    function toAddress(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::external_address::to_address",
        arguments: _args
      });
    }
    builder2.toAddress = toAddress;
    function toBytes3(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::external_address::to_bytes",
        arguments: _args
      });
    }
    builder2.toBytes = toBytes3;
    function toBytes32(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::external_address::to_bytes32",
        arguments: _args
      });
    }
    builder2.toBytes32 = toBytes32;
  })(builder = external_address3.builder || (external_address3.builder = {}));
  let view;
  ((view2) => {
    async function default_(client, args) {
      const tx = new Transaction();
      builder.default_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.default_ = default_;
    async function fromAddress(client, args) {
      const tx = new Transaction();
      builder.fromAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromAddress = fromAddress;
    async function fromId(client, args) {
      const tx = new Transaction();
      builder.fromId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromId = fromId;
    async function isNonzero(client, args) {
      const tx = new Transaction();
      builder.isNonzero(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.isNonzero = isNonzero;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
    async function newNonzero(client, args) {
      const tx = new Transaction();
      builder.newNonzero(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newNonzero = newNonzero;
    async function takeBytes(client, args) {
      const tx = new Transaction();
      builder.takeBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.takeBytes = takeBytes;
    async function takeNonzero(client, args) {
      const tx = new Transaction();
      builder.takeNonzero(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.takeNonzero = takeNonzero;
    async function toAddress(client, args) {
      const tx = new Transaction();
      builder.toAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.toAddress = toAddress;
    async function toBytes3(client, args) {
      const tx = new Transaction();
      builder.toBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.toBytes = toBytes3;
    async function toBytes32(client, args) {
      const tx = new Transaction();
      builder.toBytes32(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.toBytes32 = toBytes32;
  })(view = external_address3.view || (external_address3.view = {}));
})(external_address2 || (external_address2 = {}));
var fee_collector;
((fee_collector2) => {
  let FeeCollector;
  ((FeeCollector2) => {
    FeeCollector2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::fee_collector::FeeCollector";
    const TYPE = new TypeDescriptor(FeeCollector2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    FeeCollector2.type = type;
  })(FeeCollector = fee_collector2.FeeCollector || (fee_collector2.FeeCollector = {}));
  let builder;
  ((builder2) => {
    function balanceValue(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::fee_collector::balance_value",
        arguments: _args
      });
    }
    builder2.balanceValue = balanceValue;
    function changeFee(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::fee_collector::change_fee",
        arguments: _args
      });
    }
    builder2.changeFee = changeFee;
    function deposit(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::fee_collector::deposit",
        arguments: _args
      });
    }
    builder2.deposit = deposit;
    function depositBalance(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::fee_collector::deposit_balance",
        arguments: _args
      });
    }
    builder2.depositBalance = depositBalance;
    function feeAmount(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::fee_collector::fee_amount",
        arguments: _args
      });
    }
    builder2.feeAmount = feeAmount;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::fee_collector::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
    function withdraw(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::fee_collector::withdraw",
        arguments: _args
      });
    }
    builder2.withdraw = withdraw;
    function withdrawBalance(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::fee_collector::withdraw_balance",
        arguments: _args
      });
    }
    builder2.withdrawBalance = withdrawBalance;
  })(builder = fee_collector2.builder || (fee_collector2.builder = {}));
  let view;
  ((view2) => {
    async function balanceValue(client, args) {
      const tx = new Transaction();
      builder.balanceValue(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.balanceValue = balanceValue;
    async function changeFee(client, args) {
      const tx = new Transaction();
      builder.changeFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.changeFee = changeFee;
    async function deposit(client, args) {
      const tx = new Transaction();
      builder.deposit(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deposit = deposit;
    async function depositBalance(client, args) {
      const tx = new Transaction();
      builder.depositBalance(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.depositBalance = depositBalance;
    async function feeAmount(client, args) {
      const tx = new Transaction();
      builder.feeAmount(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.feeAmount = feeAmount;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
    async function withdraw(client, args) {
      const tx = new Transaction();
      builder.withdraw(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.withdraw = withdraw;
    async function withdrawBalance(client, args) {
      const tx = new Transaction();
      builder.withdrawBalance(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.withdrawBalance = withdrawBalance;
  })(view = fee_collector2.view || (fee_collector2.view = {}));
})(fee_collector || (fee_collector = {}));
var governance_message;
((governance_message2) => {
  let DecreeReceipt;
  ((DecreeReceipt2) => {
    DecreeReceipt2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::governance_message::DecreeReceipt";
    const TYPE = new TypeDescriptor(
      DecreeReceipt2.TYPE_QNAME
    );
    function type(arg0 = ANY_TYPE) {
      return TYPE.apply(arg0);
    }
    DecreeReceipt2.type = type;
  })(DecreeReceipt = governance_message2.DecreeReceipt || (governance_message2.DecreeReceipt = {}));
  let DecreeTicket;
  ((DecreeTicket2) => {
    DecreeTicket2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::governance_message::DecreeTicket";
    const TYPE = new TypeDescriptor(DecreeTicket2.TYPE_QNAME);
    function type(arg0 = ANY_TYPE) {
      return TYPE.apply(arg0);
    }
    DecreeTicket2.type = type;
  })(DecreeTicket = governance_message2.DecreeTicket || (governance_message2.DecreeTicket = {}));
  let builder;
  ((builder2) => {
    function authorizeVerifyGlobal(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU16(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPureU8(args[4], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::governance_message::authorize_verify_global",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.authorizeVerifyGlobal = authorizeVerifyGlobal;
    function authorizeVerifyLocal(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU16(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPureU8(args[4], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::governance_message::authorize_verify_local",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.authorizeVerifyLocal = authorizeVerifyLocal;
    function destroy(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::governance_message::destroy",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.destroy = destroy;
    function payload(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::governance_message::payload",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.payload = payload;
    function sequence(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::governance_message::sequence",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.sequence = sequence;
    function takePayload(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::governance_message::take_payload",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.takePayload = takePayload;
    function verifyVaa(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::governance_message::verify_vaa",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.verifyVaa = verifyVaa;
  })(builder = governance_message2.builder || (governance_message2.builder = {}));
  let view;
  ((view2) => {
    async function authorizeVerifyGlobal(client, args, typeArguments) {
      const tx = new Transaction();
      builder.authorizeVerifyGlobal(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeVerifyGlobal = authorizeVerifyGlobal;
    async function authorizeVerifyLocal(client, args, typeArguments) {
      const tx = new Transaction();
      builder.authorizeVerifyLocal(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeVerifyLocal = authorizeVerifyLocal;
    async function destroy(client, args, typeArguments) {
      const tx = new Transaction();
      builder.destroy(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.destroy = destroy;
    async function payload(client, args, typeArguments) {
      const tx = new Transaction();
      builder.payload(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.payload = payload;
    async function sequence(client, args, typeArguments) {
      const tx = new Transaction();
      builder.sequence(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.sequence = sequence;
    async function takePayload(client, args, typeArguments) {
      const tx = new Transaction();
      builder.takePayload(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.takePayload = takePayload;
    async function verifyVaa(client, args, typeArguments) {
      const tx = new Transaction();
      builder.verifyVaa(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.verifyVaa = verifyVaa;
  })(view = governance_message2.view || (governance_message2.view = {}));
})(governance_message || (governance_message = {}));
var guardian;
((guardian2) => {
  let Guardian;
  ((Guardian2) => {
    Guardian2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian::Guardian";
    const TYPE = new TypeDescriptor(Guardian2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Guardian2.type = type;
  })(Guardian = guardian2.Guardian || (guardian2.Guardian = {}));
  let builder;
  ((builder2) => {
    function asBytes(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian::as_bytes",
        arguments: _args
      });
    }
    builder2.asBytes = asBytes;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
    function pubkey(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian::pubkey",
        arguments: _args
      });
    }
    builder2.pubkey = pubkey;
    function verify(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian::verify",
        arguments: _args
      });
    }
    builder2.verify = verify;
  })(builder = guardian2.builder || (guardian2.builder = {}));
  let view;
  ((view2) => {
    async function asBytes(client, args) {
      const tx = new Transaction();
      builder.asBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.asBytes = asBytes;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
    async function pubkey(client, args) {
      const tx = new Transaction();
      builder.pubkey(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.pubkey = pubkey;
    async function verify(client, args) {
      const tx = new Transaction();
      builder.verify(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.verify = verify;
  })(view = guardian2.view || (guardian2.view = {}));
})(guardian || (guardian = {}));
var guardian_set;
((guardian_set2) => {
  let GuardianSet;
  ((GuardianSet2) => {
    GuardianSet2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_set::GuardianSet";
    const TYPE = new TypeDescriptor(GuardianSet2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    GuardianSet2.type = type;
  })(GuardianSet = guardian_set2.GuardianSet || (guardian_set2.GuardianSet = {}));
  let builder;
  ((builder2) => {
    function expirationTimestampMs(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_set::expiration_timestamp_ms",
        arguments: _args
      });
    }
    builder2.expirationTimestampMs = expirationTimestampMs;
    function guardianAt(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_set::guardian_at",
        arguments: _args
      });
    }
    builder2.guardianAt = guardianAt;
    function guardians(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_set::guardians",
        arguments: _args
      });
    }
    builder2.guardians = guardians;
    function index(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_set::index",
        arguments: _args
      });
    }
    builder2.index = index;
    function indexAsU64(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_set::index_as_u64",
        arguments: _args
      });
    }
    builder2.indexAsU64 = indexAsU64;
    function isActive(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_set::is_active",
        arguments: _args
      });
    }
    builder2.isActive = isActive;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_set::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
    function numGuardians(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_set::num_guardians",
        arguments: _args
      });
    }
    builder2.numGuardians = numGuardians;
    function quorum(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_set::quorum",
        arguments: _args
      });
    }
    builder2.quorum = quorum;
    function setExpiration(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_set::set_expiration",
        arguments: _args
      });
    }
    builder2.setExpiration = setExpiration;
  })(builder = guardian_set2.builder || (guardian_set2.builder = {}));
  let view;
  ((view2) => {
    async function expirationTimestampMs(client, args) {
      const tx = new Transaction();
      builder.expirationTimestampMs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.expirationTimestampMs = expirationTimestampMs;
    async function guardianAt(client, args) {
      const tx = new Transaction();
      builder.guardianAt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.guardianAt = guardianAt;
    async function guardians(client, args) {
      const tx = new Transaction();
      builder.guardians(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.guardians = guardians;
    async function index(client, args) {
      const tx = new Transaction();
      builder.index(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.index = index;
    async function indexAsU64(client, args) {
      const tx = new Transaction();
      builder.indexAsU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.indexAsU64 = indexAsU64;
    async function isActive(client, args) {
      const tx = new Transaction();
      builder.isActive(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.isActive = isActive;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
    async function numGuardians(client, args) {
      const tx = new Transaction();
      builder.numGuardians(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.numGuardians = numGuardians;
    async function quorum(client, args) {
      const tx = new Transaction();
      builder.quorum(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.quorum = quorum;
    async function setExpiration(client, args) {
      const tx = new Transaction();
      builder.setExpiration(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setExpiration = setExpiration;
  })(view = guardian_set2.view || (guardian_set2.view = {}));
})(guardian_set || (guardian_set = {}));
var guardian_signature;
((guardian_signature2) => {
  let GuardianSignature;
  ((GuardianSignature2) => {
    GuardianSignature2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_signature::GuardianSignature";
    const TYPE = new TypeDescriptor(
      GuardianSignature2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GuardianSignature2.type = type;
  })(GuardianSignature = guardian_signature2.GuardianSignature || (guardian_signature2.GuardianSignature = {}));
  let builder;
  ((builder2) => {
    function index(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_signature::index",
        arguments: _args
      });
    }
    builder2.index = index;
    function indexAsU64(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_signature::index_as_u64",
        arguments: _args
      });
    }
    builder2.indexAsU64 = indexAsU64;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));
      _args.push(transactionArgumentOrPureU8(args[3], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_signature::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
    function r(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_signature::r",
        arguments: _args
      });
    }
    builder2.r = r;
    function recoveryId(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_signature::recovery_id",
        arguments: _args
      });
    }
    builder2.recoveryId = recoveryId;
    function s(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_signature::s",
        arguments: _args
      });
    }
    builder2.s = s;
    function toRsv(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::guardian_signature::to_rsv",
        arguments: _args
      });
    }
    builder2.toRsv = toRsv;
  })(builder = guardian_signature2.builder || (guardian_signature2.builder = {}));
  let view;
  ((view2) => {
    async function index(client, args) {
      const tx = new Transaction();
      builder.index(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.index = index;
    async function indexAsU64(client, args) {
      const tx = new Transaction();
      builder.indexAsU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.indexAsU64 = indexAsU64;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
    async function r(client, args) {
      const tx = new Transaction();
      builder.r(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.r = r;
    async function recoveryId(client, args) {
      const tx = new Transaction();
      builder.recoveryId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.recoveryId = recoveryId;
    async function s(client, args) {
      const tx = new Transaction();
      builder.s(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.s = s;
    async function toRsv(client, args) {
      const tx = new Transaction();
      builder.toRsv(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.toRsv = toRsv;
  })(view = guardian_signature2.view || (guardian_signature2.view = {}));
})(guardian_signature || (guardian_signature = {}));
var migrate = class _migrate extends import_sui4.SuiBaseProcessor {
  constructor(options) {
    super("migrate", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a",
    network: import_sui4.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _migrate({ ..._migrate.DEFAULT_OPTIONS, ...options });
  }
  onEventMigrateComplete(func, fetchConfig) {
    this.onMoveEvent(func, { type: "migrate::MigrateComplete" }, fetchConfig);
    return this;
  }
};
((migrate4) => {
  let MigrateComplete;
  ((MigrateComplete2) => {
    MigrateComplete2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::migrate::MigrateComplete";
    const TYPE = new TypeDescriptor(
      MigrateComplete2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    MigrateComplete2.type = type;
  })(MigrateComplete = migrate4.MigrateComplete || (migrate4.MigrateComplete = {}));
  let builder;
  ((builder2) => {
    function migrate5(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::migrate::migrate",
        arguments: _args
      });
    }
    builder2.migrate = migrate5;
  })(builder = migrate4.builder || (migrate4.builder = {}));
  let view;
  ((view2) => {
    async function migrate5(client, args) {
      const tx = new Transaction();
      builder.migrate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.migrate = migrate5;
  })(view = migrate4.view || (migrate4.view = {}));
})(migrate || (migrate = {}));
var package_utils = class _package_utils extends import_sui4.SuiBaseProcessor {
  constructor(options) {
    super("package_utils", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a",
    network: import_sui4.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _package_utils({ ..._package_utils.DEFAULT_OPTIONS, ...options });
  }
  onEventCurrentPackage(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "package_utils::CurrentPackage" },
      fetchConfig
    );
    return this;
  }
  onEventCurrentVersion(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "package_utils::CurrentVersion" },
      fetchConfig
    );
    return this;
  }
  onEventPackageInfo(func, fetchConfig) {
    this.onMoveEvent(func, { type: "package_utils::PackageInfo" }, fetchConfig);
    return this;
  }
  onEventPendingPackage(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "package_utils::PendingPackage" },
      fetchConfig
    );
    return this;
  }
};
((package_utils2) => {
  let CurrentPackage;
  ((CurrentPackage2) => {
    CurrentPackage2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::CurrentPackage";
    const TYPE = new TypeDescriptor(CurrentPackage2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    CurrentPackage2.type = type;
  })(CurrentPackage = package_utils2.CurrentPackage || (package_utils2.CurrentPackage = {}));
  let CurrentVersion;
  ((CurrentVersion2) => {
    CurrentVersion2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::CurrentVersion";
    const TYPE = new TypeDescriptor(CurrentVersion2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    CurrentVersion2.type = type;
  })(CurrentVersion = package_utils2.CurrentVersion || (package_utils2.CurrentVersion = {}));
  let PackageInfo;
  ((PackageInfo2) => {
    PackageInfo2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::PackageInfo";
    const TYPE = new TypeDescriptor(PackageInfo2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    PackageInfo2.type = type;
  })(PackageInfo = package_utils2.PackageInfo || (package_utils2.PackageInfo = {}));
  let PendingPackage;
  ((PendingPackage2) => {
    PendingPackage2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::PendingPackage";
    const TYPE = new TypeDescriptor(PendingPackage2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    PendingPackage2.type = type;
  })(PendingPackage = package_utils2.PendingPackage || (package_utils2.PendingPackage = {}));
  let builder;
  ((builder2) => {
    function assertPackageUpgradeCap(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::assert_package_upgrade_cap",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.assertPackageUpgradeCap = assertPackageUpgradeCap;
    function assertVersion(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::assert_version",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.assertVersion = assertVersion;
    function authorizeUpgrade(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::authorize_upgrade",
        arguments: _args
      });
    }
    builder2.authorizeUpgrade = authorizeUpgrade;
    function authorizedDigest(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::authorized_digest",
        arguments: _args
      });
    }
    builder2.authorizedDigest = authorizedDigest;
    function commitUpgrade(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::commit_upgrade",
        arguments: _args
      });
    }
    builder2.commitUpgrade = commitUpgrade;
    function committedPackage(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::committed_package",
        arguments: _args
      });
    }
    builder2.committedPackage = committedPackage;
    function currentDigest(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::current_digest",
        arguments: _args
      });
    }
    builder2.currentDigest = currentDigest;
    function currentPackage(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::current_package",
        arguments: _args
      });
    }
    builder2.currentPackage = currentPackage;
    function initPackageInfo(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::init_package_info",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.initPackageInfo = initPackageInfo;
    function migrateVersion(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::migrate_version",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string" ? typeArguments[1] : typeArguments[1].getSignature()
        ]
      });
    }
    builder2.migrateVersion = migrateVersion;
    function typeOfVersion(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::package_utils::type_of_version",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.typeOfVersion = typeOfVersion;
  })(builder = package_utils2.builder || (package_utils2.builder = {}));
  let view;
  ((view2) => {
    async function assertPackageUpgradeCap(client, args, typeArguments) {
      const tx = new Transaction();
      builder.assertPackageUpgradeCap(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.assertPackageUpgradeCap = assertPackageUpgradeCap;
    async function assertVersion(client, args, typeArguments) {
      const tx = new Transaction();
      builder.assertVersion(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.assertVersion = assertVersion;
    async function authorizeUpgrade(client, args) {
      const tx = new Transaction();
      builder.authorizeUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeUpgrade = authorizeUpgrade;
    async function authorizedDigest(client, args) {
      const tx = new Transaction();
      builder.authorizedDigest(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizedDigest = authorizedDigest;
    async function commitUpgrade(client, args) {
      const tx = new Transaction();
      builder.commitUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.commitUpgrade = commitUpgrade;
    async function committedPackage(client, args) {
      const tx = new Transaction();
      builder.committedPackage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.committedPackage = committedPackage;
    async function currentDigest(client, args) {
      const tx = new Transaction();
      builder.currentDigest(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.currentDigest = currentDigest;
    async function currentPackage(client, args) {
      const tx = new Transaction();
      builder.currentPackage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.currentPackage = currentPackage;
    async function initPackageInfo(client, args, typeArguments) {
      const tx = new Transaction();
      builder.initPackageInfo(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.initPackageInfo = initPackageInfo;
    async function migrateVersion(client, args, typeArguments) {
      const tx = new Transaction();
      builder.migrateVersion(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.migrateVersion = migrateVersion;
    async function typeOfVersion(client, args, typeArguments) {
      const tx = new Transaction();
      builder.typeOfVersion(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.typeOfVersion = typeOfVersion;
  })(view = package_utils2.view || (package_utils2.view = {}));
})(package_utils || (package_utils = {}));
var publish_message = class _publish_message extends import_sui4.SuiBaseProcessor {
  constructor(options) {
    super("publish_message", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a",
    network: import_sui4.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _publish_message({
      ..._publish_message.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventWormholeMessage(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "publish_message::WormholeMessage" },
      fetchConfig
    );
    return this;
  }
};
((publish_message2) => {
  let MessageTicket;
  ((MessageTicket2) => {
    MessageTicket2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::publish_message::MessageTicket";
    const TYPE = new TypeDescriptor(MessageTicket2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    MessageTicket2.type = type;
  })(MessageTicket = publish_message2.MessageTicket || (publish_message2.MessageTicket = {}));
  let WormholeMessage;
  ((WormholeMessage2) => {
    WormholeMessage2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::publish_message::WormholeMessage";
    const TYPE = new TypeDescriptor(
      WormholeMessage2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    WormholeMessage2.type = type;
  })(WormholeMessage = publish_message2.WormholeMessage || (publish_message2.WormholeMessage = {}));
  let builder;
  ((builder2) => {
    function prepareMessage(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::publish_message::prepare_message",
        arguments: _args
      });
    }
    builder2.prepareMessage = prepareMessage;
    function publishMessage(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::publish_message::publish_message",
        arguments: _args
      });
    }
    builder2.publishMessage = publishMessage;
  })(builder = publish_message2.builder || (publish_message2.builder = {}));
  let view;
  ((view2) => {
    async function prepareMessage(client, args) {
      const tx = new Transaction();
      builder.prepareMessage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.prepareMessage = prepareMessage;
    async function publishMessage(client, args) {
      const tx = new Transaction();
      builder.publishMessage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.publishMessage = publishMessage;
  })(view = publish_message2.view || (publish_message2.view = {}));
})(publish_message || (publish_message = {}));
var set3;
((set6) => {
  let Empty2;
  ((Empty3) => {
    Empty3.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::set::Empty";
    const TYPE = new TypeDescriptor(Empty3.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Empty3.type = type;
  })(Empty2 = set6.Empty || (set6.Empty = {}));
  let Set2;
  ((Set3) => {
    Set3.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::set::Set";
    const TYPE = new TypeDescriptor(Set3.TYPE_QNAME);
    function type(arg0 = ANY_TYPE) {
      return TYPE.apply(arg0);
    }
    Set3.type = type;
  })(Set2 = set6.Set || (set6.Set = {}));
  let builder;
  ((builder2) => {
    function add2(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::set::add",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.add = add2;
    function contains(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::set::contains",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.contains = contains;
    function new_(tx, args, typeArguments) {
      const _args = [];
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::set::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.new_ = new_;
    function remove(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::set::remove",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.remove = remove;
  })(builder = set6.builder || (set6.builder = {}));
  let view;
  ((view2) => {
    async function add2(client, args, typeArguments) {
      const tx = new Transaction();
      builder.add(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.add = add2;
    async function contains(client, args, typeArguments) {
      const tx = new Transaction();
      builder.contains(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.contains = contains;
    async function new_(client, args, typeArguments) {
      const tx = new Transaction();
      builder.new_(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.new_ = new_;
    async function remove(client, args, typeArguments) {
      const tx = new Transaction();
      builder.remove(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.remove = remove;
  })(view = set6.view || (set6.view = {}));
})(set3 || (set3 = {}));
var set_fee;
((set_fee2) => {
  let GovernanceWitness;
  ((GovernanceWitness2) => {
    GovernanceWitness2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::set_fee::GovernanceWitness";
    const TYPE = new TypeDescriptor(
      GovernanceWitness2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GovernanceWitness2.type = type;
  })(GovernanceWitness = set_fee2.GovernanceWitness || (set_fee2.GovernanceWitness = {}));
  let SetFee;
  ((SetFee2) => {
    SetFee2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::set_fee::SetFee";
    const TYPE = new TypeDescriptor(SetFee2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    SetFee2.type = type;
  })(SetFee = set_fee2.SetFee || (set_fee2.SetFee = {}));
  let builder;
  ((builder2) => {
    function authorizeGovernance(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::set_fee::authorize_governance",
        arguments: _args
      });
    }
    builder2.authorizeGovernance = authorizeGovernance;
    function setFee(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::set_fee::set_fee",
        arguments: _args
      });
    }
    builder2.setFee = setFee;
  })(builder = set_fee2.builder || (set_fee2.builder = {}));
  let view;
  ((view2) => {
    async function authorizeGovernance(client, args) {
      const tx = new Transaction();
      builder.authorizeGovernance(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeGovernance = authorizeGovernance;
    async function setFee(client, args) {
      const tx = new Transaction();
      builder.setFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setFee = setFee;
  })(view = set_fee2.view || (set_fee2.view = {}));
})(set_fee || (set_fee = {}));
var setup;
((setup4) => {
  let DeployerCap;
  ((DeployerCap2) => {
    DeployerCap2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::setup::DeployerCap";
    const TYPE = new TypeDescriptor(DeployerCap2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    DeployerCap2.type = type;
  })(DeployerCap = setup4.DeployerCap || (setup4.DeployerCap = {}));
  let builder;
  ((builder2) => {
    function complete(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU16(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrPureU32(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrPureU32(args[6], tx));
      _args.push(transactionArgumentOrPureU64(args[7], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::setup::complete",
        arguments: _args
      });
    }
    builder2.complete = complete;
  })(builder = setup4.builder || (setup4.builder = {}));
  let view;
  ((view2) => {
    async function complete(client, args) {
      const tx = new Transaction();
      builder.complete(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.complete = complete;
  })(view = setup4.view || (setup4.view = {}));
})(setup || (setup = {}));
var state3;
((state6) => {
  let LatestOnly;
  ((LatestOnly2) => {
    LatestOnly2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::LatestOnly";
    const TYPE = new TypeDescriptor(LatestOnly2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    LatestOnly2.type = type;
  })(LatestOnly = state6.LatestOnly || (state6.LatestOnly = {}));
  let State;
  ((State2) => {
    State2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::State";
    const TYPE = new TypeDescriptor(State2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    State2.type = type;
  })(State = state6.State || (state6.State = {}));
  let builder;
  ((builder2) => {
    function addNewGuardianSet(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::add_new_guardian_set",
        arguments: _args
      });
    }
    builder2.addNewGuardianSet = addNewGuardianSet;
    function assertAuthorizedDigest(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::assert_authorized_digest",
        arguments: _args
      });
    }
    builder2.assertAuthorizedDigest = assertAuthorizedDigest;
    function assertLatestOnly(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::assert_latest_only",
        arguments: _args
      });
    }
    builder2.assertLatestOnly = assertLatestOnly;
    function authorizeUpgrade(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::authorize_upgrade",
        arguments: _args
      });
    }
    builder2.authorizeUpgrade = authorizeUpgrade;
    function borrowMutConsumedVaas(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::borrow_mut_consumed_vaas",
        arguments: _args
      });
    }
    builder2.borrowMutConsumedVaas = borrowMutConsumedVaas;
    function borrowMutConsumedVaasUnchecked(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::borrow_mut_consumed_vaas_unchecked",
        arguments: _args
      });
    }
    builder2.borrowMutConsumedVaasUnchecked = borrowMutConsumedVaasUnchecked;
    function chainId(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::chain_id",
        arguments: _args
      });
    }
    builder2.chainId = chainId;
    function commitUpgrade(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::commit_upgrade",
        arguments: _args
      });
    }
    builder2.commitUpgrade = commitUpgrade;
    function currentPackage(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::current_package",
        arguments: _args
      });
    }
    builder2.currentPackage = currentPackage;
    function depositFee(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::deposit_fee",
        arguments: _args
      });
    }
    builder2.depositFee = depositFee;
    function expireGuardianSet(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::expire_guardian_set",
        arguments: _args
      });
    }
    builder2.expireGuardianSet = expireGuardianSet;
    function governanceChain(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::governance_chain",
        arguments: _args
      });
    }
    builder2.governanceChain = governanceChain;
    function governanceContract(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::governance_contract",
        arguments: _args
      });
    }
    builder2.governanceContract = governanceContract;
    function governanceModule(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::governance_module",
        arguments: _args
      });
    }
    builder2.governanceModule = governanceModule;
    function guardianSetAt(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::guardian_set_at",
        arguments: _args
      });
    }
    builder2.guardianSetAt = guardianSetAt;
    function guardianSetIndex(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::guardian_set_index",
        arguments: _args
      });
    }
    builder2.guardianSetIndex = guardianSetIndex;
    function guardianSetSecondsToLive(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::guardian_set_seconds_to_live",
        arguments: _args
      });
    }
    builder2.guardianSetSecondsToLive = guardianSetSecondsToLive;
    function messageFee(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::message_fee",
        arguments: _args
      });
    }
    builder2.messageFee = messageFee;
    function migrateV020(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::migrate__v__0_2_0",
        arguments: _args
      });
    }
    builder2.migrateV020 = migrateV020;
    function migrateVersion(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::migrate_version",
        arguments: _args
      });
    }
    builder2.migrateVersion = migrateVersion;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU16(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU32(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrPureU32(args[5], tx));
      _args.push(transactionArgumentOrPureU64(args[6], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
    function setMessageFee(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::set_message_fee",
        arguments: _args
      });
    }
    builder2.setMessageFee = setMessageFee;
    function withdrawFee(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::state::withdraw_fee",
        arguments: _args
      });
    }
    builder2.withdrawFee = withdrawFee;
  })(builder = state6.builder || (state6.builder = {}));
  let view;
  ((view2) => {
    async function addNewGuardianSet(client, args) {
      const tx = new Transaction();
      builder.addNewGuardianSet(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.addNewGuardianSet = addNewGuardianSet;
    async function assertAuthorizedDigest(client, args) {
      const tx = new Transaction();
      builder.assertAuthorizedDigest(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.assertAuthorizedDigest = assertAuthorizedDigest;
    async function assertLatestOnly(client, args) {
      const tx = new Transaction();
      builder.assertLatestOnly(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.assertLatestOnly = assertLatestOnly;
    async function authorizeUpgrade(client, args) {
      const tx = new Transaction();
      builder.authorizeUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeUpgrade = authorizeUpgrade;
    async function borrowMutConsumedVaas(client, args) {
      const tx = new Transaction();
      builder.borrowMutConsumedVaas(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.borrowMutConsumedVaas = borrowMutConsumedVaas;
    async function borrowMutConsumedVaasUnchecked(client, args) {
      const tx = new Transaction();
      builder.borrowMutConsumedVaasUnchecked(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.borrowMutConsumedVaasUnchecked = borrowMutConsumedVaasUnchecked;
    async function chainId(client, args) {
      const tx = new Transaction();
      builder.chainId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.chainId = chainId;
    async function commitUpgrade(client, args) {
      const tx = new Transaction();
      builder.commitUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.commitUpgrade = commitUpgrade;
    async function currentPackage(client, args) {
      const tx = new Transaction();
      builder.currentPackage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.currentPackage = currentPackage;
    async function depositFee(client, args) {
      const tx = new Transaction();
      builder.depositFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.depositFee = depositFee;
    async function expireGuardianSet(client, args) {
      const tx = new Transaction();
      builder.expireGuardianSet(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.expireGuardianSet = expireGuardianSet;
    async function governanceChain(client, args) {
      const tx = new Transaction();
      builder.governanceChain(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.governanceChain = governanceChain;
    async function governanceContract(client, args) {
      const tx = new Transaction();
      builder.governanceContract(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.governanceContract = governanceContract;
    async function governanceModule(client, args) {
      const tx = new Transaction();
      builder.governanceModule(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.governanceModule = governanceModule;
    async function guardianSetAt(client, args) {
      const tx = new Transaction();
      builder.guardianSetAt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.guardianSetAt = guardianSetAt;
    async function guardianSetIndex(client, args) {
      const tx = new Transaction();
      builder.guardianSetIndex(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.guardianSetIndex = guardianSetIndex;
    async function guardianSetSecondsToLive(client, args) {
      const tx = new Transaction();
      builder.guardianSetSecondsToLive(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.guardianSetSecondsToLive = guardianSetSecondsToLive;
    async function messageFee(client, args) {
      const tx = new Transaction();
      builder.messageFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.messageFee = messageFee;
    async function migrateV020(client, args) {
      const tx = new Transaction();
      builder.migrateV020(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.migrateV020 = migrateV020;
    async function migrateVersion(client, args) {
      const tx = new Transaction();
      builder.migrateVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.migrateVersion = migrateVersion;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.new_ = new_;
    async function setMessageFee(client, args) {
      const tx = new Transaction();
      builder.setMessageFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setMessageFee = setMessageFee;
    async function withdrawFee(client, args) {
      const tx = new Transaction();
      builder.withdrawFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.withdrawFee = withdrawFee;
  })(view = state6.view || (state6.view = {}));
})(state3 || (state3 = {}));
var transfer_fee;
((transfer_fee2) => {
  let GovernanceWitness;
  ((GovernanceWitness2) => {
    GovernanceWitness2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::transfer_fee::GovernanceWitness";
    const TYPE = new TypeDescriptor(
      GovernanceWitness2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GovernanceWitness2.type = type;
  })(GovernanceWitness = transfer_fee2.GovernanceWitness || (transfer_fee2.GovernanceWitness = {}));
  let TransferFee;
  ((TransferFee2) => {
    TransferFee2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::transfer_fee::TransferFee";
    const TYPE = new TypeDescriptor(TransferFee2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    TransferFee2.type = type;
  })(TransferFee = transfer_fee2.TransferFee || (transfer_fee2.TransferFee = {}));
  let builder;
  ((builder2) => {
    function authorizeGovernance(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::transfer_fee::authorize_governance",
        arguments: _args
      });
    }
    builder2.authorizeGovernance = authorizeGovernance;
    function transferFee(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::transfer_fee::transfer_fee",
        arguments: _args
      });
    }
    builder2.transferFee = transferFee;
  })(builder = transfer_fee2.builder || (transfer_fee2.builder = {}));
  let view;
  ((view2) => {
    async function authorizeGovernance(client, args) {
      const tx = new Transaction();
      builder.authorizeGovernance(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeGovernance = authorizeGovernance;
    async function transferFee(client, args) {
      const tx = new Transaction();
      builder.transferFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.transferFee = transferFee;
  })(view = transfer_fee2.view || (transfer_fee2.view = {}));
})(transfer_fee || (transfer_fee = {}));
var update_guardian_set = class _update_guardian_set extends import_sui4.SuiBaseProcessor {
  constructor(options) {
    super("update_guardian_set", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a",
    network: import_sui4.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _update_guardian_set({
      ..._update_guardian_set.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventGuardianSetAdded(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "update_guardian_set::GuardianSetAdded" },
      fetchConfig
    );
    return this;
  }
};
((update_guardian_set2) => {
  let GovernanceWitness;
  ((GovernanceWitness2) => {
    GovernanceWitness2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::update_guardian_set::GovernanceWitness";
    const TYPE = new TypeDescriptor(
      GovernanceWitness2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GovernanceWitness2.type = type;
  })(GovernanceWitness = update_guardian_set2.GovernanceWitness || (update_guardian_set2.GovernanceWitness = {}));
  let GuardianSetAdded;
  ((GuardianSetAdded2) => {
    GuardianSetAdded2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::update_guardian_set::GuardianSetAdded";
    const TYPE = new TypeDescriptor(
      GuardianSetAdded2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GuardianSetAdded2.type = type;
  })(GuardianSetAdded = update_guardian_set2.GuardianSetAdded || (update_guardian_set2.GuardianSetAdded = {}));
  let UpdateGuardianSet;
  ((UpdateGuardianSet2) => {
    UpdateGuardianSet2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::update_guardian_set::UpdateGuardianSet";
    const TYPE = new TypeDescriptor(
      UpdateGuardianSet2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    UpdateGuardianSet2.type = type;
  })(UpdateGuardianSet = update_guardian_set2.UpdateGuardianSet || (update_guardian_set2.UpdateGuardianSet = {}));
  let builder;
  ((builder2) => {
    function authorizeGovernance(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::update_guardian_set::authorize_governance",
        arguments: _args
      });
    }
    builder2.authorizeGovernance = authorizeGovernance;
    function updateGuardianSet(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::update_guardian_set::update_guardian_set",
        arguments: _args
      });
    }
    builder2.updateGuardianSet = updateGuardianSet;
  })(builder = update_guardian_set2.builder || (update_guardian_set2.builder = {}));
  let view;
  ((view2) => {
    async function authorizeGovernance(client, args) {
      const tx = new Transaction();
      builder.authorizeGovernance(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeGovernance = authorizeGovernance;
    async function updateGuardianSet(client, args) {
      const tx = new Transaction();
      builder.updateGuardianSet(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.updateGuardianSet = updateGuardianSet;
  })(view = update_guardian_set2.view || (update_guardian_set2.view = {}));
})(update_guardian_set || (update_guardian_set = {}));
var upgrade_contract = class _upgrade_contract extends import_sui4.SuiBaseProcessor {
  constructor(options) {
    super("upgrade_contract", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a",
    network: import_sui4.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _upgrade_contract({
      ..._upgrade_contract.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventContractUpgraded(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "upgrade_contract::ContractUpgraded" },
      fetchConfig
    );
    return this;
  }
};
((upgrade_contract2) => {
  let ContractUpgraded;
  ((ContractUpgraded2) => {
    ContractUpgraded2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::upgrade_contract::ContractUpgraded";
    const TYPE = new TypeDescriptor(
      ContractUpgraded2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    ContractUpgraded2.type = type;
  })(ContractUpgraded = upgrade_contract2.ContractUpgraded || (upgrade_contract2.ContractUpgraded = {}));
  let GovernanceWitness;
  ((GovernanceWitness2) => {
    GovernanceWitness2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::upgrade_contract::GovernanceWitness";
    const TYPE = new TypeDescriptor(
      GovernanceWitness2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GovernanceWitness2.type = type;
  })(GovernanceWitness = upgrade_contract2.GovernanceWitness || (upgrade_contract2.GovernanceWitness = {}));
  let UpgradeContract;
  ((UpgradeContract2) => {
    UpgradeContract2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::upgrade_contract::UpgradeContract";
    const TYPE = new TypeDescriptor(
      UpgradeContract2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    UpgradeContract2.type = type;
  })(UpgradeContract = upgrade_contract2.UpgradeContract || (upgrade_contract2.UpgradeContract = {}));
  let builder;
  ((builder2) => {
    function authorizeGovernance(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::upgrade_contract::authorize_governance",
        arguments: _args
      });
    }
    builder2.authorizeGovernance = authorizeGovernance;
    function authorizeUpgrade(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::upgrade_contract::authorize_upgrade",
        arguments: _args
      });
    }
    builder2.authorizeUpgrade = authorizeUpgrade;
    function commitUpgrade(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::upgrade_contract::commit_upgrade",
        arguments: _args
      });
    }
    builder2.commitUpgrade = commitUpgrade;
    function takeDigest(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::upgrade_contract::take_digest",
        arguments: _args
      });
    }
    builder2.takeDigest = takeDigest;
  })(builder = upgrade_contract2.builder || (upgrade_contract2.builder = {}));
  let view;
  ((view2) => {
    async function authorizeGovernance(client, args) {
      const tx = new Transaction();
      builder.authorizeGovernance(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeGovernance = authorizeGovernance;
    async function authorizeUpgrade(client, args) {
      const tx = new Transaction();
      builder.authorizeUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeUpgrade = authorizeUpgrade;
    async function commitUpgrade(client, args) {
      const tx = new Transaction();
      builder.commitUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.commitUpgrade = commitUpgrade;
    async function takeDigest(client, args) {
      const tx = new Transaction();
      builder.takeDigest(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.takeDigest = takeDigest;
  })(view = upgrade_contract2.view || (upgrade_contract2.view = {}));
})(upgrade_contract || (upgrade_contract = {}));
var vaa2;
((vaa3) => {
  let VAA;
  ((VAA2) => {
    VAA2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::VAA";
    const TYPE = new TypeDescriptor(VAA2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    VAA2.type = type;
  })(VAA = vaa3.VAA || (vaa3.VAA = {}));
  let builder;
  ((builder2) => {
    function batchId(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::batch_id",
        arguments: _args
      });
    }
    builder2.batchId = batchId;
    function computeMessageHash(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::compute_message_hash",
        arguments: _args
      });
    }
    builder2.computeMessageHash = computeMessageHash;
    function consistencyLevel(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::consistency_level",
        arguments: _args
      });
    }
    builder2.consistencyLevel = consistencyLevel;
    function consume(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::consume",
        arguments: _args
      });
    }
    builder2.consume = consume;
    function digest(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::digest",
        arguments: _args
      });
    }
    builder2.digest = digest;
    function emitterAddress(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::emitter_address",
        arguments: _args
      });
    }
    builder2.emitterAddress = emitterAddress;
    function emitterChain(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::emitter_chain",
        arguments: _args
      });
    }
    builder2.emitterChain = emitterChain;
    function emitterInfo(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::emitter_info",
        arguments: _args
      });
    }
    builder2.emitterInfo = emitterInfo;
    function finality(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::finality",
        arguments: _args
      });
    }
    builder2.finality = finality;
    function guardianSetIndex(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::guardian_set_index",
        arguments: _args
      });
    }
    builder2.guardianSetIndex = guardianSetIndex;
    function nonce(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::nonce",
        arguments: _args
      });
    }
    builder2.nonce = nonce;
    function parseAndVerify(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::parse_and_verify",
        arguments: _args
      });
    }
    builder2.parseAndVerify = parseAndVerify;
    function payload(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::payload",
        arguments: _args
      });
    }
    builder2.payload = payload;
    function sequence(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::sequence",
        arguments: _args
      });
    }
    builder2.sequence = sequence;
    function takeEmitterInfoAndPayload(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::take_emitter_info_and_payload",
        arguments: _args
      });
    }
    builder2.takeEmitterInfoAndPayload = takeEmitterInfoAndPayload;
    function takePayload(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::take_payload",
        arguments: _args
      });
    }
    builder2.takePayload = takePayload;
    function timestamp(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::vaa::timestamp",
        arguments: _args
      });
    }
    builder2.timestamp = timestamp;
  })(builder = vaa3.builder || (vaa3.builder = {}));
  let view;
  ((view2) => {
    async function batchId(client, args) {
      const tx = new Transaction();
      builder.batchId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.batchId = batchId;
    async function computeMessageHash(client, args) {
      const tx = new Transaction();
      builder.computeMessageHash(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.computeMessageHash = computeMessageHash;
    async function consistencyLevel(client, args) {
      const tx = new Transaction();
      builder.consistencyLevel(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.consistencyLevel = consistencyLevel;
    async function consume(client, args) {
      const tx = new Transaction();
      builder.consume(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.consume = consume;
    async function digest(client, args) {
      const tx = new Transaction();
      builder.digest(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.digest = digest;
    async function emitterAddress(client, args) {
      const tx = new Transaction();
      builder.emitterAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.emitterAddress = emitterAddress;
    async function emitterChain(client, args) {
      const tx = new Transaction();
      builder.emitterChain(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.emitterChain = emitterChain;
    async function emitterInfo(client, args) {
      const tx = new Transaction();
      builder.emitterInfo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.emitterInfo = emitterInfo;
    async function finality(client, args) {
      const tx = new Transaction();
      builder.finality(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.finality = finality;
    async function guardianSetIndex(client, args) {
      const tx = new Transaction();
      builder.guardianSetIndex(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.guardianSetIndex = guardianSetIndex;
    async function nonce(client, args) {
      const tx = new Transaction();
      builder.nonce(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.nonce = nonce;
    async function parseAndVerify(client, args) {
      const tx = new Transaction();
      builder.parseAndVerify(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.parseAndVerify = parseAndVerify;
    async function payload(client, args) {
      const tx = new Transaction();
      builder.payload(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.payload = payload;
    async function sequence(client, args) {
      const tx = new Transaction();
      builder.sequence(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.sequence = sequence;
    async function takeEmitterInfoAndPayload(client, args) {
      const tx = new Transaction();
      builder.takeEmitterInfoAndPayload(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.takeEmitterInfoAndPayload = takeEmitterInfoAndPayload;
    async function takePayload(client, args) {
      const tx = new Transaction();
      builder.takePayload(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.takePayload = takePayload;
    async function timestamp(client, args) {
      const tx = new Transaction();
      builder.timestamp(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.timestamp = timestamp;
  })(view = vaa3.view || (vaa3.view = {}));
})(vaa2 || (vaa2 = {}));
var version_control = class _version_control extends import_sui4.SuiBaseProcessor {
  constructor(options) {
    super("version_control", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a",
    network: import_sui4.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _version_control({
      ..._version_control.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventV__0_2_0(func, fetchConfig) {
    this.onMoveEvent(func, { type: "version_control::V__0_2_0" }, fetchConfig);
    return this;
  }
  onEventV__DUMMY(func, fetchConfig) {
    this.onMoveEvent(func, { type: "version_control::V__DUMMY" }, fetchConfig);
    return this;
  }
};
((version_control4) => {
  let V__0_2_0;
  ((V__0_2_02) => {
    V__0_2_02.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::version_control::V__0_2_0";
    const TYPE = new TypeDescriptor(V__0_2_02.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    V__0_2_02.type = type;
  })(V__0_2_0 = version_control4.V__0_2_0 || (version_control4.V__0_2_0 = {}));
  let V__DUMMY;
  ((V__DUMMY2) => {
    V__DUMMY2.TYPE_QNAME = "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::version_control::V__DUMMY";
    const TYPE = new TypeDescriptor(V__DUMMY2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    V__DUMMY2.type = type;
  })(V__DUMMY = version_control4.V__DUMMY || (version_control4.V__DUMMY = {}));
  let builder;
  ((builder2) => {
    function currentVersion(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::version_control::current_version",
        arguments: _args
      });
    }
    builder2.currentVersion = currentVersion;
    function previousVersion(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a::version_control::previous_version",
        arguments: _args
      });
    }
    builder2.previousVersion = previousVersion;
  })(builder = version_control4.builder || (version_control4.builder = {}));
  let view;
  ((view2) => {
    async function currentVersion(client, args) {
      const tx = new Transaction();
      builder.currentVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.currentVersion = currentVersion;
    async function previousVersion(client, args) {
      const tx = new Transaction();
      builder.previousVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.previousVersion = previousVersion;
  })(view = version_control4.view || (version_control4.view = {}));
})(version_control || (version_control = {}));
var MODULES3 = JSON.parse(
  '[{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"bytes","friends":[],"structs":{},"exposedFunctions":{"push_u128_be":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Vector":"U8"}},"U128"],"return":[]},"push_u16_be":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Vector":"U8"}},"U16"],"return":[]},"push_u256_be":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Vector":"U8"}},"U256"],"return":[]},"push_u32_be":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Vector":"U8"}},"U32"],"return":[]},"push_u64_be":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Vector":"U8"}},"U64"],"return":[]},"push_u8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Vector":"U8"}},"U8"],"return":[]},"take_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}},"U64"],"return":[{"Vector":"U8"}]},"take_u128_be":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":["U128"]},"take_u16_be":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":["U16"]},"take_u256_be":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":["U256"]},"take_u32_be":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":["U32"]},"take_u64_be":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":["U64"]},"take_u8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":["U8"]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"bytes20","friends":[],"structs":{"Bytes20":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"data","type":{"Vector":"U8"}}]}},"exposedFunctions":{"data":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes20","name":"Bytes20","typeArguments":[]}}}],"return":[{"Vector":"U8"}]},"default":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes20","name":"Bytes20","typeArguments":[]}}]},"from_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes20","name":"Bytes20","typeArguments":[]}}]},"is_nonzero":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes20","name":"Bytes20","typeArguments":[]}}}],"return":["Bool"]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes20","name":"Bytes20","typeArguments":[]}}]},"take":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes20","name":"Bytes20","typeArguments":[]}}]},"to_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes20","name":"Bytes20","typeArguments":[]}}],"return":[{"Vector":"U8"}]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"bytes32","friends":[],"structs":{"Bytes32":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"data","type":{"Vector":"U8"}}]}},"exposedFunctions":{"data":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}}],"return":[{"Vector":"U8"}]},"default":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"from_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"from_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"from_u256_be":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256"],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"from_u64_be":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"from_utf8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"is_nonzero":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}}],"return":["Bool"]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"take_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"to_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":["Address"]},"to_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[{"Vector":"U8"}]},"to_u256_be":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":["U256"]},"to_u64_be":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":["U64"]},"to_utf8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"consumed_vaas","friends":[],"structs":{"ConsumedVAAs":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"hashes","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"set","name":"Set","typeArguments":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]}}}]}},"exposedFunctions":{"consume":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"consumed_vaas","name":"ConsumedVAAs","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"consumed_vaas","name":"ConsumedVAAs","typeArguments":[]}}]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"cursor","friends":[],"structs":{"Cursor":{"abilities":{"abilities":[]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":false}],"fields":[{"name":"data","type":{"Vector":{"TypeParameter":0}}}]}},"exposedFunctions":{"data":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Vector":{"TypeParameter":0}}}]},"destroy_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":[{"TypeParameter":0}]}}}],"return":["Bool"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Vector":{"TypeParameter":0}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":[{"TypeParameter":0}]}}]},"poke":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"TypeParameter":0}]},"take_rest":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Vector":{"TypeParameter":0}}]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"emitter","friends":[{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"publish_message"}],"structs":{"EmitterCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"sequence","type":"U64"}]},"EmitterCreated":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"emitter_cap","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"EmitterDestroyed":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"emitter_cap","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]}},"exposedFunctions":{"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"emitter","name":"EmitterCap","typeArguments":[]}}],"return":[]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"emitter","name":"EmitterCap","typeArguments":[]}}]},"sequence":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"emitter","name":"EmitterCap","typeArguments":[]}}}],"return":["U64"]},"use_sequence":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"emitter","name":"EmitterCap","typeArguments":[]}}}],"return":["U64"]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"external_address","friends":[],"structs":{"ExternalAddress":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"value","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}}]}},"exposedFunctions":{"default":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}]},"from_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}]},"from_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}]},"is_nonzero":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}}],"return":["Bool"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}]},"new_nonzero":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}]},"take_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}]},"take_nonzero":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}]},"to_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}],"return":["Address"]},"to_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}],"return":[{"Vector":"U8"}]},"to_bytes32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"fee_collector","friends":[],"structs":{"FeeCollector":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"fee_amount","type":"U64"},{"name":"balance","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}}]}},"exposedFunctions":{"balance_value":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"fee_collector","name":"FeeCollector","typeArguments":[]}}}],"return":["U64"]},"change_fee":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"fee_collector","name":"FeeCollector","typeArguments":[]}}},"U64"],"return":[]},"deposit":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"fee_collector","name":"FeeCollector","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}],"return":[]},"deposit_balance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"fee_collector","name":"FeeCollector","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}],"return":[]},"fee_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"fee_collector","name":"FeeCollector","typeArguments":[]}}}],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"fee_collector","name":"FeeCollector","typeArguments":[]}}]},"withdraw":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"fee_collector","name":"FeeCollector","typeArguments":[]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]},"withdraw_balance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"fee_collector","name":"FeeCollector","typeArguments":[]}}},"U64"],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"governance_message","friends":[],"structs":{"DecreeReceipt":{"abilities":{"abilities":[]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"payload","type":{"Vector":"U8"}},{"name":"digest","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}},{"name":"sequence","type":"U64"}]},"DecreeTicket":{"abilities":{"abilities":[]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"governance_chain","type":"U16"},{"name":"governance_contract","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}},{"name":"module_name","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}},{"name":"action","type":"U8"},{"name":"global","type":"Bool"}]}},"exposedFunctions":{"authorize_verify_global":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0},"U16",{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeTicket","typeArguments":[{"TypeParameter":0}]}}]},"authorize_verify_local":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0},"U16",{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeTicket","typeArguments":[{"TypeParameter":0}]}}]},"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeReceipt","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"payload":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeReceipt","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Vector":"U8"}]},"sequence":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeReceipt","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"take_payload":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"consumed_vaas","name":"ConsumedVAAs","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeReceipt","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Vector":"U8"}]},"verify_vaa":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeTicket","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeReceipt","typeArguments":[{"TypeParameter":0}]}}]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"guardian","friends":[],"structs":{"Guardian":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"pubkey","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes20","name":"Bytes20","typeArguments":[]}}}]}},"exposedFunctions":{"as_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian","name":"Guardian","typeArguments":[]}}}],"return":[{"Vector":"U8"}]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian","name":"Guardian","typeArguments":[]}}]},"pubkey":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian","name":"Guardian","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes20","name":"Bytes20","typeArguments":[]}}]},"verify":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian","name":"Guardian","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_signature","name":"GuardianSignature","typeArguments":[]}},{"Vector":"U8"}],"return":["Bool"]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"guardian_set","friends":[{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"state"}],"structs":{"GuardianSet":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"index","type":"U32"},{"name":"guardians","type":{"Vector":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian","name":"Guardian","typeArguments":[]}}}},{"name":"expiration_timestamp_ms","type":"U64"}]}},"exposedFunctions":{"expiration_timestamp_ms":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_set","name":"GuardianSet","typeArguments":[]}}}],"return":["U64"]},"guardian_at":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_set","name":"GuardianSet","typeArguments":[]}}},"U64"],"return":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian","name":"Guardian","typeArguments":[]}}}]},"guardians":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_set","name":"GuardianSet","typeArguments":[]}}}],"return":[{"Reference":{"Vector":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian","name":"Guardian","typeArguments":[]}}}}]},"index":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_set","name":"GuardianSet","typeArguments":[]}}}],"return":["U32"]},"index_as_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_set","name":"GuardianSet","typeArguments":[]}}}],"return":["U64"]},"is_active":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_set","name":"GuardianSet","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":["Bool"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32",{"Vector":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian","name":"Guardian","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_set","name":"GuardianSet","typeArguments":[]}}]},"num_guardians":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_set","name":"GuardianSet","typeArguments":[]}}}],"return":["U64"]},"quorum":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_set","name":"GuardianSet","typeArguments":[]}}}],"return":["U64"]},"set_expiration":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_set","name":"GuardianSet","typeArguments":[]}}},"U32",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"guardian_signature","friends":[],"structs":{"GuardianSignature":{"abilities":{"abilities":["Drop","Store"]},"typeParameters":[],"fields":[{"name":"r","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}},{"name":"s","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}},{"name":"recovery_id","type":"U8"},{"name":"index","type":"U8"}]}},"exposedFunctions":{"index":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_signature","name":"GuardianSignature","typeArguments":[]}}}],"return":["U8"]},"index_as_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_signature","name":"GuardianSignature","typeArguments":[]}}}],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}},"U8","U8"],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_signature","name":"GuardianSignature","typeArguments":[]}}]},"r":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_signature","name":"GuardianSignature","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"recovery_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_signature","name":"GuardianSignature","typeArguments":[]}}}],"return":["U8"]},"s":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_signature","name":"GuardianSignature","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"to_rsv":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_signature","name":"GuardianSignature","typeArguments":[]}}],"return":[{"Vector":"U8"}]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"migrate","friends":[],"structs":{"MigrateComplete":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"package","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]}},"exposedFunctions":{"migrate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"package_utils","friends":[],"structs":{"CurrentPackage":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"CurrentVersion":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"PackageInfo":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"package","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"digest","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}}]},"PendingPackage":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"assert_package_upgrade_cap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}},"U8","U64"],"return":[]},"assert_version":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop","Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[]},"authorize_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeTicket","typeArguments":[]}}]},"authorized_digest":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"commit_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeReceipt","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"committed_package":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"current_digest":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"current_package":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"init_package_info":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0},{"Reference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}}],"return":[]},"migrate_version":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop","Store"]},{"abilities":["Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"type_of_version":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0}],"return":[{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"publish_message","friends":[],"structs":{"MessageTicket":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"sender","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"sequence","type":"U64"},{"name":"nonce","type":"U32"},{"name":"payload","type":{"Vector":"U8"}}]},"WormholeMessage":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"sender","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"sequence","type":"U64"},{"name":"nonce","type":"U32"},{"name":"payload","type":{"Vector":"U8"}},{"name":"consistency_level","type":"U8"},{"name":"timestamp","type":"U64"}]}},"exposedFunctions":{"prepare_message":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"emitter","name":"EmitterCap","typeArguments":[]}}},"U32",{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"publish_message","name":"MessageTicket","typeArguments":[]}}]},"publish_message":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"publish_message","name":"MessageTicket","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":["U64"]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"set","friends":[],"structs":{"Empty":{"abilities":{"abilities":["Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"Set":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop","Store"]},"isPhantom":true}],"fields":[{"name":"items","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"TypeParameter":0},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"set","name":"Empty","typeArguments":[]}}]}}}]}},"exposedFunctions":{"add":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"set","name":"Set","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":0}],"return":[]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"set","name":"Set","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":0}],"return":["Bool"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"set","name":"Set","typeArguments":[{"TypeParameter":0}]}}]},"remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"set","name":"Set","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":0}],"return":[]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"set_fee","friends":[],"structs":{"GovernanceWitness":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"SetFee":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"amount","type":"U64"}]}},"exposedFunctions":{"authorize_governance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeTicket","typeArguments":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"set_fee","name":"GovernanceWitness","typeArguments":[]}}]}}]},"set_fee":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeReceipt","typeArguments":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"set_fee","name":"GovernanceWitness","typeArguments":[]}}]}}],"return":["U64"]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"setup","friends":[],"structs":{"DeployerCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]}},"exposedFunctions":{"complete":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"setup","name":"DeployerCap","typeArguments":[]}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}},"U16",{"Vector":"U8"},"U32",{"Vector":{"Vector":"U8"}},"U32","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"state","friends":[{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"emitter"},{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"governance_message"},{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"migrate"},{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"publish_message"},{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"set_fee"},{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"setup"},{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"transfer_fee"},{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"update_guardian_set"},{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"upgrade_contract"},{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"vaa"}],"structs":{"LatestOnly":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"State":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"governance_chain","type":"U16"},{"name":"governance_contract","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}},{"name":"guardian_set_index","type":"U32"},{"name":"guardian_sets","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":["U32",{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_set","name":"GuardianSet","typeArguments":[]}}]}}},{"name":"guardian_set_seconds_to_live","type":"U32"},{"name":"consumed_vaas","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"consumed_vaas","name":"ConsumedVAAs","typeArguments":[]}}},{"name":"fee_collector","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"fee_collector","name":"FeeCollector","typeArguments":[]}}},{"name":"upgrade_cap","type":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}}]}},"exposedFunctions":{"add_new_guardian_set":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_set","name":"GuardianSet","typeArguments":[]}}],"return":[]},"assert_authorized_digest":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"LatestOnly","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[]},"assert_latest_only":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"LatestOnly","typeArguments":[]}}]},"authorize_upgrade":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeTicket","typeArguments":[]}}]},"borrow_mut_consumed_vaas":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"consumed_vaas","name":"ConsumedVAAs","typeArguments":[]}}}]},"borrow_mut_consumed_vaas_unchecked":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"consumed_vaas","name":"ConsumedVAAs","typeArguments":[]}}}]},"chain_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U16"]},"commit_upgrade":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeReceipt","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"current_package":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"LatestOnly","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"deposit_fee":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}],"return":[]},"expire_guardian_set":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[]},"governance_chain":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":["U16"]},"governance_contract":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}]},"governance_module":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"guardian_set_at":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},"U32"],"return":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian_set","name":"GuardianSet","typeArguments":[]}}}]},"guardian_set_index":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":["U32"]},"guardian_set_seconds_to_live":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":["U32"]},"message_fee":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":["U64"]},"migrate__v__0_2_0":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":[]},"migrate_version":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":[]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}},"U16",{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}},"U32",{"Vector":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian","name":"Guardian","typeArguments":[]}}},"U32","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}]},"set_message_fee":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},"U64"],"return":[]},"withdraw_fee":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},"U64"],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"transfer_fee","friends":[],"structs":{"GovernanceWitness":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"TransferFee":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"amount","type":"U64"},{"name":"recipient","type":"Address"}]}},"exposedFunctions":{"authorize_governance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeTicket","typeArguments":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"transfer_fee","name":"GovernanceWitness","typeArguments":[]}}]}}]},"transfer_fee":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeReceipt","typeArguments":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"transfer_fee","name":"GovernanceWitness","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64"]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"update_guardian_set","friends":[],"structs":{"GovernanceWitness":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"GuardianSetAdded":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"new_index","type":"U32"}]},"UpdateGuardianSet":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"new_index","type":"U32"},{"name":"guardians","type":{"Vector":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"guardian","name":"Guardian","typeArguments":[]}}}}]}},"exposedFunctions":{"authorize_governance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeTicket","typeArguments":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"update_guardian_set","name":"GovernanceWitness","typeArguments":[]}}]}}]},"update_guardian_set":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeReceipt","typeArguments":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"update_guardian_set","name":"GovernanceWitness","typeArguments":[]}}]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":["U32"]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"upgrade_contract","friends":[{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"migrate"}],"structs":{"ContractUpgraded":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"old_contract","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"new_contract","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"GovernanceWitness":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"UpgradeContract":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"digest","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}}]}},"exposedFunctions":{"authorize_governance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeTicket","typeArguments":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"upgrade_contract","name":"GovernanceWitness","typeArguments":[]}}]}}]},"authorize_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeReceipt","typeArguments":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"upgrade_contract","name":"GovernanceWitness","typeArguments":[]}}]}}],"return":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeTicket","typeArguments":[]}}]},"commit_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeReceipt","typeArguments":[]}}],"return":[]},"take_digest":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"vaa","friends":[],"structs":{"VAA":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"guardian_set_index","type":"U32"},{"name":"timestamp","type":"U32"},{"name":"nonce","type":"U32"},{"name":"emitter_chain","type":"U16"},{"name":"emitter_address","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}},{"name":"sequence","type":"U64"},{"name":"consistency_level","type":"U8"},{"name":"payload","type":{"Vector":"U8"}},{"name":"digest","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}}]}},"exposedFunctions":{"batch_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}}],"return":["U32"]},"compute_message_hash":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"consistency_level":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}}],"return":["U8"]},"consume":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"consumed_vaas","name":"ConsumedVAAs","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}}],"return":[]},"digest":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"emitter_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}]},"emitter_chain":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}}],"return":["U16"]},"emitter_info":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}}],"return":["U16",{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}},"U64"]},"finality":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}}],"return":["U8"]},"guardian_set_index":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}}],"return":["U32"]},"nonce":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}}],"return":["U32"]},"parse_and_verify":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}]},"payload":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}}],"return":[{"Vector":"U8"}]},"sequence":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}}],"return":["U64"]},"take_emitter_info_and_payload":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}],"return":["U16",{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}},{"Vector":"U8"}]},"take_payload":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}],"return":[{"Vector":"U8"}]},"timestamp":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}}],"return":["U32"]}}},{"fileFormatVersion":6,"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"version_control","friends":[{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","name":"state"}],"structs":{"V__0_2_0":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"V__DUMMY":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"current_version":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"version_control","name":"V__0_2_0","typeArguments":[]}}]},"previous_version":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"version_control","name":"V__DUMMY","typeArguments":[]}}]}}}]'
);
function loadAllTypes7(coder) {
  _0x2.loadAllTypes(coder);
  _0x13.loadAllTypes(coder);
  for (const m of Object.values(MODULES3)) {
    coder.load(
      m,
      "0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a"
    );
  }
}
loadAllTypes7((0, import_sui.defaultMoveCoder)(import_sui4.SuiNetwork.MAIN_NET));

// src/types/sui/0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e.ts
var _0x22 = __toESM(require("@sentio/sdk/sui/builtin/0x2"), 1);
var accumulator;
((accumulator2) => {
  let builder;
  ((builder2) => {
    function parseAndVerifyAccumulatorMessage(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::accumulator::parse_and_verify_accumulator_message",
        arguments: _args
      });
    }
    builder2.parseAndVerifyAccumulatorMessage = parseAndVerifyAccumulatorMessage;
  })(builder = accumulator2.builder || (accumulator2.builder = {}));
  let view;
  ((view2) => {
    async function parseAndVerifyAccumulatorMessage(client, args) {
      const tx = new Transaction();
      builder.parseAndVerifyAccumulatorMessage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.parseAndVerifyAccumulatorMessage = parseAndVerifyAccumulatorMessage;
  })(view = accumulator2.view || (accumulator2.view = {}));
})(accumulator || (accumulator = {}));
var batch_price_attestation2;
((batch_price_attestation4) => {
  let BatchPriceAttestation;
  ((BatchPriceAttestation2) => {
    BatchPriceAttestation2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::batch_price_attestation::BatchPriceAttestation";
    const TYPE = new TypeDescriptor(
      BatchPriceAttestation2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    BatchPriceAttestation2.type = type;
  })(BatchPriceAttestation = batch_price_attestation4.BatchPriceAttestation || (batch_price_attestation4.BatchPriceAttestation = {}));
  let Header;
  ((Header2) => {
    Header2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::batch_price_attestation::Header";
    const TYPE = new TypeDescriptor(Header2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Header2.type = type;
  })(Header = batch_price_attestation4.Header || (batch_price_attestation4.Header = {}));
  let builder;
  ((builder2) => {
    function deserialize3(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::batch_price_attestation::deserialize",
        arguments: _args
      });
    }
    builder2.deserialize = deserialize3;
    function destroy(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::batch_price_attestation::destroy",
        arguments: _args
      });
    }
    builder2.destroy = destroy;
    function getAttestationCount(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::batch_price_attestation::get_attestation_count",
        arguments: _args
      });
    }
    builder2.getAttestationCount = getAttestationCount;
    function getPriceInfo(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::batch_price_attestation::get_price_info",
        arguments: _args
      });
    }
    builder2.getPriceInfo = getPriceInfo;
  })(builder = batch_price_attestation4.builder || (batch_price_attestation4.builder = {}));
  let view;
  ((view2) => {
    async function deserialize3(client, args) {
      const tx = new Transaction();
      builder.deserialize(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.deserialize = deserialize3;
    async function destroy(client, args) {
      const tx = new Transaction();
      builder.destroy(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.destroy = destroy;
    async function getAttestationCount(client, args) {
      const tx = new Transaction();
      builder.getAttestationCount(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getAttestationCount = getAttestationCount;
    async function getPriceInfo(client, args) {
      const tx = new Transaction();
      builder.getPriceInfo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getPriceInfo = getPriceInfo;
  })(view = batch_price_attestation4.view || (batch_price_attestation4.view = {}));
})(batch_price_attestation2 || (batch_price_attestation2 = {}));
var contract_upgrade3 = class _contract_upgrade extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("contract_upgrade", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _contract_upgrade({
      ..._contract_upgrade.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventContractUpgraded(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "contract_upgrade::ContractUpgraded" },
      fetchConfig
    );
    return this;
  }
};
((contract_upgrade5) => {
  let ContractUpgraded;
  ((ContractUpgraded2) => {
    ContractUpgraded2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::contract_upgrade::ContractUpgraded";
    const TYPE = new TypeDescriptor(
      ContractUpgraded2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    ContractUpgraded2.type = type;
  })(ContractUpgraded = contract_upgrade5.ContractUpgraded || (contract_upgrade5.ContractUpgraded = {}));
  let UpgradeContract;
  ((UpgradeContract2) => {
    UpgradeContract2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::contract_upgrade::UpgradeContract";
    const TYPE = new TypeDescriptor(
      UpgradeContract2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    UpgradeContract2.type = type;
  })(UpgradeContract = contract_upgrade5.UpgradeContract || (contract_upgrade5.UpgradeContract = {}));
  let builder;
  ((builder2) => {
    function authorizeUpgrade(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::contract_upgrade::authorize_upgrade",
        arguments: _args
      });
    }
    builder2.authorizeUpgrade = authorizeUpgrade;
    function commitUpgrade(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::contract_upgrade::commit_upgrade",
        arguments: _args
      });
    }
    builder2.commitUpgrade = commitUpgrade;
    function takeDigest(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::contract_upgrade::take_digest",
        arguments: _args
      });
    }
    builder2.takeDigest = takeDigest;
    function takeUpgradeDigest(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::contract_upgrade::take_upgrade_digest",
        arguments: _args
      });
    }
    builder2.takeUpgradeDigest = takeUpgradeDigest;
  })(builder = contract_upgrade5.builder || (contract_upgrade5.builder = {}));
  let view;
  ((view2) => {
    async function authorizeUpgrade(client, args) {
      const tx = new Transaction();
      builder.authorizeUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeUpgrade = authorizeUpgrade;
    async function commitUpgrade(client, args) {
      const tx = new Transaction();
      builder.commitUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.commitUpgrade = commitUpgrade;
    async function takeDigest(client, args) {
      const tx = new Transaction();
      builder.takeDigest(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.takeDigest = takeDigest;
    async function takeUpgradeDigest(client, args) {
      const tx = new Transaction();
      builder.takeUpgradeDigest(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.takeUpgradeDigest = takeUpgradeDigest;
  })(view = contract_upgrade5.view || (contract_upgrade5.view = {}));
})(contract_upgrade3 || (contract_upgrade3 = {}));
var data_source2 = class _data_source extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("data_source", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _data_source({ ..._data_source.DEFAULT_OPTIONS, ...options });
  }
  onEventDataSource(func, fetchConfig) {
    this.onMoveEvent(func, { type: "data_source::DataSource" }, fetchConfig);
    return this;
  }
};
((data_source4) => {
  let DataSource;
  ((DataSource2) => {
    DataSource2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::data_source::DataSource";
    const TYPE = new TypeDescriptor(DataSource2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    DataSource2.type = type;
  })(DataSource = data_source4.DataSource || (data_source4.DataSource = {}));
  let builder;
  ((builder2) => {
    function add2(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::data_source::add",
        arguments: _args
      });
    }
    builder2.add = add2;
    function contains(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::data_source::contains",
        arguments: _args
      });
    }
    builder2.contains = contains;
    function emitterAddress(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::data_source::emitter_address",
        arguments: _args
      });
    }
    builder2.emitterAddress = emitterAddress;
    function emitterChain(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::data_source::emitter_chain",
        arguments: _args
      });
    }
    builder2.emitterChain = emitterChain;
    function empty(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::data_source::empty",
        arguments: _args
      });
    }
    builder2.empty = empty;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::data_source::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
    function newDataSourceRegistry(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::data_source::new_data_source_registry",
        arguments: _args
      });
    }
    builder2.newDataSourceRegistry = newDataSourceRegistry;
  })(builder = data_source4.builder || (data_source4.builder = {}));
  let view;
  ((view2) => {
    async function add2(client, args) {
      const tx = new Transaction();
      builder.add(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.add = add2;
    async function contains(client, args) {
      const tx = new Transaction();
      builder.contains(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.contains = contains;
    async function emitterAddress(client, args) {
      const tx = new Transaction();
      builder.emitterAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.emitterAddress = emitterAddress;
    async function emitterChain(client, args) {
      const tx = new Transaction();
      builder.emitterChain(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.emitterChain = emitterChain;
    async function empty(client, args) {
      const tx = new Transaction();
      builder.empty(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.empty = empty;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
    async function newDataSourceRegistry(client, args) {
      const tx = new Transaction();
      builder.newDataSourceRegistry(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.newDataSourceRegistry = newDataSourceRegistry;
  })(view = data_source4.view || (data_source4.view = {}));
})(data_source2 || (data_source2 = {}));
var deserialize;
((deserialize3) => {
  let builder;
  ((builder2) => {
    function deserializeI32(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::deserialize::deserialize_i32",
        arguments: _args
      });
    }
    builder2.deserializeI32 = deserializeI32;
    function deserializeI64(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::deserialize::deserialize_i64",
        arguments: _args
      });
    }
    builder2.deserializeI64 = deserializeI64;
    function deserializeU16(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::deserialize::deserialize_u16",
        arguments: _args
      });
    }
    builder2.deserializeU16 = deserializeU16;
    function deserializeU32(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::deserialize::deserialize_u32",
        arguments: _args
      });
    }
    builder2.deserializeU32 = deserializeU32;
    function deserializeU64(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::deserialize::deserialize_u64",
        arguments: _args
      });
    }
    builder2.deserializeU64 = deserializeU64;
    function deserializeU8(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::deserialize::deserialize_u8",
        arguments: _args
      });
    }
    builder2.deserializeU8 = deserializeU8;
    function deserializeVector(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::deserialize::deserialize_vector",
        arguments: _args
      });
    }
    builder2.deserializeVector = deserializeVector;
  })(builder = deserialize3.builder || (deserialize3.builder = {}));
  let view;
  ((view2) => {
    async function deserializeI32(client, args) {
      const tx = new Transaction();
      builder.deserializeI32(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deserializeI32 = deserializeI32;
    async function deserializeI64(client, args) {
      const tx = new Transaction();
      builder.deserializeI64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deserializeI64 = deserializeI64;
    async function deserializeU16(client, args) {
      const tx = new Transaction();
      builder.deserializeU16(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deserializeU16 = deserializeU16;
    async function deserializeU32(client, args) {
      const tx = new Transaction();
      builder.deserializeU32(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deserializeU32 = deserializeU32;
    async function deserializeU64(client, args) {
      const tx = new Transaction();
      builder.deserializeU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deserializeU64 = deserializeU64;
    async function deserializeU8(client, args) {
      const tx = new Transaction();
      builder.deserializeU8(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deserializeU8 = deserializeU8;
    async function deserializeVector(client, args) {
      const tx = new Transaction();
      builder.deserializeVector(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deserializeVector = deserializeVector;
  })(view = deserialize3.view || (deserialize3.view = {}));
})(deserialize || (deserialize = {}));
var event2 = class _event extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("event", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _event({ ..._event.DEFAULT_OPTIONS, ...options });
  }
  onEventPriceFeedUpdateEvent(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "event::PriceFeedUpdateEvent" },
      fetchConfig
    );
    return this;
  }
  onEventPythInitializationEvent(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "event::PythInitializationEvent" },
      fetchConfig
    );
    return this;
  }
};
((event4) => {
  let PriceFeedUpdateEvent2;
  ((PriceFeedUpdateEvent3) => {
    PriceFeedUpdateEvent3.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::event::PriceFeedUpdateEvent";
    const TYPE = new TypeDescriptor(
      PriceFeedUpdateEvent3.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    PriceFeedUpdateEvent3.type = type;
  })(PriceFeedUpdateEvent2 = event4.PriceFeedUpdateEvent || (event4.PriceFeedUpdateEvent = {}));
  let PythInitializationEvent;
  ((PythInitializationEvent2) => {
    PythInitializationEvent2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::event::PythInitializationEvent";
    const TYPE = new TypeDescriptor(
      PythInitializationEvent2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    PythInitializationEvent2.type = type;
  })(PythInitializationEvent = event4.PythInitializationEvent || (event4.PythInitializationEvent = {}));
  let builder;
  ((builder2) => {
    function emitPriceFeedUpdate(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::event::emit_price_feed_update",
        arguments: _args
      });
    }
    builder2.emitPriceFeedUpdate = emitPriceFeedUpdate;
    function emitPythInitializationEvent(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::event::emit_pyth_initialization_event",
        arguments: _args
      });
    }
    builder2.emitPythInitializationEvent = emitPythInitializationEvent;
  })(builder = event4.builder || (event4.builder = {}));
  let view;
  ((view2) => {
    async function emitPriceFeedUpdate(client, args) {
      const tx = new Transaction();
      builder.emitPriceFeedUpdate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.emitPriceFeedUpdate = emitPriceFeedUpdate;
    async function emitPythInitializationEvent(client, args) {
      const tx = new Transaction();
      builder.emitPythInitializationEvent(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.emitPythInitializationEvent = emitPythInitializationEvent;
  })(view = event4.view || (event4.view = {}));
})(event2 || (event2 = {}));
var governance2;
((governance4) => {
  let WormholeVAAVerificationReceipt;
  ((WormholeVAAVerificationReceipt2) => {
    WormholeVAAVerificationReceipt2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance::WormholeVAAVerificationReceipt";
    const TYPE = new TypeDescriptor(
      WormholeVAAVerificationReceipt2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    WormholeVAAVerificationReceipt2.type = type;
  })(WormholeVAAVerificationReceipt = governance4.WormholeVAAVerificationReceipt || (governance4.WormholeVAAVerificationReceipt = {}));
  let builder;
  ((builder2) => {
    function destroy(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance::destroy",
        arguments: _args
      });
    }
    builder2.destroy = destroy;
    function executeGovernanceInstruction(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance::execute_governance_instruction",
        arguments: _args
      });
    }
    builder2.executeGovernanceInstruction = executeGovernanceInstruction;
    function takeDigest(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance::take_digest",
        arguments: _args
      });
    }
    builder2.takeDigest = takeDigest;
    function takePayload(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance::take_payload",
        arguments: _args
      });
    }
    builder2.takePayload = takePayload;
    function takeSequence(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance::take_sequence",
        arguments: _args
      });
    }
    builder2.takeSequence = takeSequence;
    function verifyVaa(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance::verify_vaa",
        arguments: _args
      });
    }
    builder2.verifyVaa = verifyVaa;
  })(builder = governance4.builder || (governance4.builder = {}));
  let view;
  ((view2) => {
    async function destroy(client, args) {
      const tx = new Transaction();
      builder.destroy(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.destroy = destroy;
    async function executeGovernanceInstruction(client, args) {
      const tx = new Transaction();
      builder.executeGovernanceInstruction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.executeGovernanceInstruction = executeGovernanceInstruction;
    async function takeDigest(client, args) {
      const tx = new Transaction();
      builder.takeDigest(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.takeDigest = takeDigest;
    async function takePayload(client, args) {
      const tx = new Transaction();
      builder.takePayload(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.takePayload = takePayload;
    async function takeSequence(client, args) {
      const tx = new Transaction();
      builder.takeSequence(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.takeSequence = takeSequence;
    async function verifyVaa(client, args) {
      const tx = new Transaction();
      builder.verifyVaa(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.verifyVaa = verifyVaa;
  })(view = governance4.view || (governance4.view = {}));
})(governance2 || (governance2 = {}));
var governance_action2 = class _governance_action extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("governance_action", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _governance_action({
      ..._governance_action.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventGovernanceAction(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "governance_action::GovernanceAction" },
      fetchConfig
    );
    return this;
  }
};
((governance_action4) => {
  let GovernanceAction;
  ((GovernanceAction2) => {
    GovernanceAction2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_action::GovernanceAction";
    const TYPE = new TypeDescriptor(
      GovernanceAction2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GovernanceAction2.type = type;
  })(GovernanceAction = governance_action4.GovernanceAction || (governance_action4.GovernanceAction = {}));
  let builder;
  ((builder2) => {
    function fromU8(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU8(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_action::from_u8",
        arguments: _args
      });
    }
    builder2.fromU8 = fromU8;
    function getValue2(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_action::get_value",
        arguments: _args
      });
    }
    builder2.getValue = getValue2;
    function newContractUpgrade(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_action::new_contract_upgrade",
        arguments: _args
      });
    }
    builder2.newContractUpgrade = newContractUpgrade;
    function newSetDataSources(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_action::new_set_data_sources",
        arguments: _args
      });
    }
    builder2.newSetDataSources = newSetDataSources;
    function newSetFeeRecipient(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_action::new_set_fee_recipient",
        arguments: _args
      });
    }
    builder2.newSetFeeRecipient = newSetFeeRecipient;
    function newSetGovernanceDataSource(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_action::new_set_governance_data_source",
        arguments: _args
      });
    }
    builder2.newSetGovernanceDataSource = newSetGovernanceDataSource;
    function newSetStalePriceThreshold(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_action::new_set_stale_price_threshold",
        arguments: _args
      });
    }
    builder2.newSetStalePriceThreshold = newSetStalePriceThreshold;
    function newSetUpdateFee(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_action::new_set_update_fee",
        arguments: _args
      });
    }
    builder2.newSetUpdateFee = newSetUpdateFee;
  })(builder = governance_action4.builder || (governance_action4.builder = {}));
  let view;
  ((view2) => {
    async function fromU8(client, args) {
      const tx = new Transaction();
      builder.fromU8(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromU8 = fromU8;
    async function getValue2(client, args) {
      const tx = new Transaction();
      builder.getValue(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getValue = getValue2;
    async function newContractUpgrade(client, args) {
      const tx = new Transaction();
      builder.newContractUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newContractUpgrade = newContractUpgrade;
    async function newSetDataSources(client, args) {
      const tx = new Transaction();
      builder.newSetDataSources(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newSetDataSources = newSetDataSources;
    async function newSetFeeRecipient(client, args) {
      const tx = new Transaction();
      builder.newSetFeeRecipient(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newSetFeeRecipient = newSetFeeRecipient;
    async function newSetGovernanceDataSource(client, args) {
      const tx = new Transaction();
      builder.newSetGovernanceDataSource(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newSetGovernanceDataSource = newSetGovernanceDataSource;
    async function newSetStalePriceThreshold(client, args) {
      const tx = new Transaction();
      builder.newSetStalePriceThreshold(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newSetStalePriceThreshold = newSetStalePriceThreshold;
    async function newSetUpdateFee(client, args) {
      const tx = new Transaction();
      builder.newSetUpdateFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newSetUpdateFee = newSetUpdateFee;
  })(view = governance_action4.view || (governance_action4.view = {}));
})(governance_action2 || (governance_action2 = {}));
var governance_instruction2;
((governance_instruction4) => {
  let GovernanceInstruction;
  ((GovernanceInstruction2) => {
    GovernanceInstruction2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_instruction::GovernanceInstruction";
    const TYPE = new TypeDescriptor(
      GovernanceInstruction2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GovernanceInstruction2.type = type;
  })(GovernanceInstruction = governance_instruction4.GovernanceInstruction || (governance_instruction4.GovernanceInstruction = {}));
  let builder;
  ((builder2) => {
    function destroy(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_instruction::destroy",
        arguments: _args
      });
    }
    builder2.destroy = destroy;
    function fromByteVec(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_instruction::from_byte_vec",
        arguments: _args
      });
    }
    builder2.fromByteVec = fromByteVec;
    function getAction(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_instruction::get_action",
        arguments: _args
      });
    }
    builder2.getAction = getAction;
    function getModule(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_instruction::get_module",
        arguments: _args
      });
    }
    builder2.getModule = getModule;
    function getTargetChainId(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::governance_instruction::get_target_chain_id",
        arguments: _args
      });
    }
    builder2.getTargetChainId = getTargetChainId;
  })(builder = governance_instruction4.builder || (governance_instruction4.builder = {}));
  let view;
  ((view2) => {
    async function destroy(client, args) {
      const tx = new Transaction();
      builder.destroy(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.destroy = destroy;
    async function fromByteVec(client, args) {
      const tx = new Transaction();
      builder.fromByteVec(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromByteVec = fromByteVec;
    async function getAction(client, args) {
      const tx = new Transaction();
      builder.getAction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.getAction = getAction;
    async function getModule(client, args) {
      const tx = new Transaction();
      builder.getModule(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getModule = getModule;
    async function getTargetChainId(client, args) {
      const tx = new Transaction();
      builder.getTargetChainId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getTargetChainId = getTargetChainId;
  })(view = governance_instruction4.view || (governance_instruction4.view = {}));
})(governance_instruction2 || (governance_instruction2 = {}));
var hot_potato_vector;
((hot_potato_vector3) => {
  let HotPotatoVector;
  ((HotPotatoVector2) => {
    HotPotatoVector2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::HotPotatoVector";
    const TYPE = new TypeDescriptor(
      HotPotatoVector2.TYPE_QNAME
    );
    function type(arg0 = ANY_TYPE) {
      return TYPE.apply(arg0);
    }
    HotPotatoVector2.type = type;
  })(HotPotatoVector = hot_potato_vector3.HotPotatoVector || (hot_potato_vector3.HotPotatoVector = {}));
  let builder;
  ((builder2) => {
    function borrow(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::borrow",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.borrow = borrow;
    function destroy(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::destroy",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.destroy = destroy;
    function isEmpty(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::is_empty",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.isEmpty = isEmpty;
    function length(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::length",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.length = length;
    function new_(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.new_ = new_;
    function popBack(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::hot_potato_vector::pop_back",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.popBack = popBack;
  })(builder = hot_potato_vector3.builder || (hot_potato_vector3.builder = {}));
  let view;
  ((view2) => {
    async function borrow(client, args, typeArguments) {
      const tx = new Transaction();
      builder.borrow(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.borrow = borrow;
    async function destroy(client, args, typeArguments) {
      const tx = new Transaction();
      builder.destroy(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.destroy = destroy;
    async function isEmpty(client, args, typeArguments) {
      const tx = new Transaction();
      builder.isEmpty(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.isEmpty = isEmpty;
    async function length(client, args, typeArguments) {
      const tx = new Transaction();
      builder.length(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.length = length;
    async function new_(client, args, typeArguments) {
      const tx = new Transaction();
      builder.new_(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
    async function popBack(client, args, typeArguments) {
      const tx = new Transaction();
      builder.popBack(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.popBack = popBack;
  })(view = hot_potato_vector3.view || (hot_potato_vector3.view = {}));
})(hot_potato_vector || (hot_potato_vector = {}));
var i642 = class _i64 extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("i64", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _i64({ ..._i64.DEFAULT_OPTIONS, ...options });
  }
  onEventI64(func, fetchConfig) {
    this.onMoveEvent(func, { type: "i64::I64" }, fetchConfig);
    return this;
  }
};
((i644) => {
  let I64;
  ((I642) => {
    I642.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::i64::I64";
    const TYPE = new TypeDescriptor(I642.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    I642.type = type;
  })(I64 = i644.I64 || (i644.I64 = {}));
  let builder;
  ((builder2) => {
    function fromU64(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::i64::from_u64",
        arguments: _args
      });
    }
    builder2.fromU64 = fromU64;
    function getIsNegative(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::i64::get_is_negative",
        arguments: _args
      });
    }
    builder2.getIsNegative = getIsNegative;
    function getMagnitudeIfNegative(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::i64::get_magnitude_if_negative",
        arguments: _args
      });
    }
    builder2.getMagnitudeIfNegative = getMagnitudeIfNegative;
    function getMagnitudeIfPositive(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::i64::get_magnitude_if_positive",
        arguments: _args
      });
    }
    builder2.getMagnitudeIfPositive = getMagnitudeIfPositive;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureBool(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::i64::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
  })(builder = i644.builder || (i644.builder = {}));
  let view;
  ((view2) => {
    async function fromU64(client, args) {
      const tx = new Transaction();
      builder.fromU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.fromU64 = fromU64;
    async function getIsNegative(client, args) {
      const tx = new Transaction();
      builder.getIsNegative(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getIsNegative = getIsNegative;
    async function getMagnitudeIfNegative(client, args) {
      const tx = new Transaction();
      builder.getMagnitudeIfNegative(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getMagnitudeIfNegative = getMagnitudeIfNegative;
    async function getMagnitudeIfPositive(client, args) {
      const tx = new Transaction();
      builder.getMagnitudeIfPositive(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getMagnitudeIfPositive = getMagnitudeIfPositive;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.new_ = new_;
  })(view = i644.view || (i644.view = {}));
})(i642 || (i642 = {}));
var merkle_tree;
((merkle_tree2) => {
  let builder;
  ((builder2) => {
    function constructProofs(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::merkle_tree::construct_proofs",
        arguments: _args
      });
    }
    builder2.constructProofs = constructProofs;
    function isProofValid(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::merkle_tree::is_proof_valid",
        arguments: _args
      });
    }
    builder2.isProofValid = isProofValid;
  })(builder = merkle_tree2.builder || (merkle_tree2.builder = {}));
  let view;
  ((view2) => {
    async function constructProofs(client, args) {
      const tx = new Transaction();
      builder.constructProofs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.constructProofs = constructProofs;
    async function isProofValid(client, args) {
      const tx = new Transaction();
      builder.isProofValid(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.isProofValid = isProofValid;
  })(view = merkle_tree2.view || (merkle_tree2.view = {}));
})(merkle_tree || (merkle_tree = {}));
var migrate2 = class _migrate extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("migrate", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _migrate({ ..._migrate.DEFAULT_OPTIONS, ...options });
  }
  onEventMigrateComplete(func, fetchConfig) {
    this.onMoveEvent(func, { type: "migrate::MigrateComplete" }, fetchConfig);
    return this;
  }
};
((migrate4) => {
  let MigrateComplete;
  ((MigrateComplete2) => {
    MigrateComplete2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::migrate::MigrateComplete";
    const TYPE = new TypeDescriptor(
      MigrateComplete2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    MigrateComplete2.type = type;
  })(MigrateComplete = migrate4.MigrateComplete || (migrate4.MigrateComplete = {}));
  let builder;
  ((builder2) => {
    function migrate5(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::migrate::migrate",
        arguments: _args
      });
    }
    builder2.migrate = migrate5;
  })(builder = migrate4.builder || (migrate4.builder = {}));
  let view;
  ((view2) => {
    async function migrate5(client, args) {
      const tx = new Transaction();
      builder.migrate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.migrate = migrate5;
  })(view = migrate4.view || (migrate4.view = {}));
})(migrate2 || (migrate2 = {}));
var price3 = class _price extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("price", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price({ ..._price.DEFAULT_OPTIONS, ...options });
  }
  onEventPrice(func, fetchConfig) {
    this.onMoveEvent(func, { type: "price::Price" }, fetchConfig);
    return this;
  }
};
((price6) => {
  let Price;
  ((Price2) => {
    Price2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price::Price";
    const TYPE = new TypeDescriptor(Price2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Price2.type = type;
  })(Price = price6.Price || (price6.Price = {}));
  let builder;
  ((builder2) => {
    function getConf(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price::get_conf",
        arguments: _args
      });
    }
    builder2.getConf = getConf;
    function getExpo(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price::get_expo",
        arguments: _args
      });
    }
    builder2.getExpo = getExpo;
    function getPrice3(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price::get_price",
        arguments: _args
      });
    }
    builder2.getPrice = getPrice3;
    function getTimestamp(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price::get_timestamp",
        arguments: _args
      });
    }
    builder2.getTimestamp = getTimestamp;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
  })(builder = price6.builder || (price6.builder = {}));
  let view;
  ((view2) => {
    async function getConf(client, args) {
      const tx = new Transaction();
      builder.getConf(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getConf = getConf;
    async function getExpo(client, args) {
      const tx = new Transaction();
      builder.getExpo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getExpo = getExpo;
    async function getPrice3(client, args) {
      const tx = new Transaction();
      builder.getPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getPrice = getPrice3;
    async function getTimestamp(client, args) {
      const tx = new Transaction();
      builder.getTimestamp(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getTimestamp = getTimestamp;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.new_ = new_;
  })(view = price6.view || (price6.view = {}));
})(price3 || (price3 = {}));
var price_feed2 = class _price_feed extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("price_feed", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price_feed({ ..._price_feed.DEFAULT_OPTIONS, ...options });
  }
  onEventPriceFeed(func, fetchConfig) {
    this.onMoveEvent(func, { type: "price_feed::PriceFeed" }, fetchConfig);
    return this;
  }
};
((price_feed4) => {
  let PriceFeed;
  ((PriceFeed2) => {
    PriceFeed2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_feed::PriceFeed";
    const TYPE = new TypeDescriptor(PriceFeed2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    PriceFeed2.type = type;
  })(PriceFeed = price_feed4.PriceFeed || (price_feed4.PriceFeed = {}));
  let builder;
  ((builder2) => {
    function from(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_feed::from",
        arguments: _args
      });
    }
    builder2.from = from;
    function getEmaPrice(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_feed::get_ema_price",
        arguments: _args
      });
    }
    builder2.getEmaPrice = getEmaPrice;
    function getPrice3(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_feed::get_price",
        arguments: _args
      });
    }
    builder2.getPrice = getPrice3;
    function getPriceIdentifier(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_feed::get_price_identifier",
        arguments: _args
      });
    }
    builder2.getPriceIdentifier = getPriceIdentifier;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_feed::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
  })(builder = price_feed4.builder || (price_feed4.builder = {}));
  let view;
  ((view2) => {
    async function from(client, args) {
      const tx = new Transaction();
      builder.from(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.from = from;
    async function getEmaPrice(client, args) {
      const tx = new Transaction();
      builder.getEmaPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getEmaPrice = getEmaPrice;
    async function getPrice3(client, args) {
      const tx = new Transaction();
      builder.getPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getPrice = getPrice3;
    async function getPriceIdentifier(client, args) {
      const tx = new Transaction();
      builder.getPriceIdentifier(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.getPriceIdentifier = getPriceIdentifier;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
  })(view = price_feed4.view || (price_feed4.view = {}));
})(price_feed2 || (price_feed2 = {}));
var price_identifier2 = class _price_identifier extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("price_identifier", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price_identifier({
      ..._price_identifier.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventPriceIdentifier(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "price_identifier::PriceIdentifier" },
      fetchConfig
    );
    return this;
  }
};
((price_identifier4) => {
  let PriceIdentifier;
  ((PriceIdentifier2) => {
    PriceIdentifier2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_identifier::PriceIdentifier";
    const TYPE = new TypeDescriptor(
      PriceIdentifier2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    PriceIdentifier2.type = type;
  })(PriceIdentifier = price_identifier4.PriceIdentifier || (price_identifier4.PriceIdentifier = {}));
  let builder;
  ((builder2) => {
    function fromByteVec(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_identifier::from_byte_vec",
        arguments: _args
      });
    }
    builder2.fromByteVec = fromByteVec;
    function getBytes2(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_identifier::get_bytes",
        arguments: _args
      });
    }
    builder2.getBytes = getBytes2;
  })(builder = price_identifier4.builder || (price_identifier4.builder = {}));
  let view;
  ((view2) => {
    async function fromByteVec(client, args) {
      const tx = new Transaction();
      builder.fromByteVec(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromByteVec = fromByteVec;
    async function getBytes2(client, args) {
      const tx = new Transaction();
      builder.getBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getBytes = getBytes2;
  })(view = price_identifier4.view || (price_identifier4.view = {}));
})(price_identifier2 || (price_identifier2 = {}));
var price_info2 = class _price_info extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("price_info", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price_info({ ..._price_info.DEFAULT_OPTIONS, ...options });
  }
  onEventPriceInfo(func, fetchConfig) {
    this.onMoveEvent(func, { type: "price_info::PriceInfo" }, fetchConfig);
    return this;
  }
};
((price_info4) => {
  let PriceInfo;
  ((PriceInfo2) => {
    PriceInfo2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfo";
    const TYPE = new TypeDescriptor(PriceInfo2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    PriceInfo2.type = type;
  })(PriceInfo = price_info4.PriceInfo || (price_info4.PriceInfo = {}));
  let PriceInfoObject;
  ((PriceInfoObject2) => {
    PriceInfoObject2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::PriceInfoObject";
    const TYPE = new TypeDescriptor(
      PriceInfoObject2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    PriceInfoObject2.type = type;
  })(PriceInfoObject = price_info4.PriceInfoObject || (price_info4.PriceInfoObject = {}));
  let builder;
  ((builder2) => {
    function add2(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::add",
        arguments: _args
      });
    }
    builder2.add = add2;
    function contains(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::contains",
        arguments: _args
      });
    }
    builder2.contains = contains;
    function depositFeeCoins(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::deposit_fee_coins",
        arguments: _args
      });
    }
    builder2.depositFeeCoins = depositFeeCoins;
    function getArrivalTime(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::get_arrival_time",
        arguments: _args
      });
    }
    builder2.getArrivalTime = getArrivalTime;
    function getAttestationTime(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::get_attestation_time",
        arguments: _args
      });
    }
    builder2.getAttestationTime = getAttestationTime;
    function getBalance(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::get_balance",
        arguments: _args
      });
    }
    builder2.getBalance = getBalance;
    function getId(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::get_id",
        arguments: _args
      });
    }
    builder2.getId = getId;
    function getIdBytes(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::get_id_bytes",
        arguments: _args
      });
    }
    builder2.getIdBytes = getIdBytes;
    function getPriceFeed(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::get_price_feed",
        arguments: _args
      });
    }
    builder2.getPriceFeed = getPriceFeed;
    function getPriceIdentifier(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::get_price_identifier",
        arguments: _args
      });
    }
    builder2.getPriceIdentifier = getPriceIdentifier;
    function getPriceInfoFromPriceInfoObject(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::get_price_info_from_price_info_object",
        arguments: _args
      });
    }
    builder2.getPriceInfoFromPriceInfoObject = getPriceInfoFromPriceInfoObject;
    function newPriceInfo(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::new_price_info",
        arguments: _args
      });
    }
    builder2.newPriceInfo = newPriceInfo;
    function newPriceInfoObject(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::new_price_info_object",
        arguments: _args
      });
    }
    builder2.newPriceInfoObject = newPriceInfoObject;
    function newPriceInfoRegistry(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::new_price_info_registry",
        arguments: _args
      });
    }
    builder2.newPriceInfoRegistry = newPriceInfoRegistry;
    function uidToInner(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::uid_to_inner",
        arguments: _args
      });
    }
    builder2.uidToInner = uidToInner;
    function updatePriceInfoObject(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_info::update_price_info_object",
        arguments: _args
      });
    }
    builder2.updatePriceInfoObject = updatePriceInfoObject;
  })(builder = price_info4.builder || (price_info4.builder = {}));
  let view;
  ((view2) => {
    async function add2(client, args) {
      const tx = new Transaction();
      builder.add(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.add = add2;
    async function contains(client, args) {
      const tx = new Transaction();
      builder.contains(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.contains = contains;
    async function depositFeeCoins(client, args) {
      const tx = new Transaction();
      builder.depositFeeCoins(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.depositFeeCoins = depositFeeCoins;
    async function getArrivalTime(client, args) {
      const tx = new Transaction();
      builder.getArrivalTime(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getArrivalTime = getArrivalTime;
    async function getAttestationTime(client, args) {
      const tx = new Transaction();
      builder.getAttestationTime(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getAttestationTime = getAttestationTime;
    async function getBalance(client, args) {
      const tx = new Transaction();
      builder.getBalance(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getBalance = getBalance;
    async function getId(client, args) {
      const tx = new Transaction();
      builder.getId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.getId = getId;
    async function getIdBytes(client, args) {
      const tx = new Transaction();
      builder.getIdBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getIdBytes = getIdBytes;
    async function getPriceFeed(client, args) {
      const tx = new Transaction();
      builder.getPriceFeed(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getPriceFeed = getPriceFeed;
    async function getPriceIdentifier(client, args) {
      const tx = new Transaction();
      builder.getPriceIdentifier(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.getPriceIdentifier = getPriceIdentifier;
    async function getPriceInfoFromPriceInfoObject(client, args) {
      const tx = new Transaction();
      builder.getPriceInfoFromPriceInfoObject(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.getPriceInfoFromPriceInfoObject = getPriceInfoFromPriceInfoObject;
    async function newPriceInfo(client, args) {
      const tx = new Transaction();
      builder.newPriceInfo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newPriceInfo = newPriceInfo;
    async function newPriceInfoObject(client, args) {
      const tx = new Transaction();
      builder.newPriceInfoObject(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newPriceInfoObject = newPriceInfoObject;
    async function newPriceInfoRegistry(client, args) {
      const tx = new Transaction();
      builder.newPriceInfoRegistry(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.newPriceInfoRegistry = newPriceInfoRegistry;
    async function uidToInner(client, args) {
      const tx = new Transaction();
      builder.uidToInner(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.uidToInner = uidToInner;
    async function updatePriceInfoObject(client, args) {
      const tx = new Transaction();
      builder.updatePriceInfoObject(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.updatePriceInfoObject = updatePriceInfoObject;
  })(view = price_info4.view || (price_info4.view = {}));
})(price_info2 || (price_info2 = {}));
var price_status2 = class _price_status extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("price_status", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price_status({ ..._price_status.DEFAULT_OPTIONS, ...options });
  }
  onEventPriceStatus(func, fetchConfig) {
    this.onMoveEvent(func, { type: "price_status::PriceStatus" }, fetchConfig);
    return this;
  }
};
((price_status4) => {
  let PriceStatus;
  ((PriceStatus2) => {
    PriceStatus2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_status::PriceStatus";
    const TYPE = new TypeDescriptor(PriceStatus2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    PriceStatus2.type = type;
  })(PriceStatus = price_status4.PriceStatus || (price_status4.PriceStatus = {}));
  let builder;
  ((builder2) => {
    function fromU64(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_status::from_u64",
        arguments: _args
      });
    }
    builder2.fromU64 = fromU64;
    function getStatus(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_status::get_status",
        arguments: _args
      });
    }
    builder2.getStatus = getStatus;
    function newTrading(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_status::new_trading",
        arguments: _args
      });
    }
    builder2.newTrading = newTrading;
    function newUnknown(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::price_status::new_unknown",
        arguments: _args
      });
    }
    builder2.newUnknown = newUnknown;
  })(builder = price_status4.builder || (price_status4.builder = {}));
  let view;
  ((view2) => {
    async function fromU64(client, args) {
      const tx = new Transaction();
      builder.fromU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromU64 = fromU64;
    async function getStatus(client, args) {
      const tx = new Transaction();
      builder.getStatus(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getStatus = getStatus;
    async function newTrading(client, args) {
      const tx = new Transaction();
      builder.newTrading(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newTrading = newTrading;
    async function newUnknown(client, args) {
      const tx = new Transaction();
      builder.newUnknown(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newUnknown = newUnknown;
  })(view = price_status4.view || (price_status4.view = {}));
})(price_status2 || (price_status2 = {}));
var pyth3 = class _pyth extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("pyth", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _pyth({ ..._pyth.DEFAULT_OPTIONS, ...options });
  }
  onEntryInitPyth(func, filter, fetchConfig) {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pyth::init_pyth"
      },
      fetchConfig
    );
    return this;
  }
};
((pyth5) => {
  let builder;
  ((builder2) => {
    function createAuthenticatedPriceInfosUsingAccumulator(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_authenticated_price_infos_using_accumulator",
        arguments: _args
      });
    }
    builder2.createAuthenticatedPriceInfosUsingAccumulator = createAuthenticatedPriceInfosUsingAccumulator;
    function createPriceFeeds(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_price_feeds",
        arguments: _args
      });
    }
    builder2.createPriceFeeds = createPriceFeeds;
    function createPriceFeedsUsingAccumulator(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_price_feeds_using_accumulator",
        arguments: _args
      });
    }
    builder2.createPriceFeedsUsingAccumulator = createPriceFeedsUsingAccumulator;
    function createPriceInfosHotPotato(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::create_price_infos_hot_potato",
        arguments: _args
      });
    }
    builder2.createPriceInfosHotPotato = createPriceInfosHotPotato;
    function getPrice3(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::get_price",
        arguments: _args
      });
    }
    builder2.getPrice = getPrice3;
    function getPriceNoOlderThan(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::get_price_no_older_than",
        arguments: _args
      });
    }
    builder2.getPriceNoOlderThan = getPriceNoOlderThan;
    function getPriceUnsafe(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::get_price_unsafe",
        arguments: _args
      });
    }
    builder2.getPriceUnsafe = getPriceUnsafe;
    function getStalePriceThresholdSecs(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::get_stale_price_threshold_secs",
        arguments: _args
      });
    }
    builder2.getStalePriceThresholdSecs = getStalePriceThresholdSecs;
    function getTotalUpdateFee(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::get_total_update_fee",
        arguments: _args
      });
    }
    builder2.getTotalUpdateFee = getTotalUpdateFee;
    function initPyth(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrPureU64(args[7], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::init_pyth",
        arguments: _args
      });
    }
    builder2.initPyth = initPyth;
    function priceFeedExists(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::price_feed_exists",
        arguments: _args
      });
    }
    builder2.priceFeedExists = priceFeedExists;
    function updateCache(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::update_cache",
        arguments: _args
      });
    }
    builder2.updateCache = updateCache;
    function updateSinglePriceFeed(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::pyth::update_single_price_feed",
        arguments: _args
      });
    }
    builder2.updateSinglePriceFeed = updateSinglePriceFeed;
  })(builder = pyth5.builder || (pyth5.builder = {}));
  let view;
  ((view2) => {
    async function createAuthenticatedPriceInfosUsingAccumulator(client, args) {
      const tx = new Transaction();
      builder.createAuthenticatedPriceInfosUsingAccumulator(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.createAuthenticatedPriceInfosUsingAccumulator = createAuthenticatedPriceInfosUsingAccumulator;
    async function createPriceFeeds(client, args) {
      const tx = new Transaction();
      builder.createPriceFeeds(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.createPriceFeeds = createPriceFeeds;
    async function createPriceFeedsUsingAccumulator(client, args) {
      const tx = new Transaction();
      builder.createPriceFeedsUsingAccumulator(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.createPriceFeedsUsingAccumulator = createPriceFeedsUsingAccumulator;
    async function createPriceInfosHotPotato(client, args) {
      const tx = new Transaction();
      builder.createPriceInfosHotPotato(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.createPriceInfosHotPotato = createPriceInfosHotPotato;
    async function getPrice3(client, args) {
      const tx = new Transaction();
      builder.getPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getPrice = getPrice3;
    async function getPriceNoOlderThan(client, args) {
      const tx = new Transaction();
      builder.getPriceNoOlderThan(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getPriceNoOlderThan = getPriceNoOlderThan;
    async function getPriceUnsafe(client, args) {
      const tx = new Transaction();
      builder.getPriceUnsafe(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getPriceUnsafe = getPriceUnsafe;
    async function getStalePriceThresholdSecs(client, args) {
      const tx = new Transaction();
      builder.getStalePriceThresholdSecs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getStalePriceThresholdSecs = getStalePriceThresholdSecs;
    async function getTotalUpdateFee(client, args) {
      const tx = new Transaction();
      builder.getTotalUpdateFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getTotalUpdateFee = getTotalUpdateFee;
    async function initPyth(client, args) {
      const tx = new Transaction();
      builder.initPyth(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.initPyth = initPyth;
    async function priceFeedExists(client, args) {
      const tx = new Transaction();
      builder.priceFeedExists(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.priceFeedExists = priceFeedExists;
    async function updateCache(client, args) {
      const tx = new Transaction();
      builder.updateCache(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.updateCache = updateCache;
    async function updateSinglePriceFeed(client, args) {
      const tx = new Transaction();
      builder.updateSinglePriceFeed(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.updateSinglePriceFeed = updateSinglePriceFeed;
  })(view = pyth5.view || (pyth5.view = {}));
})(pyth3 || (pyth3 = {}));
var set4 = class _set extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("set", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _set({ ..._set.DEFAULT_OPTIONS, ...options });
  }
  onEventUnit(func, fetchConfig) {
    this.onMoveEvent(func, { type: "set::Unit" }, fetchConfig);
    return this;
  }
};
((set6) => {
  let Set2;
  ((Set3) => {
    Set3.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set::Set";
    const TYPE = new TypeDescriptor(Set3.TYPE_QNAME);
    function type(arg0 = ANY_TYPE) {
      return TYPE.apply(arg0);
    }
    Set3.type = type;
  })(Set2 = set6.Set || (set6.Set = {}));
  let Unit;
  ((Unit2) => {
    Unit2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set::Unit";
    const TYPE = new TypeDescriptor(Unit2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Unit2.type = type;
  })(Unit = set6.Unit || (set6.Unit = {}));
  let builder;
  ((builder2) => {
    function add2(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set::add",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.add = add2;
    function contains(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set::contains",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.contains = contains;
    function empty(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set::empty",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.empty = empty;
    function new_(tx, args, typeArguments) {
      const _args = [];
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.new_ = new_;
  })(builder = set6.builder || (set6.builder = {}));
  let view;
  ((view2) => {
    async function add2(client, args, typeArguments) {
      const tx = new Transaction();
      builder.add(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.add = add2;
    async function contains(client, args, typeArguments) {
      const tx = new Transaction();
      builder.contains(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.contains = contains;
    async function empty(client, args, typeArguments) {
      const tx = new Transaction();
      builder.empty(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.empty = empty;
    async function new_(client, args, typeArguments) {
      const tx = new Transaction();
      builder.new_(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.new_ = new_;
  })(view = set6.view || (set6.view = {}));
})(set4 || (set4 = {}));
var set_data_sources2;
((set_data_sources4) => {
  let DataSources;
  ((DataSources2) => {
    DataSources2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set_data_sources::DataSources";
    const TYPE = new TypeDescriptor(DataSources2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    DataSources2.type = type;
  })(DataSources = set_data_sources4.DataSources || (set_data_sources4.DataSources = {}));
  let builder;
  ((builder2) => {
    function execute(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set_data_sources::execute",
        arguments: _args
      });
    }
    builder2.execute = execute;
  })(builder = set_data_sources4.builder || (set_data_sources4.builder = {}));
  let view;
  ((view2) => {
    async function execute(client, args) {
      const tx = new Transaction();
      builder.execute(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.execute = execute;
  })(view = set_data_sources4.view || (set_data_sources4.view = {}));
})(set_data_sources2 || (set_data_sources2 = {}));
var set_fee_recipient;
((set_fee_recipient3) => {
  let PythFeeRecipient;
  ((PythFeeRecipient2) => {
    PythFeeRecipient2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set_fee_recipient::PythFeeRecipient";
    const TYPE = new TypeDescriptor(
      PythFeeRecipient2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    PythFeeRecipient2.type = type;
  })(PythFeeRecipient = set_fee_recipient3.PythFeeRecipient || (set_fee_recipient3.PythFeeRecipient = {}));
  let builder;
  ((builder2) => {
    function execute(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set_fee_recipient::execute",
        arguments: _args
      });
    }
    builder2.execute = execute;
  })(builder = set_fee_recipient3.builder || (set_fee_recipient3.builder = {}));
  let view;
  ((view2) => {
    async function execute(client, args) {
      const tx = new Transaction();
      builder.execute(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.execute = execute;
  })(view = set_fee_recipient3.view || (set_fee_recipient3.view = {}));
})(set_fee_recipient || (set_fee_recipient = {}));
var set_governance_data_source2;
((set_governance_data_source4) => {
  let GovernanceDataSource;
  ((GovernanceDataSource2) => {
    GovernanceDataSource2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set_governance_data_source::GovernanceDataSource";
    const TYPE = new TypeDescriptor(
      GovernanceDataSource2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GovernanceDataSource2.type = type;
  })(GovernanceDataSource = set_governance_data_source4.GovernanceDataSource || (set_governance_data_source4.GovernanceDataSource = {}));
  let builder;
  ((builder2) => {
    function execute(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set_governance_data_source::execute",
        arguments: _args
      });
    }
    builder2.execute = execute;
  })(builder = set_governance_data_source4.builder || (set_governance_data_source4.builder = {}));
  let view;
  ((view2) => {
    async function execute(client, args) {
      const tx = new Transaction();
      builder.execute(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.execute = execute;
  })(view = set_governance_data_source4.view || (set_governance_data_source4.view = {}));
})(set_governance_data_source2 || (set_governance_data_source2 = {}));
var set_stale_price_threshold2;
((set_stale_price_threshold4) => {
  let StalePriceThreshold;
  ((StalePriceThreshold2) => {
    StalePriceThreshold2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set_stale_price_threshold::StalePriceThreshold";
    const TYPE = new TypeDescriptor(
      StalePriceThreshold2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    StalePriceThreshold2.type = type;
  })(StalePriceThreshold = set_stale_price_threshold4.StalePriceThreshold || (set_stale_price_threshold4.StalePriceThreshold = {}));
  let builder;
  ((builder2) => {
    function execute(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set_stale_price_threshold::execute",
        arguments: _args
      });
    }
    builder2.execute = execute;
  })(builder = set_stale_price_threshold4.builder || (set_stale_price_threshold4.builder = {}));
  let view;
  ((view2) => {
    async function execute(client, args) {
      const tx = new Transaction();
      builder.execute(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.execute = execute;
  })(view = set_stale_price_threshold4.view || (set_stale_price_threshold4.view = {}));
})(set_stale_price_threshold2 || (set_stale_price_threshold2 = {}));
var set_update_fee2;
((set_update_fee4) => {
  let UpdateFee;
  ((UpdateFee2) => {
    UpdateFee2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set_update_fee::UpdateFee";
    const TYPE = new TypeDescriptor(UpdateFee2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    UpdateFee2.type = type;
  })(UpdateFee = set_update_fee4.UpdateFee || (set_update_fee4.UpdateFee = {}));
  let builder;
  ((builder2) => {
    function execute(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::set_update_fee::execute",
        arguments: _args
      });
    }
    builder2.execute = execute;
  })(builder = set_update_fee4.builder || (set_update_fee4.builder = {}));
  let view;
  ((view2) => {
    async function execute(client, args) {
      const tx = new Transaction();
      builder.execute(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.execute = execute;
  })(view = set_update_fee4.view || (set_update_fee4.view = {}));
})(set_update_fee2 || (set_update_fee2 = {}));
var setup2;
((setup4) => {
  let DeployerCap;
  ((DeployerCap2) => {
    DeployerCap2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::setup::DeployerCap";
    const TYPE = new TypeDescriptor(DeployerCap2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    DeployerCap2.type = type;
  })(DeployerCap = setup4.DeployerCap || (setup4.DeployerCap = {}));
  let builder;
  ((builder2) => {
    function initAndShareState(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::setup::init_and_share_state",
        arguments: _args
      });
    }
    builder2.initAndShareState = initAndShareState;
  })(builder = setup4.builder || (setup4.builder = {}));
  let view;
  ((view2) => {
    async function initAndShareState(client, args) {
      const tx = new Transaction();
      builder.initAndShareState(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.initAndShareState = initAndShareState;
  })(view = setup4.view || (setup4.view = {}));
})(setup2 || (setup2 = {}));
var state4 = class _state extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("state", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _state({ ..._state.DEFAULT_OPTIONS, ...options });
  }
  onEventCurrentDigest(func, fetchConfig) {
    this.onMoveEvent(func, { type: "state::CurrentDigest" }, fetchConfig);
    return this;
  }
};
((state6) => {
  let CurrentDigest;
  ((CurrentDigest2) => {
    CurrentDigest2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::CurrentDigest";
    const TYPE = new TypeDescriptor(CurrentDigest2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    CurrentDigest2.type = type;
  })(CurrentDigest = state6.CurrentDigest || (state6.CurrentDigest = {}));
  let LatestOnly;
  ((LatestOnly2) => {
    LatestOnly2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::LatestOnly";
    const TYPE = new TypeDescriptor(LatestOnly2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    LatestOnly2.type = type;
  })(LatestOnly = state6.LatestOnly || (state6.LatestOnly = {}));
  let State;
  ((State2) => {
    State2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::State";
    const TYPE = new TypeDescriptor(State2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    State2.type = type;
  })(State = state6.State || (state6.State = {}));
  let builder;
  ((builder2) => {
    function assertAuthorizedDigest(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::assert_authorized_digest",
        arguments: _args
      });
    }
    builder2.assertAuthorizedDigest = assertAuthorizedDigest;
    function assertLatestOnly(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::assert_latest_only",
        arguments: _args
      });
    }
    builder2.assertLatestOnly = assertLatestOnly;
    function authorizeUpgrade(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::authorize_upgrade",
        arguments: _args
      });
    }
    builder2.authorizeUpgrade = authorizeUpgrade;
    function borrowMutConsumedVaas(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::borrow_mut_consumed_vaas",
        arguments: _args
      });
    }
    builder2.borrowMutConsumedVaas = borrowMutConsumedVaas;
    function borrowMutConsumedVaasUnchecked(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::borrow_mut_consumed_vaas_unchecked",
        arguments: _args
      });
    }
    builder2.borrowMutConsumedVaasUnchecked = borrowMutConsumedVaasUnchecked;
    function commitUpgrade(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::commit_upgrade",
        arguments: _args
      });
    }
    builder2.commitUpgrade = commitUpgrade;
    function currentPackage(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::current_package",
        arguments: _args
      });
    }
    builder2.currentPackage = currentPackage;
    function getBaseUpdateFee(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::get_base_update_fee",
        arguments: _args
      });
    }
    builder2.getBaseUpdateFee = getBaseUpdateFee;
    function getFeeRecipient(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::get_fee_recipient",
        arguments: _args
      });
    }
    builder2.getFeeRecipient = getFeeRecipient;
    function getLastExecutedGovernanceSequence(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::get_last_executed_governance_sequence",
        arguments: _args
      });
    }
    builder2.getLastExecutedGovernanceSequence = getLastExecutedGovernanceSequence;
    function getPriceInfoObjectId(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::get_price_info_object_id",
        arguments: _args
      });
    }
    builder2.getPriceInfoObjectId = getPriceInfoObjectId;
    function getStalePriceThresholdSecs(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::get_stale_price_threshold_secs",
        arguments: _args
      });
    }
    builder2.getStalePriceThresholdSecs = getStalePriceThresholdSecs;
    function governanceChain(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::governance_chain",
        arguments: _args
      });
    }
    builder2.governanceChain = governanceChain;
    function governanceContract(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::governance_contract",
        arguments: _args
      });
    }
    builder2.governanceContract = governanceContract;
    function governanceDataSource(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::governance_data_source",
        arguments: _args
      });
    }
    builder2.governanceDataSource = governanceDataSource;
    function governanceModule(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::governance_module",
        arguments: _args
      });
    }
    builder2.governanceModule = governanceModule;
    function isValidDataSource(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::is_valid_data_source",
        arguments: _args
      });
    }
    builder2.isValidDataSource = isValidDataSource;
    function isValidGovernanceDataSource(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::is_valid_governance_data_source",
        arguments: _args
      });
    }
    builder2.isValidGovernanceDataSource = isValidGovernanceDataSource;
    function migrateV011(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::migrate__v__0_1_1",
        arguments: _args
      });
    }
    builder2.migrateV011 = migrateV011;
    function migrateVersion(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::migrate_version",
        arguments: _args
      });
    }
    builder2.migrateVersion = migrateVersion;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
    function priceFeedObjectExists(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::price_feed_object_exists",
        arguments: _args
      });
    }
    builder2.priceFeedObjectExists = priceFeedObjectExists;
    function registerPriceInfoObject(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::register_price_info_object",
        arguments: _args
      });
    }
    builder2.registerPriceInfoObject = registerPriceInfoObject;
    function setBaseUpdateFee(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::set_base_update_fee",
        arguments: _args
      });
    }
    builder2.setBaseUpdateFee = setBaseUpdateFee;
    function setDataSources(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::set_data_sources",
        arguments: _args
      });
    }
    builder2.setDataSources = setDataSources;
    function setFeeRecipient(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureAddress(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::set_fee_recipient",
        arguments: _args
      });
    }
    builder2.setFeeRecipient = setFeeRecipient;
    function setGovernanceDataSource(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::set_governance_data_source",
        arguments: _args
      });
    }
    builder2.setGovernanceDataSource = setGovernanceDataSource;
    function setLastExecutedGovernanceSequence(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::set_last_executed_governance_sequence",
        arguments: _args
      });
    }
    builder2.setLastExecutedGovernanceSequence = setLastExecutedGovernanceSequence;
    function setLastExecutedGovernanceSequenceUnchecked(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::set_last_executed_governance_sequence_unchecked",
        arguments: _args
      });
    }
    builder2.setLastExecutedGovernanceSequenceUnchecked = setLastExecutedGovernanceSequenceUnchecked;
    function setStalePriceThresholdSecs(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::state::set_stale_price_threshold_secs",
        arguments: _args
      });
    }
    builder2.setStalePriceThresholdSecs = setStalePriceThresholdSecs;
  })(builder = state6.builder || (state6.builder = {}));
  let view;
  ((view2) => {
    async function assertAuthorizedDigest(client, args) {
      const tx = new Transaction();
      builder.assertAuthorizedDigest(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.assertAuthorizedDigest = assertAuthorizedDigest;
    async function assertLatestOnly(client, args) {
      const tx = new Transaction();
      builder.assertLatestOnly(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.assertLatestOnly = assertLatestOnly;
    async function authorizeUpgrade(client, args) {
      const tx = new Transaction();
      builder.authorizeUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeUpgrade = authorizeUpgrade;
    async function borrowMutConsumedVaas(client, args) {
      const tx = new Transaction();
      builder.borrowMutConsumedVaas(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.borrowMutConsumedVaas = borrowMutConsumedVaas;
    async function borrowMutConsumedVaasUnchecked(client, args) {
      const tx = new Transaction();
      builder.borrowMutConsumedVaasUnchecked(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.borrowMutConsumedVaasUnchecked = borrowMutConsumedVaasUnchecked;
    async function commitUpgrade(client, args) {
      const tx = new Transaction();
      builder.commitUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.commitUpgrade = commitUpgrade;
    async function currentPackage(client, args) {
      const tx = new Transaction();
      builder.currentPackage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.currentPackage = currentPackage;
    async function getBaseUpdateFee(client, args) {
      const tx = new Transaction();
      builder.getBaseUpdateFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getBaseUpdateFee = getBaseUpdateFee;
    async function getFeeRecipient(client, args) {
      const tx = new Transaction();
      builder.getFeeRecipient(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getFeeRecipient = getFeeRecipient;
    async function getLastExecutedGovernanceSequence(client, args) {
      const tx = new Transaction();
      builder.getLastExecutedGovernanceSequence(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getLastExecutedGovernanceSequence = getLastExecutedGovernanceSequence;
    async function getPriceInfoObjectId(client, args) {
      const tx = new Transaction();
      builder.getPriceInfoObjectId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.getPriceInfoObjectId = getPriceInfoObjectId;
    async function getStalePriceThresholdSecs(client, args) {
      const tx = new Transaction();
      builder.getStalePriceThresholdSecs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getStalePriceThresholdSecs = getStalePriceThresholdSecs;
    async function governanceChain(client, args) {
      const tx = new Transaction();
      builder.governanceChain(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.governanceChain = governanceChain;
    async function governanceContract(client, args) {
      const tx = new Transaction();
      builder.governanceContract(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.governanceContract = governanceContract;
    async function governanceDataSource(client, args) {
      const tx = new Transaction();
      builder.governanceDataSource(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.governanceDataSource = governanceDataSource;
    async function governanceModule(client, args) {
      const tx = new Transaction();
      builder.governanceModule(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.governanceModule = governanceModule;
    async function isValidDataSource(client, args) {
      const tx = new Transaction();
      builder.isValidDataSource(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.isValidDataSource = isValidDataSource;
    async function isValidGovernanceDataSource(client, args) {
      const tx = new Transaction();
      builder.isValidGovernanceDataSource(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.isValidGovernanceDataSource = isValidGovernanceDataSource;
    async function migrateV011(client, args) {
      const tx = new Transaction();
      builder.migrateV011(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.migrateV011 = migrateV011;
    async function migrateVersion(client, args) {
      const tx = new Transaction();
      builder.migrateVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.migrateVersion = migrateVersion;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.new_ = new_;
    async function priceFeedObjectExists(client, args) {
      const tx = new Transaction();
      builder.priceFeedObjectExists(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.priceFeedObjectExists = priceFeedObjectExists;
    async function registerPriceInfoObject(client, args) {
      const tx = new Transaction();
      builder.registerPriceInfoObject(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.registerPriceInfoObject = registerPriceInfoObject;
    async function setBaseUpdateFee(client, args) {
      const tx = new Transaction();
      builder.setBaseUpdateFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setBaseUpdateFee = setBaseUpdateFee;
    async function setDataSources(client, args) {
      const tx = new Transaction();
      builder.setDataSources(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setDataSources = setDataSources;
    async function setFeeRecipient(client, args) {
      const tx = new Transaction();
      builder.setFeeRecipient(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setFeeRecipient = setFeeRecipient;
    async function setGovernanceDataSource(client, args) {
      const tx = new Transaction();
      builder.setGovernanceDataSource(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setGovernanceDataSource = setGovernanceDataSource;
    async function setLastExecutedGovernanceSequence(client, args) {
      const tx = new Transaction();
      builder.setLastExecutedGovernanceSequence(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setLastExecutedGovernanceSequence = setLastExecutedGovernanceSequence;
    async function setLastExecutedGovernanceSequenceUnchecked(client, args) {
      const tx = new Transaction();
      builder.setLastExecutedGovernanceSequenceUnchecked(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setLastExecutedGovernanceSequenceUnchecked = setLastExecutedGovernanceSequenceUnchecked;
    async function setStalePriceThresholdSecs(client, args) {
      const tx = new Transaction();
      builder.setStalePriceThresholdSecs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setStalePriceThresholdSecs = setStalePriceThresholdSecs;
  })(view = state6.view || (state6.view = {}));
})(state4 || (state4 = {}));
var version_control2 = class _version_control extends import_sui8.SuiBaseProcessor {
  constructor(options) {
    super("version_control", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e",
    network: import_sui8.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _version_control({
      ..._version_control.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventV__0_1_1(func, fetchConfig) {
    this.onMoveEvent(func, { type: "version_control::V__0_1_1" }, fetchConfig);
    return this;
  }
  onEventV__DUMMY(func, fetchConfig) {
    this.onMoveEvent(func, { type: "version_control::V__DUMMY" }, fetchConfig);
    return this;
  }
};
((version_control4) => {
  let V__0_1_1;
  ((V__0_1_12) => {
    V__0_1_12.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::version_control::V__0_1_1";
    const TYPE = new TypeDescriptor(V__0_1_12.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    V__0_1_12.type = type;
  })(V__0_1_1 = version_control4.V__0_1_1 || (version_control4.V__0_1_1 = {}));
  let V__DUMMY;
  ((V__DUMMY2) => {
    V__DUMMY2.TYPE_QNAME = "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::version_control::V__DUMMY";
    const TYPE = new TypeDescriptor(V__DUMMY2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    V__DUMMY2.type = type;
  })(V__DUMMY = version_control4.V__DUMMY || (version_control4.V__DUMMY = {}));
  let builder;
  ((builder2) => {
    function currentVersion(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::version_control::current_version",
        arguments: _args
      });
    }
    builder2.currentVersion = currentVersion;
    function previousVersion(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e::version_control::previous_version",
        arguments: _args
      });
    }
    builder2.previousVersion = previousVersion;
  })(builder = version_control4.builder || (version_control4.builder = {}));
  let view;
  ((view2) => {
    async function currentVersion(client, args) {
      const tx = new Transaction();
      builder.currentVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.currentVersion = currentVersion;
    async function previousVersion(client, args) {
      const tx = new Transaction();
      builder.previousVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.previousVersion = previousVersion;
  })(view = version_control4.view || (version_control4.view = {}));
})(version_control2 || (version_control2 = {}));
var MODULES4 = JSON.parse(
  '{"accumulator":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"accumulator","friends":[{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"pyth"}],"structs":{},"exposedFunctions":{"parse_and_verify_accumulator_message":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Vector":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}}]}}},"batch_price_attestation":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"batch_price_attestation","friends":[],"structs":{"BatchPriceAttestation":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"header","type":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"batch_price_attestation","name":"Header","typeArguments":[]}}},{"name":"attestation_size","type":"U64"},{"name":"attestation_count","type":"U64"},{"name":"price_infos","type":{"Vector":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}}}]},"Header":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"magic","type":"U64"},{"name":"version_major","type":"U64"},{"name":"version_minor","type":"U64"},{"name":"header_size","type":"U64"},{"name":"payload_id","type":"U8"}]}},"exposedFunctions":{"deserialize":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"batch_price_attestation","name":"BatchPriceAttestation","typeArguments":[]}}]},"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"batch_price_attestation","name":"BatchPriceAttestation","typeArguments":[]}}],"return":[{"Vector":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}}]},"get_attestation_count":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"batch_price_attestation","name":"BatchPriceAttestation","typeArguments":[]}}}],"return":["U64"]},"get_price_info":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"batch_price_attestation","name":"BatchPriceAttestation","typeArguments":[]}}},"U64"],"return":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}}]}}},"contract_upgrade":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"contract_upgrade","friends":[{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"migrate"}],"structs":{"ContractUpgraded":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"old_contract","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"new_contract","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"UpgradeContract":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"digest","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}}]}},"exposedFunctions":{"authorize_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance","name":"WormholeVAAVerificationReceipt","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeTicket","typeArguments":[]}}]},"commit_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeReceipt","typeArguments":[]}}],"return":[]},"take_digest":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"take_upgrade_digest":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance","name":"WormholeVAAVerificationReceipt","typeArguments":[]}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]}}},"data_source":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"data_source","friends":[{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"governance"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"pyth"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"set_data_sources"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"set_governance_data_source"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"state"}],"structs":{"DataSource":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"emitter_chain","type":"U64"},{"name":"emitter_address","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}}]}},"exposedFunctions":{"add":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}}],"return":[]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}}],"return":["Bool"]},"emitter_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}]},"emitter_chain":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}}}],"return":["U64"]},"empty":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}],"return":[]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["U64",{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}}]},"new_data_source_registry":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"deserialize":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"deserialize","friends":[],"structs":{},"exposedFunctions":{"deserialize_i32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"i64","name":"I64","typeArguments":[]}}]},"deserialize_i64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"i64","name":"I64","typeArguments":[]}}]},"deserialize_u16":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":["U16"]},"deserialize_u32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":["U32"]},"deserialize_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":["U64"]},"deserialize_u8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":["U8"]},"deserialize_vector":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}},"U64"],"return":[{"Vector":"U8"}]}}},"event":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"event","friends":[{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"pyth"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"state"}],"structs":{"PriceFeedUpdateEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"price_feed","type":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_feed","name":"PriceFeed","typeArguments":[]}}},{"name":"timestamp","type":"U64"}]},"PythInitializationEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"emit_price_feed_update":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_feed","name":"PriceFeed","typeArguments":[]}},"U64"],"return":[]},"emit_pyth_initialization_event":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[]}}},"governance":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"governance","friends":[],"structs":{"WormholeVAAVerificationReceipt":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"payload","type":{"Vector":"U8"}},{"name":"digest","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}},{"name":"sequence","type":"U64"}]}},"exposedFunctions":{"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance","name":"WormholeVAAVerificationReceipt","typeArguments":[]}}],"return":[]},"execute_governance_instruction":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance","name":"WormholeVAAVerificationReceipt","typeArguments":[]}}],"return":[]},"take_digest":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance","name":"WormholeVAAVerificationReceipt","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"take_payload":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance","name":"WormholeVAAVerificationReceipt","typeArguments":[]}}}],"return":[{"Vector":"U8"}]},"take_sequence":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance","name":"WormholeVAAVerificationReceipt","typeArguments":[]}}}],"return":["U64"]},"verify_vaa":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance","name":"WormholeVAAVerificationReceipt","typeArguments":[]}}]}}},"governance_action":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"governance_action","friends":[],"structs":{"GovernanceAction":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"value","type":"U8"}]}},"exposedFunctions":{"from_u8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U8"],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]},"get_value":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}],"return":["U8"]},"new_contract_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]},"new_set_data_sources":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]},"new_set_fee_recipient":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]},"new_set_governance_data_source":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]},"new_set_stale_price_threshold":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]},"new_set_update_fee":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]}}},"governance_instruction":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"governance_instruction","friends":[],"structs":{"GovernanceInstruction":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"module_","type":"U8"},{"name":"action","type":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}},{"name":"target_chain_id","type":"U64"},{"name":"payload","type":{"Vector":"U8"}}]}},"exposedFunctions":{"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_instruction","name":"GovernanceInstruction","typeArguments":[]}}],"return":[{"Vector":"U8"}]},"from_byte_vec":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_instruction","name":"GovernanceInstruction","typeArguments":[]}}]},"get_action":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_instruction","name":"GovernanceInstruction","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]},"get_module":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_instruction","name":"GovernanceInstruction","typeArguments":[]}}}],"return":["U8"]},"get_target_chain_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance_instruction","name":"GovernanceInstruction","typeArguments":[]}}}],"return":["U64"]}}},"hot_potato_vector":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"hot_potato_vector","friends":[{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"pyth"}],"structs":{"HotPotatoVector":{"abilities":{"abilities":[]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop"]},"isPhantom":false}],"fields":[{"name":"contents","type":{"Vector":{"TypeParameter":0}}}]}},"exposedFunctions":{"borrow":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":[{"Reference":{"TypeParameter":0}}]},"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"TypeParameter":0}]}}}],"return":["Bool"]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Vector":{"TypeParameter":0}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"TypeParameter":0}]}}]},"pop_back":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"TypeParameter":0}]}}],"return":[{"TypeParameter":0},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"TypeParameter":0}]}}]}}},"i64":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"i64","friends":[],"structs":{"I64":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"negative","type":"Bool"},{"name":"magnitude","type":"U64"}]}},"exposedFunctions":{"from_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"i64","name":"I64","typeArguments":[]}}]},"get_is_negative":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"i64","name":"I64","typeArguments":[]}}}],"return":["Bool"]},"get_magnitude_if_negative":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"i64","name":"I64","typeArguments":[]}}}],"return":["U64"]},"get_magnitude_if_positive":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"i64","name":"I64","typeArguments":[]}}}],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","Bool"],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"i64","name":"I64","typeArguments":[]}}]}}},"merkle_tree":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"merkle_tree","friends":[],"structs":{},"exposedFunctions":{"construct_proofs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":{"Vector":"U8"}}},"U8"],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes20","name":"Bytes20","typeArguments":[]}},{"Vector":"U8"}]},"is_proof_valid":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes20","name":"Bytes20","typeArguments":[]}},{"Vector":"U8"}],"return":["Bool"]}}},"migrate":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"migrate","friends":[],"structs":{"MigrateComplete":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"package","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]}},"exposedFunctions":{"migrate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"governance","name":"WormholeVAAVerificationReceipt","typeArguments":[]}}],"return":[]}}},"price":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"price","friends":[],"structs":{"Price":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"price","type":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"i64","name":"I64","typeArguments":[]}}},{"name":"conf","type":"U64"},{"name":"expo","type":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"i64","name":"I64","typeArguments":[]}}},{"name":"timestamp","type":"U64"}]}},"exposedFunctions":{"get_conf":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price","name":"Price","typeArguments":[]}}}],"return":["U64"]},"get_expo":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price","name":"Price","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"i64","name":"I64","typeArguments":[]}}]},"get_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price","name":"Price","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"i64","name":"I64","typeArguments":[]}}]},"get_timestamp":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price","name":"Price","typeArguments":[]}}}],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"i64","name":"I64","typeArguments":[]}},"U64",{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"i64","name":"I64","typeArguments":[]}},"U64"],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price","name":"Price","typeArguments":[]}}]}}},"price_feed":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"price_feed","friends":[],"structs":{"PriceFeed":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"price_identifier","type":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}},{"name":"price","type":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price","name":"Price","typeArguments":[]}}},{"name":"ema_price","type":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price","name":"Price","typeArguments":[]}}}]}},"exposedFunctions":{"from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_feed","name":"PriceFeed","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_feed","name":"PriceFeed","typeArguments":[]}}]},"get_ema_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_feed","name":"PriceFeed","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price","name":"Price","typeArguments":[]}}]},"get_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_feed","name":"PriceFeed","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price","name":"Price","typeArguments":[]}}]},"get_price_identifier":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_feed","name":"PriceFeed","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price","name":"Price","typeArguments":[]}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price","name":"Price","typeArguments":[]}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_feed","name":"PriceFeed","typeArguments":[]}}]}}},"price_identifier":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"price_identifier","friends":[],"structs":{"PriceIdentifier":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bytes","type":{"Vector":"U8"}}]}},"exposedFunctions":{"from_byte_vec":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}]},"get_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}}],"return":[{"Vector":"U8"}]}}},"price_info":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"price_info","friends":[{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"pyth"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"state"}],"structs":{"PriceInfo":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"attestation_time","type":"U64"},{"name":"arrival_time","type":"U64"},{"name":"price_feed","type":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_feed","name":"PriceFeed","typeArguments":[]}}}]},"PriceInfoObject":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"price_info","type":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}}]}},"exposedFunctions":{"add":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}],"return":["Bool"]},"deposit_fee_coins":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}],"return":[]},"get_arrival_time":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}}],"return":["U64"]},"get_attestation_time":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}}],"return":["U64"]},"get_balance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}}],"return":["U64"]},"get_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"get_id_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}],"return":[{"Vector":"U8"}]},"get_price_feed":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_feed","name":"PriceFeed","typeArguments":[]}}}]},"get_price_identifier":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}]},"get_price_info_from_price_info_object":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}]},"new_price_info":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64",{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_feed","name":"PriceFeed","typeArguments":[]}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}]},"new_price_info_object":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}]},"new_price_info_registry":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"uid_to_inner":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"update_price_info_object":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}}],"return":[]}}},"price_status":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"price_status","friends":[],"structs":{"PriceStatus":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"status","type":"U64"}]}},"exposedFunctions":{"from_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_status","name":"PriceStatus","typeArguments":[]}}]},"get_status":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_status","name":"PriceStatus","typeArguments":[]}}}],"return":["U64"]},"new_trading":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_status","name":"PriceStatus","typeArguments":[]}}]},"new_unknown":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_status","name":"PriceStatus","typeArguments":[]}}]}}},"pyth":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"pyth","friends":[],"structs":{},"exposedFunctions":{"create_authenticated_price_infos_using_accumulator":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}]}}]},"create_price_feeds":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"create_price_feeds_using_accumulator":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"create_price_infos_hot_potato":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}]}}]},"get_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price","name":"Price","typeArguments":[]}}]},"get_price_no_older_than":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},"U64"],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price","name":"Price","typeArguments":[]}}]},"get_price_unsafe":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price","name":"Price","typeArguments":[]}}]},"get_stale_price_threshold_secs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}}],"return":["U64"]},"get_total_update_fee":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},"U64"],"return":["U64"]},"init_pyth":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"setup","name":"DeployerCap","typeArguments":[]}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}},"U64","U64",{"Vector":"U8"},{"Vector":"U64"},{"Vector":{"Vector":"U8"}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"price_feed_exists":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}],"return":["Bool"]},"update_cache":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[]},"update_single_price_feed":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_info","name":"PriceInfo","typeArguments":[]}}]}}]}}},"set":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"set","friends":[],"structs":{"Set":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop","Store"]},"isPhantom":false}],"fields":[{"name":"keys","type":{"Vector":{"TypeParameter":0}}},{"name":"elems","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"TypeParameter":0},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"set","name":"Unit","typeArguments":[]}}]}}}]},"Unit":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"add":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"set","name":"Set","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":0}],"return":[]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"set","name":"Set","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":0}],"return":["Bool"]},"empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"set","name":"Set","typeArguments":[{"TypeParameter":0}]}}}],"return":[]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"set","name":"Set","typeArguments":[{"TypeParameter":0}]}}]}}},"set_data_sources":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"set_data_sources","friends":[{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"governance"}],"structs":{"DataSources":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"sources","type":{"Vector":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}}}}]}},"exposedFunctions":{"execute":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"}],"return":[]}}},"set_fee_recipient":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"set_fee_recipient","friends":[{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"governance"}],"structs":{"PythFeeRecipient":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"recipient","type":"Address"}]}},"exposedFunctions":{"execute":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"}],"return":[]}}},"set_governance_data_source":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"set_governance_data_source","friends":[{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"governance"}],"structs":{"GovernanceDataSource":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"emitter_chain_id","type":"U64"},{"name":"emitter_address","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}},{"name":"initial_sequence","type":"U64"}]}},"exposedFunctions":{"execute":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"}],"return":[]}}},"set_stale_price_threshold":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"set_stale_price_threshold","friends":[{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"governance"}],"structs":{"StalePriceThreshold":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"threshold","type":"U64"}]}},"exposedFunctions":{"execute":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"}],"return":[]}}},"set_update_fee":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"set_update_fee","friends":[{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"governance"}],"structs":{"UpdateFee":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"mantissa","type":"U64"},{"name":"exponent","type":"U64"}]}},"exposedFunctions":{"execute":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"}],"return":[]}}},"setup":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"setup","friends":[{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"pyth"}],"structs":{"DeployerCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]}},"exposedFunctions":{"init_and_share_state":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"setup","name":"DeployerCap","typeArguments":[]}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}},{"Vector":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"state":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"state","friends":[{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"contract_upgrade"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"governance"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"governance_action"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"migrate"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"pyth"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"set_data_sources"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"set_fee_recipient"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"set_governance_data_source"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"set_stale_price_threshold"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"set_update_fee"},{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"setup"}],"structs":{"CurrentDigest":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"LatestOnly":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"State":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"governance_data_source","type":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}}},{"name":"stale_price_threshold","type":"U64"},{"name":"base_update_fee","type":"U64"},{"name":"fee_recipient_address","type":"Address"},{"name":"last_executed_governance_sequence","type":"U64"},{"name":"consumed_vaas","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"consumed_vaas","name":"ConsumedVAAs","typeArguments":[]}}},{"name":"upgrade_cap","type":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}}]}},"exposedFunctions":{"assert_authorized_digest":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[]},"assert_latest_only":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}]},"authorize_upgrade":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeTicket","typeArguments":[]}}]},"borrow_mut_consumed_vaas":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"consumed_vaas","name":"ConsumedVAAs","typeArguments":[]}}}]},"borrow_mut_consumed_vaas_unchecked":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"consumed_vaas","name":"ConsumedVAAs","typeArguments":[]}}}]},"commit_upgrade":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeReceipt","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"current_package":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"get_base_update_fee":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}}],"return":["U64"]},"get_fee_recipient":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}}],"return":["Address"]},"get_last_executed_governance_sequence":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}}],"return":["U64"]},"get_price_info_object_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"get_stale_price_threshold_secs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}}],"return":["U64"]},"governance_chain":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}}],"return":["U16"]},"governance_contract":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}]},"governance_data_source":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}}]},"governance_module":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"is_valid_data_source":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}}],"return":["Bool"]},"is_valid_governance_data_source":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}}],"return":["Bool"]},"migrate__v__0_1_1":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}}],"return":[]},"migrate_version":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}}],"return":[]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}},{"Vector":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}},"U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}]},"price_feed_object_exists":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}],"return":["Bool"]},"register_price_info_object":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[]},"set_base_update_fee":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},"U64"],"return":[]},"set_data_sources":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}}}],"return":[]},"set_fee_recipient":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},"Address"],"return":[]},"set_governance_data_source":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"data_source","name":"DataSource","typeArguments":[]}}],"return":[]},"set_last_executed_governance_sequence":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},"U64"],"return":[]},"set_last_executed_governance_sequence_unchecked":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},"U64"],"return":[]},"set_stale_price_threshold_secs":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"state","name":"State","typeArguments":[]}}},"U64"],"return":[]}}},"version_control":{"fileFormatVersion":6,"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"version_control","friends":[{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","name":"state"}],"structs":{"V__0_1_1":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"V__DUMMY":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"current_version":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"version_control","name":"V__0_1_1","typeArguments":[]}}]},"previous_version":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e","module":"version_control","name":"V__DUMMY","typeArguments":[]}}]}}}}'
);
function loadAllTypes9(coder) {
  loadAllTypes7(
    coder
  );
  _0x22.loadAllTypes(coder);
  for (const m of Object.values(MODULES4)) {
    coder.load(
      m,
      "0x8d97f1cd6ac663735be08d1d2b6d02a159e711586461306ce60a2b7a6a565a9e"
    );
  }
}
loadAllTypes9((0, import_sui5.defaultMoveCoder)(import_sui8.SuiNetwork.MAIN_NET));

// src/types/sui/0x00b53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302.ts
var import_sui9 = require("@sentio/sdk/sui");
var import_sui12 = require("@sentio/sdk/sui");
var _0x23 = __toESM(require("@sentio/sdk/sui/builtin/0x2"), 1);
var batch_price_attestation3;
((batch_price_attestation4) => {
  let BatchPriceAttestation;
  ((BatchPriceAttestation2) => {
    BatchPriceAttestation2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::batch_price_attestation::BatchPriceAttestation";
    const TYPE = new TypeDescriptor(
      BatchPriceAttestation2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    BatchPriceAttestation2.type = type;
  })(BatchPriceAttestation = batch_price_attestation4.BatchPriceAttestation || (batch_price_attestation4.BatchPriceAttestation = {}));
  let Header;
  ((Header2) => {
    Header2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::batch_price_attestation::Header";
    const TYPE = new TypeDescriptor(Header2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Header2.type = type;
  })(Header = batch_price_attestation4.Header || (batch_price_attestation4.Header = {}));
  let builder;
  ((builder2) => {
    function deserialize3(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::batch_price_attestation::deserialize",
        arguments: _args
      });
    }
    builder2.deserialize = deserialize3;
    function destroy(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::batch_price_attestation::destroy",
        arguments: _args
      });
    }
    builder2.destroy = destroy;
    function getAttestationCount(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::batch_price_attestation::get_attestation_count",
        arguments: _args
      });
    }
    builder2.getAttestationCount = getAttestationCount;
    function getPriceInfo(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::batch_price_attestation::get_price_info",
        arguments: _args
      });
    }
    builder2.getPriceInfo = getPriceInfo;
  })(builder = batch_price_attestation4.builder || (batch_price_attestation4.builder = {}));
  let view;
  ((view2) => {
    async function deserialize3(client, args) {
      const tx = new Transaction();
      builder.deserialize(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.deserialize = deserialize3;
    async function destroy(client, args) {
      const tx = new Transaction();
      builder.destroy(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.destroy = destroy;
    async function getAttestationCount(client, args) {
      const tx = new Transaction();
      builder.getAttestationCount(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getAttestationCount = getAttestationCount;
    async function getPriceInfo(client, args) {
      const tx = new Transaction();
      builder.getPriceInfo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getPriceInfo = getPriceInfo;
  })(view = batch_price_attestation4.view || (batch_price_attestation4.view = {}));
})(batch_price_attestation3 || (batch_price_attestation3 = {}));
var contract_upgrade4 = class _contract_upgrade extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("contract_upgrade", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _contract_upgrade({
      ..._contract_upgrade.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventContractUpgraded(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "contract_upgrade::ContractUpgraded" },
      fetchConfig
    );
    return this;
  }
};
((contract_upgrade5) => {
  let ContractUpgraded;
  ((ContractUpgraded2) => {
    ContractUpgraded2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::contract_upgrade::ContractUpgraded";
    const TYPE = new TypeDescriptor(
      ContractUpgraded2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    ContractUpgraded2.type = type;
  })(ContractUpgraded = contract_upgrade5.ContractUpgraded || (contract_upgrade5.ContractUpgraded = {}));
  let UpgradeContract;
  ((UpgradeContract2) => {
    UpgradeContract2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::contract_upgrade::UpgradeContract";
    const TYPE = new TypeDescriptor(
      UpgradeContract2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    UpgradeContract2.type = type;
  })(UpgradeContract = contract_upgrade5.UpgradeContract || (contract_upgrade5.UpgradeContract = {}));
  let builder;
  ((builder2) => {
    function authorizeGovernance(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::contract_upgrade::authorize_governance",
        arguments: _args
      });
    }
    builder2.authorizeGovernance = authorizeGovernance;
    function authorizeUpgrade(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::contract_upgrade::authorize_upgrade",
        arguments: _args
      });
    }
    builder2.authorizeUpgrade = authorizeUpgrade;
    function commitUpgrade(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::contract_upgrade::commit_upgrade",
        arguments: _args
      });
    }
    builder2.commitUpgrade = commitUpgrade;
    function takeDigest(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::contract_upgrade::take_digest",
        arguments: _args
      });
    }
    builder2.takeDigest = takeDigest;
  })(builder = contract_upgrade5.builder || (contract_upgrade5.builder = {}));
  let view;
  ((view2) => {
    async function authorizeGovernance(client, args) {
      const tx = new Transaction();
      builder.authorizeGovernance(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeGovernance = authorizeGovernance;
    async function authorizeUpgrade(client, args) {
      const tx = new Transaction();
      builder.authorizeUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeUpgrade = authorizeUpgrade;
    async function commitUpgrade(client, args) {
      const tx = new Transaction();
      builder.commitUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.commitUpgrade = commitUpgrade;
    async function takeDigest(client, args) {
      const tx = new Transaction();
      builder.takeDigest(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.takeDigest = takeDigest;
  })(view = contract_upgrade5.view || (contract_upgrade5.view = {}));
})(contract_upgrade4 || (contract_upgrade4 = {}));
var data_source3 = class _data_source extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("data_source", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _data_source({ ..._data_source.DEFAULT_OPTIONS, ...options });
  }
  onEventDataSource(func, fetchConfig) {
    this.onMoveEvent(func, { type: "data_source::DataSource" }, fetchConfig);
    return this;
  }
};
((data_source4) => {
  let DataSource;
  ((DataSource2) => {
    DataSource2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::data_source::DataSource";
    const TYPE = new TypeDescriptor(DataSource2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    DataSource2.type = type;
  })(DataSource = data_source4.DataSource || (data_source4.DataSource = {}));
  let builder;
  ((builder2) => {
    function add2(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::data_source::add",
        arguments: _args
      });
    }
    builder2.add = add2;
    function contains(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::data_source::contains",
        arguments: _args
      });
    }
    builder2.contains = contains;
    function emitterAddress(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::data_source::emitter_address",
        arguments: _args
      });
    }
    builder2.emitterAddress = emitterAddress;
    function emitterChain(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::data_source::emitter_chain",
        arguments: _args
      });
    }
    builder2.emitterChain = emitterChain;
    function empty(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::data_source::empty",
        arguments: _args
      });
    }
    builder2.empty = empty;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::data_source::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
    function newDataSourceRegistry(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::data_source::new_data_source_registry",
        arguments: _args
      });
    }
    builder2.newDataSourceRegistry = newDataSourceRegistry;
  })(builder = data_source4.builder || (data_source4.builder = {}));
  let view;
  ((view2) => {
    async function add2(client, args) {
      const tx = new Transaction();
      builder.add(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.add = add2;
    async function contains(client, args) {
      const tx = new Transaction();
      builder.contains(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.contains = contains;
    async function emitterAddress(client, args) {
      const tx = new Transaction();
      builder.emitterAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.emitterAddress = emitterAddress;
    async function emitterChain(client, args) {
      const tx = new Transaction();
      builder.emitterChain(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.emitterChain = emitterChain;
    async function empty(client, args) {
      const tx = new Transaction();
      builder.empty(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.empty = empty;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
    async function newDataSourceRegistry(client, args) {
      const tx = new Transaction();
      builder.newDataSourceRegistry(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.newDataSourceRegistry = newDataSourceRegistry;
  })(view = data_source4.view || (data_source4.view = {}));
})(data_source3 || (data_source3 = {}));
var deserialize2;
((deserialize3) => {
  let builder;
  ((builder2) => {
    function deserializeI32(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::deserialize::deserialize_i32",
        arguments: _args
      });
    }
    builder2.deserializeI32 = deserializeI32;
    function deserializeI64(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::deserialize::deserialize_i64",
        arguments: _args
      });
    }
    builder2.deserializeI64 = deserializeI64;
    function deserializeU16(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::deserialize::deserialize_u16",
        arguments: _args
      });
    }
    builder2.deserializeU16 = deserializeU16;
    function deserializeU32(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::deserialize::deserialize_u32",
        arguments: _args
      });
    }
    builder2.deserializeU32 = deserializeU32;
    function deserializeU64(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::deserialize::deserialize_u64",
        arguments: _args
      });
    }
    builder2.deserializeU64 = deserializeU64;
    function deserializeU8(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::deserialize::deserialize_u8",
        arguments: _args
      });
    }
    builder2.deserializeU8 = deserializeU8;
    function deserializeVector(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::deserialize::deserialize_vector",
        arguments: _args
      });
    }
    builder2.deserializeVector = deserializeVector;
  })(builder = deserialize3.builder || (deserialize3.builder = {}));
  let view;
  ((view2) => {
    async function deserializeI32(client, args) {
      const tx = new Transaction();
      builder.deserializeI32(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deserializeI32 = deserializeI32;
    async function deserializeI64(client, args) {
      const tx = new Transaction();
      builder.deserializeI64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deserializeI64 = deserializeI64;
    async function deserializeU16(client, args) {
      const tx = new Transaction();
      builder.deserializeU16(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deserializeU16 = deserializeU16;
    async function deserializeU32(client, args) {
      const tx = new Transaction();
      builder.deserializeU32(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deserializeU32 = deserializeU32;
    async function deserializeU64(client, args) {
      const tx = new Transaction();
      builder.deserializeU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deserializeU64 = deserializeU64;
    async function deserializeU8(client, args) {
      const tx = new Transaction();
      builder.deserializeU8(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deserializeU8 = deserializeU8;
    async function deserializeVector(client, args) {
      const tx = new Transaction();
      builder.deserializeVector(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.deserializeVector = deserializeVector;
  })(view = deserialize3.view || (deserialize3.view = {}));
})(deserialize2 || (deserialize2 = {}));
var event3 = class _event extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("event", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _event({ ..._event.DEFAULT_OPTIONS, ...options });
  }
  onEventPriceFeedUpdateEvent(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "event::PriceFeedUpdateEvent" },
      fetchConfig
    );
    return this;
  }
  onEventPythInitializationEvent(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "event::PythInitializationEvent" },
      fetchConfig
    );
    return this;
  }
};
((event4) => {
  let PriceFeedUpdateEvent2;
  ((PriceFeedUpdateEvent3) => {
    PriceFeedUpdateEvent3.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::event::PriceFeedUpdateEvent";
    const TYPE = new TypeDescriptor(
      PriceFeedUpdateEvent3.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    PriceFeedUpdateEvent3.type = type;
  })(PriceFeedUpdateEvent2 = event4.PriceFeedUpdateEvent || (event4.PriceFeedUpdateEvent = {}));
  let PythInitializationEvent;
  ((PythInitializationEvent2) => {
    PythInitializationEvent2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::event::PythInitializationEvent";
    const TYPE = new TypeDescriptor(
      PythInitializationEvent2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    PythInitializationEvent2.type = type;
  })(PythInitializationEvent = event4.PythInitializationEvent || (event4.PythInitializationEvent = {}));
  let builder;
  ((builder2) => {
    function emitPriceFeedUpdate(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::event::emit_price_feed_update",
        arguments: _args
      });
    }
    builder2.emitPriceFeedUpdate = emitPriceFeedUpdate;
    function emitPythInitializationEvent(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::event::emit_pyth_initialization_event",
        arguments: _args
      });
    }
    builder2.emitPythInitializationEvent = emitPythInitializationEvent;
  })(builder = event4.builder || (event4.builder = {}));
  let view;
  ((view2) => {
    async function emitPriceFeedUpdate(client, args) {
      const tx = new Transaction();
      builder.emitPriceFeedUpdate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.emitPriceFeedUpdate = emitPriceFeedUpdate;
    async function emitPythInitializationEvent(client, args) {
      const tx = new Transaction();
      builder.emitPythInitializationEvent(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.emitPythInitializationEvent = emitPythInitializationEvent;
  })(view = event4.view || (event4.view = {}));
})(event3 || (event3 = {}));
var governance3;
((governance4) => {
  let builder;
  ((builder2) => {
    function executeGovernanceInstruction(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance::execute_governance_instruction",
        arguments: _args
      });
    }
    builder2.executeGovernanceInstruction = executeGovernanceInstruction;
  })(builder = governance4.builder || (governance4.builder = {}));
  let view;
  ((view2) => {
    async function executeGovernanceInstruction(client, args) {
      const tx = new Transaction();
      builder.executeGovernanceInstruction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.executeGovernanceInstruction = executeGovernanceInstruction;
  })(view = governance4.view || (governance4.view = {}));
})(governance3 || (governance3 = {}));
var governance_action3 = class _governance_action extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("governance_action", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _governance_action({
      ..._governance_action.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventGovernanceAction(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "governance_action::GovernanceAction" },
      fetchConfig
    );
    return this;
  }
};
((governance_action4) => {
  let GovernanceAction;
  ((GovernanceAction2) => {
    GovernanceAction2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_action::GovernanceAction";
    const TYPE = new TypeDescriptor(
      GovernanceAction2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GovernanceAction2.type = type;
  })(GovernanceAction = governance_action4.GovernanceAction || (governance_action4.GovernanceAction = {}));
  let builder;
  ((builder2) => {
    function fromU8(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU8(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_action::from_u8",
        arguments: _args
      });
    }
    builder2.fromU8 = fromU8;
    function getValue2(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_action::get_value",
        arguments: _args
      });
    }
    builder2.getValue = getValue2;
    function newContractUpgrade(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_action::new_contract_upgrade",
        arguments: _args
      });
    }
    builder2.newContractUpgrade = newContractUpgrade;
    function newSetDataSources(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_action::new_set_data_sources",
        arguments: _args
      });
    }
    builder2.newSetDataSources = newSetDataSources;
    function newSetFeeRecipient(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_action::new_set_fee_recipient",
        arguments: _args
      });
    }
    builder2.newSetFeeRecipient = newSetFeeRecipient;
    function newSetGovernanceDataSource(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_action::new_set_governance_data_source",
        arguments: _args
      });
    }
    builder2.newSetGovernanceDataSource = newSetGovernanceDataSource;
    function newSetStalePriceThreshold(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_action::new_set_stale_price_threshold",
        arguments: _args
      });
    }
    builder2.newSetStalePriceThreshold = newSetStalePriceThreshold;
    function newSetUpdateFee(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_action::new_set_update_fee",
        arguments: _args
      });
    }
    builder2.newSetUpdateFee = newSetUpdateFee;
  })(builder = governance_action4.builder || (governance_action4.builder = {}));
  let view;
  ((view2) => {
    async function fromU8(client, args) {
      const tx = new Transaction();
      builder.fromU8(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromU8 = fromU8;
    async function getValue2(client, args) {
      const tx = new Transaction();
      builder.getValue(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getValue = getValue2;
    async function newContractUpgrade(client, args) {
      const tx = new Transaction();
      builder.newContractUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newContractUpgrade = newContractUpgrade;
    async function newSetDataSources(client, args) {
      const tx = new Transaction();
      builder.newSetDataSources(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newSetDataSources = newSetDataSources;
    async function newSetFeeRecipient(client, args) {
      const tx = new Transaction();
      builder.newSetFeeRecipient(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newSetFeeRecipient = newSetFeeRecipient;
    async function newSetGovernanceDataSource(client, args) {
      const tx = new Transaction();
      builder.newSetGovernanceDataSource(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newSetGovernanceDataSource = newSetGovernanceDataSource;
    async function newSetStalePriceThreshold(client, args) {
      const tx = new Transaction();
      builder.newSetStalePriceThreshold(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newSetStalePriceThreshold = newSetStalePriceThreshold;
    async function newSetUpdateFee(client, args) {
      const tx = new Transaction();
      builder.newSetUpdateFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newSetUpdateFee = newSetUpdateFee;
  })(view = governance_action4.view || (governance_action4.view = {}));
})(governance_action3 || (governance_action3 = {}));
var governance_instruction3;
((governance_instruction4) => {
  let GovernanceInstruction;
  ((GovernanceInstruction2) => {
    GovernanceInstruction2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_instruction::GovernanceInstruction";
    const TYPE = new TypeDescriptor(
      GovernanceInstruction2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GovernanceInstruction2.type = type;
  })(GovernanceInstruction = governance_instruction4.GovernanceInstruction || (governance_instruction4.GovernanceInstruction = {}));
  let builder;
  ((builder2) => {
    function destroy(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_instruction::destroy",
        arguments: _args
      });
    }
    builder2.destroy = destroy;
    function fromByteVec(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_instruction::from_byte_vec",
        arguments: _args
      });
    }
    builder2.fromByteVec = fromByteVec;
    function getAction(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_instruction::get_action",
        arguments: _args
      });
    }
    builder2.getAction = getAction;
    function getModule(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_instruction::get_module",
        arguments: _args
      });
    }
    builder2.getModule = getModule;
    function getTargetChainId(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_instruction::get_target_chain_id",
        arguments: _args
      });
    }
    builder2.getTargetChainId = getTargetChainId;
  })(builder = governance_instruction4.builder || (governance_instruction4.builder = {}));
  let view;
  ((view2) => {
    async function destroy(client, args) {
      const tx = new Transaction();
      builder.destroy(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.destroy = destroy;
    async function fromByteVec(client, args) {
      const tx = new Transaction();
      builder.fromByteVec(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromByteVec = fromByteVec;
    async function getAction(client, args) {
      const tx = new Transaction();
      builder.getAction(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.getAction = getAction;
    async function getModule(client, args) {
      const tx = new Transaction();
      builder.getModule(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getModule = getModule;
    async function getTargetChainId(client, args) {
      const tx = new Transaction();
      builder.getTargetChainId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getTargetChainId = getTargetChainId;
  })(view = governance_instruction4.view || (governance_instruction4.view = {}));
})(governance_instruction3 || (governance_instruction3 = {}));
var governance_witness;
((governance_witness2) => {
  let GovernanceWitness;
  ((GovernanceWitness2) => {
    GovernanceWitness2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_witness::GovernanceWitness";
    const TYPE = new TypeDescriptor(
      GovernanceWitness2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GovernanceWitness2.type = type;
  })(GovernanceWitness = governance_witness2.GovernanceWitness || (governance_witness2.GovernanceWitness = {}));
  let builder;
  ((builder2) => {
    function newGovernanceWitness(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::governance_witness::new_governance_witness",
        arguments: _args
      });
    }
    builder2.newGovernanceWitness = newGovernanceWitness;
  })(builder = governance_witness2.builder || (governance_witness2.builder = {}));
  let view;
  ((view2) => {
    async function newGovernanceWitness(client, args) {
      const tx = new Transaction();
      builder.newGovernanceWitness(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newGovernanceWitness = newGovernanceWitness;
  })(view = governance_witness2.view || (governance_witness2.view = {}));
})(governance_witness || (governance_witness = {}));
var hot_potato_vector2;
((hot_potato_vector3) => {
  let HotPotatoVector;
  ((HotPotatoVector2) => {
    HotPotatoVector2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::hot_potato_vector::HotPotatoVector";
    const TYPE = new TypeDescriptor(
      HotPotatoVector2.TYPE_QNAME
    );
    function type(arg0 = ANY_TYPE) {
      return TYPE.apply(arg0);
    }
    HotPotatoVector2.type = type;
  })(HotPotatoVector = hot_potato_vector3.HotPotatoVector || (hot_potato_vector3.HotPotatoVector = {}));
  let builder;
  ((builder2) => {
    function borrow(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::hot_potato_vector::borrow",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.borrow = borrow;
    function destroy(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::hot_potato_vector::destroy",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.destroy = destroy;
    function isEmpty(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::hot_potato_vector::is_empty",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.isEmpty = isEmpty;
    function length(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::hot_potato_vector::length",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.length = length;
    function new_(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::hot_potato_vector::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.new_ = new_;
    function popBack(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::hot_potato_vector::pop_back",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.popBack = popBack;
  })(builder = hot_potato_vector3.builder || (hot_potato_vector3.builder = {}));
  let view;
  ((view2) => {
    async function borrow(client, args, typeArguments) {
      const tx = new Transaction();
      builder.borrow(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.borrow = borrow;
    async function destroy(client, args, typeArguments) {
      const tx = new Transaction();
      builder.destroy(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.destroy = destroy;
    async function isEmpty(client, args, typeArguments) {
      const tx = new Transaction();
      builder.isEmpty(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.isEmpty = isEmpty;
    async function length(client, args, typeArguments) {
      const tx = new Transaction();
      builder.length(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.length = length;
    async function new_(client, args, typeArguments) {
      const tx = new Transaction();
      builder.new_(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
    async function popBack(client, args, typeArguments) {
      const tx = new Transaction();
      builder.popBack(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.popBack = popBack;
  })(view = hot_potato_vector3.view || (hot_potato_vector3.view = {}));
})(hot_potato_vector2 || (hot_potato_vector2 = {}));
var i643 = class _i64 extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("i64", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _i64({ ..._i64.DEFAULT_OPTIONS, ...options });
  }
  onEventI64(func, fetchConfig) {
    this.onMoveEvent(func, { type: "i64::I64" }, fetchConfig);
    return this;
  }
};
((i644) => {
  let I64;
  ((I642) => {
    I642.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::i64::I64";
    const TYPE = new TypeDescriptor(I642.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    I642.type = type;
  })(I64 = i644.I64 || (i644.I64 = {}));
  let builder;
  ((builder2) => {
    function fromU64(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::i64::from_u64",
        arguments: _args
      });
    }
    builder2.fromU64 = fromU64;
    function getIsNegative(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::i64::get_is_negative",
        arguments: _args
      });
    }
    builder2.getIsNegative = getIsNegative;
    function getMagnitudeIfNegative(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::i64::get_magnitude_if_negative",
        arguments: _args
      });
    }
    builder2.getMagnitudeIfNegative = getMagnitudeIfNegative;
    function getMagnitudeIfPositive(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::i64::get_magnitude_if_positive",
        arguments: _args
      });
    }
    builder2.getMagnitudeIfPositive = getMagnitudeIfPositive;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureBool(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::i64::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
  })(builder = i644.builder || (i644.builder = {}));
  let view;
  ((view2) => {
    async function fromU64(client, args) {
      const tx = new Transaction();
      builder.fromU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.fromU64 = fromU64;
    async function getIsNegative(client, args) {
      const tx = new Transaction();
      builder.getIsNegative(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getIsNegative = getIsNegative;
    async function getMagnitudeIfNegative(client, args) {
      const tx = new Transaction();
      builder.getMagnitudeIfNegative(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getMagnitudeIfNegative = getMagnitudeIfNegative;
    async function getMagnitudeIfPositive(client, args) {
      const tx = new Transaction();
      builder.getMagnitudeIfPositive(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getMagnitudeIfPositive = getMagnitudeIfPositive;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.new_ = new_;
  })(view = i644.view || (i644.view = {}));
})(i643 || (i643 = {}));
var migrate3 = class _migrate extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("migrate", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _migrate({ ..._migrate.DEFAULT_OPTIONS, ...options });
  }
  onEventMigrateComplete(func, fetchConfig) {
    this.onMoveEvent(func, { type: "migrate::MigrateComplete" }, fetchConfig);
    return this;
  }
};
((migrate4) => {
  let MigrateComplete;
  ((MigrateComplete2) => {
    MigrateComplete2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::migrate::MigrateComplete";
    const TYPE = new TypeDescriptor(
      MigrateComplete2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    MigrateComplete2.type = type;
  })(MigrateComplete = migrate4.MigrateComplete || (migrate4.MigrateComplete = {}));
  let builder;
  ((builder2) => {
    function migrate5(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::migrate::migrate",
        arguments: _args
      });
    }
    builder2.migrate = migrate5;
  })(builder = migrate4.builder || (migrate4.builder = {}));
  let view;
  ((view2) => {
    async function migrate5(client, args) {
      const tx = new Transaction();
      builder.migrate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.migrate = migrate5;
  })(view = migrate4.view || (migrate4.view = {}));
})(migrate3 || (migrate3 = {}));
var price4 = class _price extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("price", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price({ ..._price.DEFAULT_OPTIONS, ...options });
  }
  onEventPrice(func, fetchConfig) {
    this.onMoveEvent(func, { type: "price::Price" }, fetchConfig);
    return this;
  }
};
((price6) => {
  let Price;
  ((Price2) => {
    Price2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price::Price";
    const TYPE = new TypeDescriptor(Price2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Price2.type = type;
  })(Price = price6.Price || (price6.Price = {}));
  let builder;
  ((builder2) => {
    function getConf(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price::get_conf",
        arguments: _args
      });
    }
    builder2.getConf = getConf;
    function getExpo(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price::get_expo",
        arguments: _args
      });
    }
    builder2.getExpo = getExpo;
    function getPrice3(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price::get_price",
        arguments: _args
      });
    }
    builder2.getPrice = getPrice3;
    function getTimestamp(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price::get_timestamp",
        arguments: _args
      });
    }
    builder2.getTimestamp = getTimestamp;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
  })(builder = price6.builder || (price6.builder = {}));
  let view;
  ((view2) => {
    async function getConf(client, args) {
      const tx = new Transaction();
      builder.getConf(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getConf = getConf;
    async function getExpo(client, args) {
      const tx = new Transaction();
      builder.getExpo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getExpo = getExpo;
    async function getPrice3(client, args) {
      const tx = new Transaction();
      builder.getPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getPrice = getPrice3;
    async function getTimestamp(client, args) {
      const tx = new Transaction();
      builder.getTimestamp(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getTimestamp = getTimestamp;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.new_ = new_;
  })(view = price6.view || (price6.view = {}));
})(price4 || (price4 = {}));
var price_feed3 = class _price_feed extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("price_feed", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price_feed({ ..._price_feed.DEFAULT_OPTIONS, ...options });
  }
  onEventPriceFeed(func, fetchConfig) {
    this.onMoveEvent(func, { type: "price_feed::PriceFeed" }, fetchConfig);
    return this;
  }
};
((price_feed4) => {
  let PriceFeed;
  ((PriceFeed2) => {
    PriceFeed2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_feed::PriceFeed";
    const TYPE = new TypeDescriptor(PriceFeed2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    PriceFeed2.type = type;
  })(PriceFeed = price_feed4.PriceFeed || (price_feed4.PriceFeed = {}));
  let builder;
  ((builder2) => {
    function from(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_feed::from",
        arguments: _args
      });
    }
    builder2.from = from;
    function getEmaPrice(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_feed::get_ema_price",
        arguments: _args
      });
    }
    builder2.getEmaPrice = getEmaPrice;
    function getPrice3(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_feed::get_price",
        arguments: _args
      });
    }
    builder2.getPrice = getPrice3;
    function getPriceIdentifier(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_feed::get_price_identifier",
        arguments: _args
      });
    }
    builder2.getPriceIdentifier = getPriceIdentifier;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_feed::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
  })(builder = price_feed4.builder || (price_feed4.builder = {}));
  let view;
  ((view2) => {
    async function from(client, args) {
      const tx = new Transaction();
      builder.from(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.from = from;
    async function getEmaPrice(client, args) {
      const tx = new Transaction();
      builder.getEmaPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getEmaPrice = getEmaPrice;
    async function getPrice3(client, args) {
      const tx = new Transaction();
      builder.getPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getPrice = getPrice3;
    async function getPriceIdentifier(client, args) {
      const tx = new Transaction();
      builder.getPriceIdentifier(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.getPriceIdentifier = getPriceIdentifier;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.new_ = new_;
  })(view = price_feed4.view || (price_feed4.view = {}));
})(price_feed3 || (price_feed3 = {}));
var price_identifier3 = class _price_identifier extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("price_identifier", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price_identifier({
      ..._price_identifier.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventPriceIdentifier(func, fetchConfig) {
    this.onMoveEvent(
      func,
      { type: "price_identifier::PriceIdentifier" },
      fetchConfig
    );
    return this;
  }
};
((price_identifier4) => {
  let PriceIdentifier;
  ((PriceIdentifier2) => {
    PriceIdentifier2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_identifier::PriceIdentifier";
    const TYPE = new TypeDescriptor(
      PriceIdentifier2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    PriceIdentifier2.type = type;
  })(PriceIdentifier = price_identifier4.PriceIdentifier || (price_identifier4.PriceIdentifier = {}));
  let builder;
  ((builder2) => {
    function fromByteVec(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_identifier::from_byte_vec",
        arguments: _args
      });
    }
    builder2.fromByteVec = fromByteVec;
    function getBytes2(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_identifier::get_bytes",
        arguments: _args
      });
    }
    builder2.getBytes = getBytes2;
  })(builder = price_identifier4.builder || (price_identifier4.builder = {}));
  let view;
  ((view2) => {
    async function fromByteVec(client, args) {
      const tx = new Transaction();
      builder.fromByteVec(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromByteVec = fromByteVec;
    async function getBytes2(client, args) {
      const tx = new Transaction();
      builder.getBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getBytes = getBytes2;
  })(view = price_identifier4.view || (price_identifier4.view = {}));
})(price_identifier3 || (price_identifier3 = {}));
var price_info3 = class _price_info extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("price_info", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price_info({ ..._price_info.DEFAULT_OPTIONS, ...options });
  }
  onEventPriceInfo(func, fetchConfig) {
    this.onMoveEvent(func, { type: "price_info::PriceInfo" }, fetchConfig);
    return this;
  }
};
((price_info4) => {
  let PriceInfo;
  ((PriceInfo2) => {
    PriceInfo2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::PriceInfo";
    const TYPE = new TypeDescriptor(PriceInfo2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    PriceInfo2.type = type;
  })(PriceInfo = price_info4.PriceInfo || (price_info4.PriceInfo = {}));
  let PriceInfoObject;
  ((PriceInfoObject2) => {
    PriceInfoObject2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::PriceInfoObject";
    const TYPE = new TypeDescriptor(
      PriceInfoObject2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    PriceInfoObject2.type = type;
  })(PriceInfoObject = price_info4.PriceInfoObject || (price_info4.PriceInfoObject = {}));
  let builder;
  ((builder2) => {
    function add2(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::add",
        arguments: _args
      });
    }
    builder2.add = add2;
    function contains(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::contains",
        arguments: _args
      });
    }
    builder2.contains = contains;
    function getArrivalTime(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::get_arrival_time",
        arguments: _args
      });
    }
    builder2.getArrivalTime = getArrivalTime;
    function getAttestationTime(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::get_attestation_time",
        arguments: _args
      });
    }
    builder2.getAttestationTime = getAttestationTime;
    function getId(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::get_id",
        arguments: _args
      });
    }
    builder2.getId = getId;
    function getIdBytes(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::get_id_bytes",
        arguments: _args
      });
    }
    builder2.getIdBytes = getIdBytes;
    function getPriceFeed(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::get_price_feed",
        arguments: _args
      });
    }
    builder2.getPriceFeed = getPriceFeed;
    function getPriceIdentifier(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::get_price_identifier",
        arguments: _args
      });
    }
    builder2.getPriceIdentifier = getPriceIdentifier;
    function getPriceInfoFromPriceInfoObject(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::get_price_info_from_price_info_object",
        arguments: _args
      });
    }
    builder2.getPriceInfoFromPriceInfoObject = getPriceInfoFromPriceInfoObject;
    function newPriceInfo(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::new_price_info",
        arguments: _args
      });
    }
    builder2.newPriceInfo = newPriceInfo;
    function newPriceInfoObject(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::new_price_info_object",
        arguments: _args
      });
    }
    builder2.newPriceInfoObject = newPriceInfoObject;
    function newPriceInfoRegistry(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::new_price_info_registry",
        arguments: _args
      });
    }
    builder2.newPriceInfoRegistry = newPriceInfoRegistry;
    function uidToInner(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::uid_to_inner",
        arguments: _args
      });
    }
    builder2.uidToInner = uidToInner;
    function updatePriceInfoObject(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_info::update_price_info_object",
        arguments: _args
      });
    }
    builder2.updatePriceInfoObject = updatePriceInfoObject;
  })(builder = price_info4.builder || (price_info4.builder = {}));
  let view;
  ((view2) => {
    async function add2(client, args) {
      const tx = new Transaction();
      builder.add(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.add = add2;
    async function contains(client, args) {
      const tx = new Transaction();
      builder.contains(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.contains = contains;
    async function getArrivalTime(client, args) {
      const tx = new Transaction();
      builder.getArrivalTime(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getArrivalTime = getArrivalTime;
    async function getAttestationTime(client, args) {
      const tx = new Transaction();
      builder.getAttestationTime(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getAttestationTime = getAttestationTime;
    async function getId(client, args) {
      const tx = new Transaction();
      builder.getId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.getId = getId;
    async function getIdBytes(client, args) {
      const tx = new Transaction();
      builder.getIdBytes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getIdBytes = getIdBytes;
    async function getPriceFeed(client, args) {
      const tx = new Transaction();
      builder.getPriceFeed(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getPriceFeed = getPriceFeed;
    async function getPriceIdentifier(client, args) {
      const tx = new Transaction();
      builder.getPriceIdentifier(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.getPriceIdentifier = getPriceIdentifier;
    async function getPriceInfoFromPriceInfoObject(client, args) {
      const tx = new Transaction();
      builder.getPriceInfoFromPriceInfoObject(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.getPriceInfoFromPriceInfoObject = getPriceInfoFromPriceInfoObject;
    async function newPriceInfo(client, args) {
      const tx = new Transaction();
      builder.newPriceInfo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newPriceInfo = newPriceInfo;
    async function newPriceInfoObject(client, args) {
      const tx = new Transaction();
      builder.newPriceInfoObject(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newPriceInfoObject = newPriceInfoObject;
    async function newPriceInfoRegistry(client, args) {
      const tx = new Transaction();
      builder.newPriceInfoRegistry(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.newPriceInfoRegistry = newPriceInfoRegistry;
    async function uidToInner(client, args) {
      const tx = new Transaction();
      builder.uidToInner(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.uidToInner = uidToInner;
    async function updatePriceInfoObject(client, args) {
      const tx = new Transaction();
      builder.updatePriceInfoObject(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.updatePriceInfoObject = updatePriceInfoObject;
  })(view = price_info4.view || (price_info4.view = {}));
})(price_info3 || (price_info3 = {}));
var price_status3 = class _price_status extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("price_status", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _price_status({ ..._price_status.DEFAULT_OPTIONS, ...options });
  }
  onEventPriceStatus(func, fetchConfig) {
    this.onMoveEvent(func, { type: "price_status::PriceStatus" }, fetchConfig);
    return this;
  }
};
((price_status4) => {
  let PriceStatus;
  ((PriceStatus2) => {
    PriceStatus2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_status::PriceStatus";
    const TYPE = new TypeDescriptor(PriceStatus2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    PriceStatus2.type = type;
  })(PriceStatus = price_status4.PriceStatus || (price_status4.PriceStatus = {}));
  let builder;
  ((builder2) => {
    function fromU64(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_status::from_u64",
        arguments: _args
      });
    }
    builder2.fromU64 = fromU64;
    function getStatus(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_status::get_status",
        arguments: _args
      });
    }
    builder2.getStatus = getStatus;
    function newTrading(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_status::new_trading",
        arguments: _args
      });
    }
    builder2.newTrading = newTrading;
    function newUnknown(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::price_status::new_unknown",
        arguments: _args
      });
    }
    builder2.newUnknown = newUnknown;
  })(builder = price_status4.builder || (price_status4.builder = {}));
  let view;
  ((view2) => {
    async function fromU64(client, args) {
      const tx = new Transaction();
      builder.fromU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.fromU64 = fromU64;
    async function getStatus(client, args) {
      const tx = new Transaction();
      builder.getStatus(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getStatus = getStatus;
    async function newTrading(client, args) {
      const tx = new Transaction();
      builder.newTrading(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newTrading = newTrading;
    async function newUnknown(client, args) {
      const tx = new Transaction();
      builder.newUnknown(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.newUnknown = newUnknown;
  })(view = price_status4.view || (price_status4.view = {}));
})(price_status3 || (price_status3 = {}));
var pyth4 = class _pyth extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("pyth", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _pyth({ ..._pyth.DEFAULT_OPTIONS, ...options });
  }
  onEntryInitPyth(func, filter, fetchConfig) {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pyth::init_pyth"
      },
      fetchConfig
    );
    return this;
  }
};
((pyth5) => {
  let builder;
  ((builder2) => {
    function createPriceFeeds(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::pyth::create_price_feeds",
        arguments: _args
      });
    }
    builder2.createPriceFeeds = createPriceFeeds;
    function createPriceInfosHotPotato(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::pyth::create_price_infos_hot_potato",
        arguments: _args
      });
    }
    builder2.createPriceInfosHotPotato = createPriceInfosHotPotato;
    function getPrice3(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::pyth::get_price",
        arguments: _args
      });
    }
    builder2.getPrice = getPrice3;
    function getPriceNoOlderThan(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::pyth::get_price_no_older_than",
        arguments: _args
      });
    }
    builder2.getPriceNoOlderThan = getPriceNoOlderThan;
    function getPriceUnsafe(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::pyth::get_price_unsafe",
        arguments: _args
      });
    }
    builder2.getPriceUnsafe = getPriceUnsafe;
    function getStalePriceThresholdSecs(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::pyth::get_stale_price_threshold_secs",
        arguments: _args
      });
    }
    builder2.getStalePriceThresholdSecs = getStalePriceThresholdSecs;
    function getTotalUpdateFee(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::pyth::get_total_update_fee",
        arguments: _args
      });
    }
    builder2.getTotalUpdateFee = getTotalUpdateFee;
    function initPyth(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrPureU64(args[7], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::pyth::init_pyth",
        arguments: _args
      });
    }
    builder2.initPyth = initPyth;
    function priceFeedExists(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::pyth::price_feed_exists",
        arguments: _args
      });
    }
    builder2.priceFeedExists = priceFeedExists;
    function updateCache(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::pyth::update_cache",
        arguments: _args
      });
    }
    builder2.updateCache = updateCache;
    function updateSinglePriceFeed(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::pyth::update_single_price_feed",
        arguments: _args
      });
    }
    builder2.updateSinglePriceFeed = updateSinglePriceFeed;
  })(builder = pyth5.builder || (pyth5.builder = {}));
  let view;
  ((view2) => {
    async function createPriceFeeds(client, args) {
      const tx = new Transaction();
      builder.createPriceFeeds(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.createPriceFeeds = createPriceFeeds;
    async function createPriceInfosHotPotato(client, args) {
      const tx = new Transaction();
      builder.createPriceInfosHotPotato(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.createPriceInfosHotPotato = createPriceInfosHotPotato;
    async function getPrice3(client, args) {
      const tx = new Transaction();
      builder.getPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getPrice = getPrice3;
    async function getPriceNoOlderThan(client, args) {
      const tx = new Transaction();
      builder.getPriceNoOlderThan(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getPriceNoOlderThan = getPriceNoOlderThan;
    async function getPriceUnsafe(client, args) {
      const tx = new Transaction();
      builder.getPriceUnsafe(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getPriceUnsafe = getPriceUnsafe;
    async function getStalePriceThresholdSecs(client, args) {
      const tx = new Transaction();
      builder.getStalePriceThresholdSecs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getStalePriceThresholdSecs = getStalePriceThresholdSecs;
    async function getTotalUpdateFee(client, args) {
      const tx = new Transaction();
      builder.getTotalUpdateFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getTotalUpdateFee = getTotalUpdateFee;
    async function initPyth(client, args) {
      const tx = new Transaction();
      builder.initPyth(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.initPyth = initPyth;
    async function priceFeedExists(client, args) {
      const tx = new Transaction();
      builder.priceFeedExists(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.priceFeedExists = priceFeedExists;
    async function updateCache(client, args) {
      const tx = new Transaction();
      builder.updateCache(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.updateCache = updateCache;
    async function updateSinglePriceFeed(client, args) {
      const tx = new Transaction();
      builder.updateSinglePriceFeed(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.updateSinglePriceFeed = updateSinglePriceFeed;
  })(view = pyth5.view || (pyth5.view = {}));
})(pyth4 || (pyth4 = {}));
var set5 = class _set extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("set", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _set({ ..._set.DEFAULT_OPTIONS, ...options });
  }
  onEventUnit(func, fetchConfig) {
    this.onMoveEvent(func, { type: "set::Unit" }, fetchConfig);
    return this;
  }
};
((set6) => {
  let Set2;
  ((Set3) => {
    Set3.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set::Set";
    const TYPE = new TypeDescriptor(Set3.TYPE_QNAME);
    function type(arg0 = ANY_TYPE) {
      return TYPE.apply(arg0);
    }
    Set3.type = type;
  })(Set2 = set6.Set || (set6.Set = {}));
  let Unit;
  ((Unit2) => {
    Unit2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set::Unit";
    const TYPE = new TypeDescriptor(Unit2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    Unit2.type = type;
  })(Unit = set6.Unit || (set6.Unit = {}));
  let builder;
  ((builder2) => {
    function add2(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set::add",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.add = add2;
    function contains(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set::contains",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.contains = contains;
    function empty(tx, args, typeArguments) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set::empty",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.empty = empty;
    function new_(tx, args, typeArguments) {
      const _args = [];
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string" ? typeArguments[0] : typeArguments[0].getSignature()
        ]
      });
    }
    builder2.new_ = new_;
  })(builder = set6.builder || (set6.builder = {}));
  let view;
  ((view2) => {
    async function add2(client, args, typeArguments) {
      const tx = new Transaction();
      builder.add(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.add = add2;
    async function contains(client, args, typeArguments) {
      const tx = new Transaction();
      builder.contains(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.contains = contains;
    async function empty(client, args, typeArguments) {
      const tx = new Transaction();
      builder.empty(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.empty = empty;
    async function new_(client, args, typeArguments) {
      const tx = new Transaction();
      builder.new_(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.new_ = new_;
  })(view = set6.view || (set6.view = {}));
})(set5 || (set5 = {}));
var set_data_sources3;
((set_data_sources4) => {
  let DataSources;
  ((DataSources2) => {
    DataSources2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_data_sources::DataSources";
    const TYPE = new TypeDescriptor(DataSources2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    DataSources2.type = type;
  })(DataSources = set_data_sources4.DataSources || (set_data_sources4.DataSources = {}));
  let builder;
  ((builder2) => {
    function authorizeGovernance(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureBool(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_data_sources::authorize_governance",
        arguments: _args
      });
    }
    builder2.authorizeGovernance = authorizeGovernance;
    function execute(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_data_sources::execute",
        arguments: _args
      });
    }
    builder2.execute = execute;
  })(builder = set_data_sources4.builder || (set_data_sources4.builder = {}));
  let view;
  ((view2) => {
    async function authorizeGovernance(client, args) {
      const tx = new Transaction();
      builder.authorizeGovernance(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeGovernance = authorizeGovernance;
    async function execute(client, args) {
      const tx = new Transaction();
      builder.execute(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.execute = execute;
  })(view = set_data_sources4.view || (set_data_sources4.view = {}));
})(set_data_sources3 || (set_data_sources3 = {}));
var set_fee_recipient2;
((set_fee_recipient3) => {
  let PythFeeRecipient;
  ((PythFeeRecipient2) => {
    PythFeeRecipient2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_fee_recipient::PythFeeRecipient";
    const TYPE = new TypeDescriptor(
      PythFeeRecipient2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    PythFeeRecipient2.type = type;
  })(PythFeeRecipient = set_fee_recipient3.PythFeeRecipient || (set_fee_recipient3.PythFeeRecipient = {}));
  let builder;
  ((builder2) => {
    function authorizeGovernance(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_fee_recipient::authorize_governance",
        arguments: _args
      });
    }
    builder2.authorizeGovernance = authorizeGovernance;
    function execute(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_fee_recipient::execute",
        arguments: _args
      });
    }
    builder2.execute = execute;
  })(builder = set_fee_recipient3.builder || (set_fee_recipient3.builder = {}));
  let view;
  ((view2) => {
    async function authorizeGovernance(client, args) {
      const tx = new Transaction();
      builder.authorizeGovernance(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeGovernance = authorizeGovernance;
    async function execute(client, args) {
      const tx = new Transaction();
      builder.execute(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.execute = execute;
  })(view = set_fee_recipient3.view || (set_fee_recipient3.view = {}));
})(set_fee_recipient2 || (set_fee_recipient2 = {}));
var set_governance_data_source3;
((set_governance_data_source4) => {
  let GovernanceDataSource;
  ((GovernanceDataSource2) => {
    GovernanceDataSource2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_governance_data_source::GovernanceDataSource";
    const TYPE = new TypeDescriptor(
      GovernanceDataSource2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    GovernanceDataSource2.type = type;
  })(GovernanceDataSource = set_governance_data_source4.GovernanceDataSource || (set_governance_data_source4.GovernanceDataSource = {}));
  let builder;
  ((builder2) => {
    function authorizeGovernance(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureBool(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_governance_data_source::authorize_governance",
        arguments: _args
      });
    }
    builder2.authorizeGovernance = authorizeGovernance;
    function execute(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_governance_data_source::execute",
        arguments: _args
      });
    }
    builder2.execute = execute;
  })(builder = set_governance_data_source4.builder || (set_governance_data_source4.builder = {}));
  let view;
  ((view2) => {
    async function authorizeGovernance(client, args) {
      const tx = new Transaction();
      builder.authorizeGovernance(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeGovernance = authorizeGovernance;
    async function execute(client, args) {
      const tx = new Transaction();
      builder.execute(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.execute = execute;
  })(view = set_governance_data_source4.view || (set_governance_data_source4.view = {}));
})(set_governance_data_source3 || (set_governance_data_source3 = {}));
var set_stale_price_threshold3;
((set_stale_price_threshold4) => {
  let StalePriceThreshold;
  ((StalePriceThreshold2) => {
    StalePriceThreshold2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_stale_price_threshold::StalePriceThreshold";
    const TYPE = new TypeDescriptor(
      StalePriceThreshold2.TYPE_QNAME
    );
    function type() {
      return TYPE.apply();
    }
    StalePriceThreshold2.type = type;
  })(StalePriceThreshold = set_stale_price_threshold4.StalePriceThreshold || (set_stale_price_threshold4.StalePriceThreshold = {}));
  let builder;
  ((builder2) => {
    function authorizeGovernance(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureBool(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_stale_price_threshold::authorize_governance",
        arguments: _args
      });
    }
    builder2.authorizeGovernance = authorizeGovernance;
    function execute(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_stale_price_threshold::execute",
        arguments: _args
      });
    }
    builder2.execute = execute;
  })(builder = set_stale_price_threshold4.builder || (set_stale_price_threshold4.builder = {}));
  let view;
  ((view2) => {
    async function authorizeGovernance(client, args) {
      const tx = new Transaction();
      builder.authorizeGovernance(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeGovernance = authorizeGovernance;
    async function execute(client, args) {
      const tx = new Transaction();
      builder.execute(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.execute = execute;
  })(view = set_stale_price_threshold4.view || (set_stale_price_threshold4.view = {}));
})(set_stale_price_threshold3 || (set_stale_price_threshold3 = {}));
var set_update_fee3;
((set_update_fee4) => {
  let UpdateFee;
  ((UpdateFee2) => {
    UpdateFee2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_update_fee::UpdateFee";
    const TYPE = new TypeDescriptor(UpdateFee2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    UpdateFee2.type = type;
  })(UpdateFee = set_update_fee4.UpdateFee || (set_update_fee4.UpdateFee = {}));
  let builder;
  ((builder2) => {
    function authorizeGovernance(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureBool(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_update_fee::authorize_governance",
        arguments: _args
      });
    }
    builder2.authorizeGovernance = authorizeGovernance;
    function execute(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::set_update_fee::execute",
        arguments: _args
      });
    }
    builder2.execute = execute;
  })(builder = set_update_fee4.builder || (set_update_fee4.builder = {}));
  let view;
  ((view2) => {
    async function authorizeGovernance(client, args) {
      const tx = new Transaction();
      builder.authorizeGovernance(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeGovernance = authorizeGovernance;
    async function execute(client, args) {
      const tx = new Transaction();
      builder.execute(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.execute = execute;
  })(view = set_update_fee4.view || (set_update_fee4.view = {}));
})(set_update_fee3 || (set_update_fee3 = {}));
var setup3;
((setup4) => {
  let DeployerCap;
  ((DeployerCap2) => {
    DeployerCap2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::setup::DeployerCap";
    const TYPE = new TypeDescriptor(DeployerCap2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    DeployerCap2.type = type;
  })(DeployerCap = setup4.DeployerCap || (setup4.DeployerCap = {}));
  let builder;
  ((builder2) => {
    function initAndShareState(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::setup::init_and_share_state",
        arguments: _args
      });
    }
    builder2.initAndShareState = initAndShareState;
  })(builder = setup4.builder || (setup4.builder = {}));
  let view;
  ((view2) => {
    async function initAndShareState(client, args) {
      const tx = new Transaction();
      builder.initAndShareState(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.initAndShareState = initAndShareState;
  })(view = setup4.view || (setup4.view = {}));
})(setup3 || (setup3 = {}));
var state5 = class _state extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("state", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _state({ ..._state.DEFAULT_OPTIONS, ...options });
  }
  onEventCurrentDigest(func, fetchConfig) {
    this.onMoveEvent(func, { type: "state::CurrentDigest" }, fetchConfig);
    return this;
  }
};
((state6) => {
  let CurrentDigest;
  ((CurrentDigest2) => {
    CurrentDigest2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::CurrentDigest";
    const TYPE = new TypeDescriptor(CurrentDigest2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    CurrentDigest2.type = type;
  })(CurrentDigest = state6.CurrentDigest || (state6.CurrentDigest = {}));
  let LatestOnly;
  ((LatestOnly2) => {
    LatestOnly2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::LatestOnly";
    const TYPE = new TypeDescriptor(LatestOnly2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    LatestOnly2.type = type;
  })(LatestOnly = state6.LatestOnly || (state6.LatestOnly = {}));
  let State;
  ((State2) => {
    State2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::State";
    const TYPE = new TypeDescriptor(State2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    State2.type = type;
  })(State = state6.State || (state6.State = {}));
  let builder;
  ((builder2) => {
    function assertAuthorizedDigest(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::assert_authorized_digest",
        arguments: _args
      });
    }
    builder2.assertAuthorizedDigest = assertAuthorizedDigest;
    function assertLatestOnly(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::assert_latest_only",
        arguments: _args
      });
    }
    builder2.assertLatestOnly = assertLatestOnly;
    function authorizeUpgrade(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::authorize_upgrade",
        arguments: _args
      });
    }
    builder2.authorizeUpgrade = authorizeUpgrade;
    function borrowMutConsumedVaas(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::borrow_mut_consumed_vaas",
        arguments: _args
      });
    }
    builder2.borrowMutConsumedVaas = borrowMutConsumedVaas;
    function borrowMutConsumedVaasUnchecked(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::borrow_mut_consumed_vaas_unchecked",
        arguments: _args
      });
    }
    builder2.borrowMutConsumedVaasUnchecked = borrowMutConsumedVaasUnchecked;
    function commitUpgrade(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::commit_upgrade",
        arguments: _args
      });
    }
    builder2.commitUpgrade = commitUpgrade;
    function currentPackage(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::current_package",
        arguments: _args
      });
    }
    builder2.currentPackage = currentPackage;
    function getBaseUpdateFee(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::get_base_update_fee",
        arguments: _args
      });
    }
    builder2.getBaseUpdateFee = getBaseUpdateFee;
    function getFeeRecipient(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::get_fee_recipient",
        arguments: _args
      });
    }
    builder2.getFeeRecipient = getFeeRecipient;
    function getLastExecutedGovernanceSequence(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::get_last_executed_governance_sequence",
        arguments: _args
      });
    }
    builder2.getLastExecutedGovernanceSequence = getLastExecutedGovernanceSequence;
    function getPriceInfoObjectId(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::get_price_info_object_id",
        arguments: _args
      });
    }
    builder2.getPriceInfoObjectId = getPriceInfoObjectId;
    function getStalePriceThresholdSecs(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::get_stale_price_threshold_secs",
        arguments: _args
      });
    }
    builder2.getStalePriceThresholdSecs = getStalePriceThresholdSecs;
    function governanceChain(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::governance_chain",
        arguments: _args
      });
    }
    builder2.governanceChain = governanceChain;
    function governanceContract(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::governance_contract",
        arguments: _args
      });
    }
    builder2.governanceContract = governanceContract;
    function governanceDataSource(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::governance_data_source",
        arguments: _args
      });
    }
    builder2.governanceDataSource = governanceDataSource;
    function governanceModule(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::governance_module",
        arguments: _args
      });
    }
    builder2.governanceModule = governanceModule;
    function isValidDataSource(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::is_valid_data_source",
        arguments: _args
      });
    }
    builder2.isValidDataSource = isValidDataSource;
    function isValidGovernanceDataSource(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::is_valid_governance_data_source",
        arguments: _args
      });
    }
    builder2.isValidGovernanceDataSource = isValidGovernanceDataSource;
    function migrateV011(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::migrate__v__0_1_1",
        arguments: _args
      });
    }
    builder2.migrateV011 = migrateV011;
    function migrateVersion(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::migrate_version",
        arguments: _args
      });
    }
    builder2.migrateVersion = migrateVersion;
    function new_(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::new",
        arguments: _args
      });
    }
    builder2.new_ = new_;
    function priceFeedObjectExists(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::price_feed_object_exists",
        arguments: _args
      });
    }
    builder2.priceFeedObjectExists = priceFeedObjectExists;
    function registerPriceInfoObject(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::register_price_info_object",
        arguments: _args
      });
    }
    builder2.registerPriceInfoObject = registerPriceInfoObject;
    function setBaseUpdateFee(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::set_base_update_fee",
        arguments: _args
      });
    }
    builder2.setBaseUpdateFee = setBaseUpdateFee;
    function setDataSources(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::set_data_sources",
        arguments: _args
      });
    }
    builder2.setDataSources = setDataSources;
    function setFeeRecipient(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureAddress(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::set_fee_recipient",
        arguments: _args
      });
    }
    builder2.setFeeRecipient = setFeeRecipient;
    function setGovernanceDataSource(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::set_governance_data_source",
        arguments: _args
      });
    }
    builder2.setGovernanceDataSource = setGovernanceDataSource;
    function setLastExecutedGovernanceSequence(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::set_last_executed_governance_sequence",
        arguments: _args
      });
    }
    builder2.setLastExecutedGovernanceSequence = setLastExecutedGovernanceSequence;
    function setStalePriceThresholdSecs(tx, args) {
      const _args = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::state::set_stale_price_threshold_secs",
        arguments: _args
      });
    }
    builder2.setStalePriceThresholdSecs = setStalePriceThresholdSecs;
  })(builder = state6.builder || (state6.builder = {}));
  let view;
  ((view2) => {
    async function assertAuthorizedDigest(client, args) {
      const tx = new Transaction();
      builder.assertAuthorizedDigest(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.assertAuthorizedDigest = assertAuthorizedDigest;
    async function assertLatestOnly(client, args) {
      const tx = new Transaction();
      builder.assertLatestOnly(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.assertLatestOnly = assertLatestOnly;
    async function authorizeUpgrade(client, args) {
      const tx = new Transaction();
      builder.authorizeUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.authorizeUpgrade = authorizeUpgrade;
    async function borrowMutConsumedVaas(client, args) {
      const tx = new Transaction();
      builder.borrowMutConsumedVaas(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.borrowMutConsumedVaas = borrowMutConsumedVaas;
    async function borrowMutConsumedVaasUnchecked(client, args) {
      const tx = new Transaction();
      builder.borrowMutConsumedVaasUnchecked(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.borrowMutConsumedVaasUnchecked = borrowMutConsumedVaasUnchecked;
    async function commitUpgrade(client, args) {
      const tx = new Transaction();
      builder.commitUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.commitUpgrade = commitUpgrade;
    async function currentPackage(client, args) {
      const tx = new Transaction();
      builder.currentPackage(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.currentPackage = currentPackage;
    async function getBaseUpdateFee(client, args) {
      const tx = new Transaction();
      builder.getBaseUpdateFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getBaseUpdateFee = getBaseUpdateFee;
    async function getFeeRecipient(client, args) {
      const tx = new Transaction();
      builder.getFeeRecipient(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getFeeRecipient = getFeeRecipient;
    async function getLastExecutedGovernanceSequence(client, args) {
      const tx = new Transaction();
      builder.getLastExecutedGovernanceSequence(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getLastExecutedGovernanceSequence = getLastExecutedGovernanceSequence;
    async function getPriceInfoObjectId(client, args) {
      const tx = new Transaction();
      builder.getPriceInfoObjectId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.getPriceInfoObjectId = getPriceInfoObjectId;
    async function getStalePriceThresholdSecs(client, args) {
      const tx = new Transaction();
      builder.getStalePriceThresholdSecs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.getStalePriceThresholdSecs = getStalePriceThresholdSecs;
    async function governanceChain(client, args) {
      const tx = new Transaction();
      builder.governanceChain(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.governanceChain = governanceChain;
    async function governanceContract(client, args) {
      const tx = new Transaction();
      builder.governanceContract(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.governanceContract = governanceContract;
    async function governanceDataSource(client, args) {
      const tx = new Transaction();
      builder.governanceDataSource(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.governanceDataSource = governanceDataSource;
    async function governanceModule(client, args) {
      const tx = new Transaction();
      builder.governanceModule(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.governanceModule = governanceModule;
    async function isValidDataSource(client, args) {
      const tx = new Transaction();
      builder.isValidDataSource(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.isValidDataSource = isValidDataSource;
    async function isValidGovernanceDataSource(client, args) {
      const tx = new Transaction();
      builder.isValidGovernanceDataSource(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.isValidGovernanceDataSource = isValidGovernanceDataSource;
    async function migrateV011(client, args) {
      const tx = new Transaction();
      builder.migrateV011(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.migrateV011 = migrateV011;
    async function migrateVersion(client, args) {
      const tx = new Transaction();
      builder.migrateVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.migrateVersion = migrateVersion;
    async function new_(client, args) {
      const tx = new Transaction();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.new_ = new_;
    async function priceFeedObjectExists(client, args) {
      const tx = new Transaction();
      builder.priceFeedObjectExists(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.priceFeedObjectExists = priceFeedObjectExists;
    async function registerPriceInfoObject(client, args) {
      const tx = new Transaction();
      builder.registerPriceInfoObject(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.registerPriceInfoObject = registerPriceInfoObject;
    async function setBaseUpdateFee(client, args) {
      const tx = new Transaction();
      builder.setBaseUpdateFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setBaseUpdateFee = setBaseUpdateFee;
    async function setDataSources(client, args) {
      const tx = new Transaction();
      builder.setDataSources(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setDataSources = setDataSources;
    async function setFeeRecipient(client, args) {
      const tx = new Transaction();
      builder.setFeeRecipient(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setFeeRecipient = setFeeRecipient;
    async function setGovernanceDataSource(client, args) {
      const tx = new Transaction();
      builder.setGovernanceDataSource(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setGovernanceDataSource = setGovernanceDataSource;
    async function setLastExecutedGovernanceSequence(client, args) {
      const tx = new Transaction();
      builder.setLastExecutedGovernanceSequence(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setLastExecutedGovernanceSequence = setLastExecutedGovernanceSequence;
    async function setStalePriceThresholdSecs(client, args) {
      const tx = new Transaction();
      builder.setStalePriceThresholdSecs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(
        inspectRes
      );
    }
    view2.setStalePriceThresholdSecs = setStalePriceThresholdSecs;
  })(view = state6.view || (state6.view = {}));
})(state5 || (state5 = {}));
var version_control3 = class _version_control extends import_sui12.SuiBaseProcessor {
  constructor(options) {
    super("version_control", options);
  }
  static DEFAULT_OPTIONS = {
    address: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302",
    network: import_sui12.SuiNetwork.MAIN_NET
  };
  static bind(options = {}) {
    return new _version_control({
      ..._version_control.DEFAULT_OPTIONS,
      ...options
    });
  }
  onEventV__0_1_1(func, fetchConfig) {
    this.onMoveEvent(func, { type: "version_control::V__0_1_1" }, fetchConfig);
    return this;
  }
  onEventV__DUMMY(func, fetchConfig) {
    this.onMoveEvent(func, { type: "version_control::V__DUMMY" }, fetchConfig);
    return this;
  }
};
((version_control4) => {
  let V__0_1_1;
  ((V__0_1_12) => {
    V__0_1_12.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::version_control::V__0_1_1";
    const TYPE = new TypeDescriptor(V__0_1_12.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    V__0_1_12.type = type;
  })(V__0_1_1 = version_control4.V__0_1_1 || (version_control4.V__0_1_1 = {}));
  let V__DUMMY;
  ((V__DUMMY2) => {
    V__DUMMY2.TYPE_QNAME = "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::version_control::V__DUMMY";
    const TYPE = new TypeDescriptor(V__DUMMY2.TYPE_QNAME);
    function type() {
      return TYPE.apply();
    }
    V__DUMMY2.type = type;
  })(V__DUMMY = version_control4.V__DUMMY || (version_control4.V__DUMMY = {}));
  let builder;
  ((builder2) => {
    function currentVersion(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::version_control::current_version",
        arguments: _args
      });
    }
    builder2.currentVersion = currentVersion;
    function previousVersion(tx, args) {
      const _args = [];
      return tx.moveCall({
        target: "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302::version_control::previous_version",
        arguments: _args
      });
    }
    builder2.previousVersion = previousVersion;
  })(builder = version_control4.builder || (version_control4.builder = {}));
  let view;
  ((view2) => {
    async function currentVersion(client, args) {
      const tx = new Transaction();
      builder.currentVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.currentVersion = currentVersion;
    async function previousVersion(client, args) {
      const tx = new Transaction();
      builder.previousVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS
      });
      return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
    }
    view2.previousVersion = previousVersion;
  })(view = version_control4.view || (version_control4.view = {}));
})(version_control3 || (version_control3 = {}));
var MODULES5 = JSON.parse(
  '{"batch_price_attestation":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"batch_price_attestation","friends":[],"structs":{"BatchPriceAttestation":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"header","type":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"batch_price_attestation","name":"Header","typeArguments":[]}}},{"name":"attestation_size","type":"U64"},{"name":"attestation_count","type":"U64"},{"name":"price_infos","type":{"Vector":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}}}]},"Header":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"magic","type":"U64"},{"name":"version_major","type":"U64"},{"name":"version_minor","type":"U64"},{"name":"header_size","type":"U64"},{"name":"payload_id","type":"U8"}]}},"exposedFunctions":{"deserialize":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"batch_price_attestation","name":"BatchPriceAttestation","typeArguments":[]}}]},"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"batch_price_attestation","name":"BatchPriceAttestation","typeArguments":[]}}],"return":[{"Vector":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}}]},"get_attestation_count":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"batch_price_attestation","name":"BatchPriceAttestation","typeArguments":[]}}}],"return":["U64"]},"get_price_info":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"batch_price_attestation","name":"BatchPriceAttestation","typeArguments":[]}}},"U64"],"return":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}}]}}},"contract_upgrade":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"contract_upgrade","friends":[{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"migrate"}],"structs":{"ContractUpgraded":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"old_contract","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"new_contract","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"UpgradeContract":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"digest","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}}]}},"exposedFunctions":{"authorize_governance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeTicket","typeArguments":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_witness","name":"GovernanceWitness","typeArguments":[]}}]}}]},"authorize_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeReceipt","typeArguments":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_witness","name":"GovernanceWitness","typeArguments":[]}}]}}],"return":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeTicket","typeArguments":[]}}]},"commit_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeReceipt","typeArguments":[]}}],"return":[]},"take_digest":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]}}},"data_source":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"data_source","friends":[{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"pyth"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_data_sources"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_governance_data_source"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"state"}],"structs":{"DataSource":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"emitter_chain","type":"U64"},{"name":"emitter_address","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}}]}},"exposedFunctions":{"add":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}}],"return":[]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}}],"return":["Bool"]},"emitter_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}]},"emitter_chain":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}}}],"return":["U64"]},"empty":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}],"return":[]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["U64",{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}}]},"new_data_source_registry":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"deserialize":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"deserialize","friends":[],"structs":{},"exposedFunctions":{"deserialize_i32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"i64","name":"I64","typeArguments":[]}}]},"deserialize_i64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"i64","name":"I64","typeArguments":[]}}]},"deserialize_u16":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":["U16"]},"deserialize_u32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":["U32"]},"deserialize_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":["U64"]},"deserialize_u8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}}],"return":["U8"]},"deserialize_vector":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"cursor","name":"Cursor","typeArguments":["U8"]}}},"U64"],"return":[{"Vector":"U8"}]}}},"event":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"event","friends":[{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"pyth"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"state"}],"structs":{"PriceFeedUpdateEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"price_feed","type":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_feed","name":"PriceFeed","typeArguments":[]}}},{"name":"timestamp","type":"U64"}]},"PythInitializationEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"emit_price_feed_update":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_feed","name":"PriceFeed","typeArguments":[]}},"U64"],"return":[]},"emit_pyth_initialization_event":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[]}}},"governance":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"governance","friends":[],"structs":{},"exposedFunctions":{"execute_governance_instruction":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeReceipt","typeArguments":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_witness","name":"GovernanceWitness","typeArguments":[]}}]}}],"return":[]}}},"governance_action":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"governance_action","friends":[],"structs":{"GovernanceAction":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"value","type":"U8"}]}},"exposedFunctions":{"from_u8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U8"],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]},"get_value":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}],"return":["U8"]},"new_contract_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]},"new_set_data_sources":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]},"new_set_fee_recipient":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]},"new_set_governance_data_source":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]},"new_set_stale_price_threshold":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]},"new_set_update_fee":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]}}},"governance_instruction":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"governance_instruction","friends":[],"structs":{"GovernanceInstruction":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"module_","type":"U8"},{"name":"action","type":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}},{"name":"target_chain_id","type":"U64"},{"name":"payload","type":{"Vector":"U8"}}]}},"exposedFunctions":{"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_instruction","name":"GovernanceInstruction","typeArguments":[]}}],"return":[{"Vector":"U8"}]},"from_byte_vec":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_instruction","name":"GovernanceInstruction","typeArguments":[]}}]},"get_action":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_instruction","name":"GovernanceInstruction","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_action","name":"GovernanceAction","typeArguments":[]}}]},"get_module":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_instruction","name":"GovernanceInstruction","typeArguments":[]}}}],"return":["U8"]},"get_target_chain_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_instruction","name":"GovernanceInstruction","typeArguments":[]}}}],"return":["U64"]}}},"governance_witness":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"governance_witness","friends":[{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"contract_upgrade"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_data_sources"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_fee_recipient"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_governance_data_source"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_stale_price_threshold"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_update_fee"}],"structs":{"GovernanceWitness":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"new_governance_witness":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_witness","name":"GovernanceWitness","typeArguments":[]}}]}}},"hot_potato_vector":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"hot_potato_vector","friends":[{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"pyth"}],"structs":{"HotPotatoVector":{"abilities":{"abilities":[]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop"]},"isPhantom":false}],"fields":[{"name":"contents","type":{"Vector":{"TypeParameter":0}}}]}},"exposedFunctions":{"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":[{"Reference":{"TypeParameter":0}}]},"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"TypeParameter":0}]}}}],"return":["Bool"]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Vector":{"TypeParameter":0}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"TypeParameter":0}]}}]},"pop_back":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"TypeParameter":0}]}}],"return":[{"TypeParameter":0},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"TypeParameter":0}]}}]}}},"i64":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"i64","friends":[],"structs":{"I64":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"negative","type":"Bool"},{"name":"magnitude","type":"U64"}]}},"exposedFunctions":{"from_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"i64","name":"I64","typeArguments":[]}}]},"get_is_negative":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"i64","name":"I64","typeArguments":[]}}}],"return":["Bool"]},"get_magnitude_if_negative":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"i64","name":"I64","typeArguments":[]}}}],"return":["U64"]},"get_magnitude_if_positive":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"i64","name":"I64","typeArguments":[]}}}],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","Bool"],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"i64","name":"I64","typeArguments":[]}}]}}},"migrate":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"migrate","friends":[],"structs":{"MigrateComplete":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"package","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]}},"exposedFunctions":{"migrate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeReceipt","typeArguments":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_witness","name":"GovernanceWitness","typeArguments":[]}}]}}],"return":[]}}},"price":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"price","friends":[],"structs":{"Price":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"price","type":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"i64","name":"I64","typeArguments":[]}}},{"name":"conf","type":"U64"},{"name":"expo","type":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"i64","name":"I64","typeArguments":[]}}},{"name":"timestamp","type":"U64"}]}},"exposedFunctions":{"get_conf":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price","name":"Price","typeArguments":[]}}}],"return":["U64"]},"get_expo":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price","name":"Price","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"i64","name":"I64","typeArguments":[]}}]},"get_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price","name":"Price","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"i64","name":"I64","typeArguments":[]}}]},"get_timestamp":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price","name":"Price","typeArguments":[]}}}],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"i64","name":"I64","typeArguments":[]}},"U64",{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"i64","name":"I64","typeArguments":[]}},"U64"],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price","name":"Price","typeArguments":[]}}]}}},"price_feed":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"price_feed","friends":[],"structs":{"PriceFeed":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"price_identifier","type":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}},{"name":"price","type":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price","name":"Price","typeArguments":[]}}},{"name":"ema_price","type":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price","name":"Price","typeArguments":[]}}}]}},"exposedFunctions":{"from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_feed","name":"PriceFeed","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_feed","name":"PriceFeed","typeArguments":[]}}]},"get_ema_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_feed","name":"PriceFeed","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price","name":"Price","typeArguments":[]}}]},"get_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_feed","name":"PriceFeed","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price","name":"Price","typeArguments":[]}}]},"get_price_identifier":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_feed","name":"PriceFeed","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price","name":"Price","typeArguments":[]}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price","name":"Price","typeArguments":[]}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_feed","name":"PriceFeed","typeArguments":[]}}]}}},"price_identifier":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"price_identifier","friends":[],"structs":{"PriceIdentifier":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bytes","type":{"Vector":"U8"}}]}},"exposedFunctions":{"from_byte_vec":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}]},"get_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}}],"return":[{"Vector":"U8"}]}}},"price_info":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"price_info","friends":[{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"pyth"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"state"}],"structs":{"PriceInfo":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"attestation_time","type":"U64"},{"name":"arrival_time","type":"U64"},{"name":"price_feed","type":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_feed","name":"PriceFeed","typeArguments":[]}}}]},"PriceInfoObject":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"price_info","type":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}}]}},"exposedFunctions":{"add":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}],"return":["Bool"]},"get_arrival_time":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}}],"return":["U64"]},"get_attestation_time":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}}],"return":["U64"]},"get_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"get_id_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}],"return":[{"Vector":"U8"}]},"get_price_feed":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_feed","name":"PriceFeed","typeArguments":[]}}}]},"get_price_identifier":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}]},"get_price_info_from_price_info_object":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}]},"new_price_info":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64",{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_feed","name":"PriceFeed","typeArguments":[]}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}]},"new_price_info_object":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}]},"new_price_info_registry":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"uid_to_inner":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"update_price_info_object":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}}],"return":[]}}},"price_status":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"price_status","friends":[],"structs":{"PriceStatus":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"status","type":"U64"}]}},"exposedFunctions":{"from_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_status","name":"PriceStatus","typeArguments":[]}}]},"get_status":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_status","name":"PriceStatus","typeArguments":[]}}}],"return":["U64"]},"new_trading":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_status","name":"PriceStatus","typeArguments":[]}}]},"new_unknown":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_status","name":"PriceStatus","typeArguments":[]}}]}}},"pyth":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"pyth","friends":[],"structs":{},"exposedFunctions":{"create_price_feeds":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"create_price_infos_hot_potato":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"vaa","name":"VAA","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}]}}]},"get_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price","name":"Price","typeArguments":[]}}]},"get_price_no_older_than":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},"U64"],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price","name":"Price","typeArguments":[]}}]},"get_price_unsafe":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price","name":"Price","typeArguments":[]}}]},"get_stale_price_threshold_secs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":["U64"]},"get_total_update_fee":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},"U64"],"return":["U64"]},"init_pyth":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"setup","name":"DeployerCap","typeArguments":[]}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}},"U64","U64",{"Vector":"U8"},{"Vector":"U64"},{"Vector":{"Vector":"U8"}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"price_feed_exists":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}],"return":["Bool"]},"update_cache":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}},{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[]},"update_single_price_feed":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfoObject","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"hot_potato_vector","name":"HotPotatoVector","typeArguments":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_info","name":"PriceInfo","typeArguments":[]}}]}}]}}},"set":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set","friends":[],"structs":{"Set":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop","Store"]},"isPhantom":false}],"fields":[{"name":"keys","type":{"Vector":{"TypeParameter":0}}},{"name":"elems","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"TypeParameter":0},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"set","name":"Unit","typeArguments":[]}}]}}}]},"Unit":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"add":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"set","name":"Set","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":0}],"return":[]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"set","name":"Set","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":0}],"return":["Bool"]},"empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"set","name":"Set","typeArguments":[{"TypeParameter":0}]}}}],"return":[]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"set","name":"Set","typeArguments":[{"TypeParameter":0}]}}]}}},"set_data_sources":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_data_sources","friends":[{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"governance"}],"structs":{"DataSources":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"sources","type":{"Vector":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}}}}]}},"exposedFunctions":{"authorize_governance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},"Bool"],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeTicket","typeArguments":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_witness","name":"GovernanceWitness","typeArguments":[]}}]}}]},"execute":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"}],"return":[]}}},"set_fee_recipient":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_fee_recipient","friends":[{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"governance"}],"structs":{"PythFeeRecipient":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"recipient","type":"Address"}]}},"exposedFunctions":{"authorize_governance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeTicket","typeArguments":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_witness","name":"GovernanceWitness","typeArguments":[]}}]}}]},"execute":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"}],"return":[]}}},"set_governance_data_source":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_governance_data_source","friends":[{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"governance"}],"structs":{"GovernanceDataSource":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"emitter_chain_id","type":"U64"},{"name":"emitter_address","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}},{"name":"initial_sequence","type":"U64"}]}},"exposedFunctions":{"authorize_governance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},"Bool"],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeTicket","typeArguments":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_witness","name":"GovernanceWitness","typeArguments":[]}}]}}]},"execute":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"}],"return":[]}}},"set_stale_price_threshold":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_stale_price_threshold","friends":[{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"governance"}],"structs":{"StalePriceThreshold":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"threshold","type":"U64"}]}},"exposedFunctions":{"authorize_governance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},"Bool"],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeTicket","typeArguments":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_witness","name":"GovernanceWitness","typeArguments":[]}}]}}]},"execute":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"}],"return":[]}}},"set_update_fee":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_update_fee","friends":[{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"governance"}],"structs":{"UpdateFee":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"mantissa","type":"U64"},{"name":"exponent","type":"U64"}]}},"exposedFunctions":{"authorize_governance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},"Bool"],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"governance_message","name":"DecreeTicket","typeArguments":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"governance_witness","name":"GovernanceWitness","typeArguments":[]}}]}}]},"execute":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"}],"return":[]}}},"setup":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"setup","friends":[{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"pyth"}],"structs":{"DeployerCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]}},"exposedFunctions":{"init_and_share_state":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"setup","name":"DeployerCap","typeArguments":[]}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}},{"Vector":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"state":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"state","friends":[{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"contract_upgrade"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"governance"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"governance_action"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"migrate"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"pyth"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_data_sources"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_fee_recipient"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_governance_data_source"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_stale_price_threshold"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"set_update_fee"},{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"setup"}],"structs":{"CurrentDigest":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"LatestOnly":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"State":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"governance_data_source","type":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}}},{"name":"stale_price_threshold","type":"U64"},{"name":"base_update_fee","type":"U64"},{"name":"fee_recipient_address","type":"Address"},{"name":"last_executed_governance_sequence","type":"U64"},{"name":"consumed_vaas","type":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"consumed_vaas","name":"ConsumedVAAs","typeArguments":[]}}},{"name":"upgrade_cap","type":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}}]}},"exposedFunctions":{"assert_authorized_digest":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[]},"assert_latest_only":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}]},"authorize_upgrade":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeTicket","typeArguments":[]}}]},"borrow_mut_consumed_vaas":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"consumed_vaas","name":"ConsumedVAAs","typeArguments":[]}}}]},"borrow_mut_consumed_vaas_unchecked":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"consumed_vaas","name":"ConsumedVAAs","typeArguments":[]}}}]},"commit_upgrade":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeReceipt","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"current_package":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"get_base_update_fee":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":["U64"]},"get_fee_recipient":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":["Address"]},"get_last_executed_governance_sequence":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":["U64"]},"get_price_info_object_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Vector":"U8"}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"get_stale_price_threshold_secs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":["U64"]},"governance_chain":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":["U16"]},"governance_contract":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"external_address","name":"ExternalAddress","typeArguments":[]}}]},"governance_data_source":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}}]},"governance_module":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a","module":"bytes32","name":"Bytes32","typeArguments":[]}}]},"is_valid_data_source":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}}],"return":["Bool"]},"is_valid_governance_data_source":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}}],"return":["Bool"]},"migrate__v__0_1_1":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":[]},"migrate_version":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}}],"return":[]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}},{"Vector":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}},"U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}]},"price_feed_object_exists":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}}],"return":["Bool"]},"register_price_info_object":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"price_identifier","name":"PriceIdentifier","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[]},"set_base_update_fee":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},"U64"],"return":[]},"set_data_sources":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}}}],"return":[]},"set_fee_recipient":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},"Address"],"return":[]},"set_governance_data_source":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"data_source","name":"DataSource","typeArguments":[]}}],"return":[]},"set_last_executed_governance_sequence":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},"U64"],"return":[]},"set_stale_price_threshold_secs":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"LatestOnly","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"state","name":"State","typeArguments":[]}}},"U64"],"return":[]}}},"version_control":{"fileFormatVersion":6,"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"version_control","friends":[{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","name":"state"}],"structs":{"V__0_1_1":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"V__DUMMY":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"current_version":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"version_control","name":"V__0_1_1","typeArguments":[]}}]},"previous_version":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302","module":"version_control","name":"V__DUMMY","typeArguments":[]}}]}}}}'
);
function loadAllTypes11(coder) {
  _0x23.loadAllTypes(coder);
  loadAllTypes7(
    coder
  );
  for (const m of Object.values(MODULES5)) {
    coder.load(
      m,
      "0xb53b0f4174108627fbee72e2498b58d6a2714cded53fac537034c220d26302"
    );
  }
}
loadAllTypes11((0, import_sui9.defaultMoveCoder)(import_sui12.SuiNetwork.MAIN_NET));

// src/sui.ts
var import_sdk4 = require("@sentio/sdk");
var import_sdk5 = require("@sentio/sdk");
var commonOptions3 = {
  sparse: true,
  aggregationConfig: {
    intervalInMinutes: [1],
    types: [import_sdk5.AggregationType.LAST]
  }
};
var priceGauage3 = import_sdk4.Gauge.register("price", commonOptions3);
var priceEMAGauage2 = import_sdk4.Gauge.register("price_ema", commonOptions3);
var evmPriceGauage2 = import_sdk4.Gauge.register("evm_price_unsafe", commonOptions3);
var price_update_occur3 = import_sdk4.Gauge.register("price_update_occur", commonOptions3);
var price_update_counter3 = import_sdk4.Counter.register("price_update_counter", {
  resolutionConfig: {
    intervalInMinutes: 5
  }
});
var cache2 = new lru_cache_default({
  maxSize: 5e3,
  sizeCalculation: (value, key) => {
    return 1;
  }
});
event2.bind({}).onEventPriceFeedUpdateEvent((evt, ctx) => {
  const priceId = decodeBytesArray(evt.data_decoded.price_feed.price_identifier.bytes);
  const symbol = PRICE_MAP.get(priceId) || "not listed";
  var isNative;
  if (priceId == "0x23d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc65744") {
    isNative = "true";
  } else {
    isNative = "false";
  }
  const labels = { priceId, symbol, isNative };
  priceGauage3.record(ctx, getPrice2(evt.data_decoded.price_feed.price), labels);
  evmPriceGauage2.record(ctx, getPrice2(evt.data_decoded.price_feed.price), labels);
  priceEMAGauage2.record(ctx, getPrice2(evt.data_decoded.price_feed.ema_price), labels);
  price_update_occur3.record(ctx, ctx.timestamp.getTime(), labels);
  price_update_counter3.add(ctx, 1, labels);
});
event3.bind({}).onEventPriceFeedUpdateEvent((evt, ctx) => {
  const priceId = decodeBytesArray(evt.data_decoded.price_feed.price_identifier.bytes);
  const symbol = PRICE_MAP.get(priceId) || "not listed";
  var isNative;
  if (priceId == "0x23d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc65744") {
    isNative = "true";
  } else {
    isNative = "false";
  }
  const labels = { priceId, symbol, isNative };
  priceGauage3.record(ctx, getPrice2(evt.data_decoded.price_feed.price), labels);
  evmPriceGauage2.record(ctx, getPrice2(evt.data_decoded.price_feed.price), labels);
  priceEMAGauage2.record(ctx, getPrice2(evt.data_decoded.price_feed.ema_price), labels);
  price_update_occur3.record(ctx, 1, labels);
  price_update_counter3.add(ctx, 1, labels);
});
function getPrice2(p) {
  let expo = p.expo.magnitude.asBigDecimal();
  if (p.expo.negative) {
    expo = expo.negated();
  }
  let base2 = p.price.magnitude.asBigDecimal();
  if (p.price.negative) {
    base2 = base2.negated();
  }
  return base2.multipliedBy((0, import_sdk5.BigDecimal)(10).exponentiatedBy(expo));
}
function decodeBytesArray(bytes4) {
  return "0x" + Buffer.from(bytes4).toString("hex");
}
/*! Bundled license information:

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
